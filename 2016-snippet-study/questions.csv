"","ID","Pair","Atom","Type","Code","Answer"
"1",1,2,"Implicit Predicate","Confusing","void main(){
   int V1 = 10, V2 = 3;
   if (! (V1 % V2)){
      printf(""%s\n"", ""true"");
   }
   else{
      printf(""%s\n"", ""false"");
   }
}","false"
"2",2,1,"Implicit Predicate","Non-confusing","void main(){
   int V1 = 1, V2 = 2;
   if ( (V2 - V1) == 0){
      printf(""%s\n"", ""true"");
   }
   else{
      printf(""%s\n"", ""false"");
   }
}","false"
"3",3,4,"Implicit Predicate","Confusing","void main() { 
   int V1 = 7; 
   if (V1 = 8) 
      printf(""true\n""); 
   else
      printf(""false\n""); 
}","true"
"4",4,3,"Implicit Predicate","Non-confusing","void main()
{
   int V1 = 7;
   if ((V1 = 8) != 0)
      printf(""true"");
   else
      printf(""false"");
}","true"
"5",5,6,"Implicit Predicate","Confusing","void main() {
   if (""V1"")
      printf(""true"");
   else
      printf(""false"");
}","true"
"6",6,5,"Implicit Predicate","Non-confusing","void main() {
   if (""V1"" != '\0')
      printf(""true\n"");
   else
      printf(""false\n"");
}","true"
"7",7,8,"Infix Operator Precedence","Confusing","void main() { 
   int V1;
   V1 = 2 - 4 / 2;
   printf(""%d\n"", V1);
}","0"
"8",8,7,"Infix Operator Precedence","Non-confusing","void main() { 
   int V1;
   V1 = 3 + (9 / 3);
   printf(""%d\n"", V1);
}","6"
"9",9,10,"Infix Operator Precedence","Confusing","void main() {
   if (! 0 && 2) {
      printf(""true"");
   } else {
      printf(""false"");
   }
}","true"
"10",10,9,"Infix Operator Precedence","Non-confusing","void main() {
   if ( 1 && (! 0) ) {
      printf(""true"");
   } else {
      printf(""false"");
   }
}","true"
"11",11,12,"Infix Operator Precedence","Confusing","void main() {
   if (0 && 1 || 2) {
      printf(""true"");
   } else {
      printf(""false"");
   }
}","true"
"12",12,11,"Infix Operator Precedence","Non-confusing","void main() {
   if ((2 && 0) || 5) {
      printf(""true"");
   } else {
      printf(""false"");
   }
}","true"
"13",13,14,"Post-Increment/Decrement","Confusing","void main() { 
   int V1 = 2;
   int V2 = 3 + V1++;
   printf(""%d %d\n"", V1, V2);
}","3 5"
"14",14,13,"Post-Increment/Decrement","Non-confusing","void main() { 
   int V1 =  2, V2;
   V2 = V1 + 3;
   V1++;
   printf(""%d %d\n"", V1, V2);
}","3 5"
"15",15,16,"Post-Increment/Decrement","Confusing","void main() { 
   int V1 = 0;
   if (V1++ == 0) {
      printf(""true "");
   }
   else {
      printf(""false "");
   }
   printf(""%d"", V1);
}","true 1"
"16",16,15,"Post-Increment/Decrement","Non-confusing","void main() { 
   int V1 = 0;
   if (V1 == 0) {
      printf(""true "");
   }
   else {
      printf(""false "");
   }
   V1++;
   printf(""%d"", V1);
}","true 1"
"17",17,18,"Post-Increment/Decrement","Confusing","void main() { 
   int V1 = 2;
   if (V1-- == 1) {
      printf(""true "");
   }
   else {
      printf(""false "");
   }
   printf(""%d"", V1);
}","false 1"
"18",18,17,"Post-Increment/Decrement","Non-confusing","void main() { 
   int V1 = 2;
   if (V1 == 1) {
      printf(""true "");
   }
   else {
      printf(""false "");
   }
   V1--;
   printf(""%d"", V1);
}","false 1"
"19",19,20,"Pre-Increment/Decrement","Confusing","void main() { 
   int V1 = 2;
   int V2 = ++V1 - 2;
   printf(""%d %d\n"", V1, V2);
}","3 1"
"20",20,19,"Pre-Increment/Decrement","Non-confusing","void main() { 
   int V1 = 5, V2;
   ++V1;
   V2 = 5 - V1;
   printf(""%d %d\n"", V1, V2);
}","6 -1"
"21",21,22,"Pre-Increment/Decrement","Confusing","void main() { 
   int V1 = 2;
   if (--V1 == 1) {
      printf(""true "");
   }
   else {
      printf(""false "");
   }
   printf(""%d"", V1);
}","true 1"
"22",22,21,"Pre-Increment/Decrement","Non-confusing","void main() { 
   int V1 = 2;
   V1--;
   if (V1 == 1) {
      printf(""true "");
   }
   else {
      printf(""false "");
   }
   printf(""%d"", V1);
}","true 1"
"23",23,24,"Pre-Increment/Decrement","Confusing","void main() { 
   int V1 = 2;
   int V2 = --V1 + 3;
   printf(""%d %d\n"", V1, V2);
}","1 4"
"24",24,23,"Pre-Increment/Decrement","Non-confusing","void main() { 
   int V1 = 6, V2;
   V2 = 9 - V1;
   --V1;
   printf(""%d %d\n"", V1, V2);
}","5 3"
"25",25,26,"Constant Variables","Confusing","void main() {
   int V1 = 3;
   int V2 = V1 + 2;
   printf(""%d\n"", V2);
}","5"
"26",26,25,"Constant Variables","Non-confusing","void main() {
   int V1 =  2 + 3;
   printf(""%d\n"", V1);
}","5"
"27",27,28,"Constant Variables","Confusing","void main() {
   int V1 = 2;
   int V2 = 2 * V1;
   printf(""%d\n"", V2);
}","4"
"28",28,27,"Constant Variables","Non-confusing","void main() {
   int V1 = 3 * 2;
   printf(""%d\n"", V1);
}","6"
"29",29,30,"Constant Variables","Confusing","void main() {
   int V1 = 2;
   printf(""%f\n"", 2.5 * V1);
}","5"
"30",30,29,"Constant Variables","Non-confusing","void main() {
   printf(""%f\n"", 2 * 4.5);
}","9"
"31",31,32,"remove_INDENTATION_atom","Confusing","void main() {
   int V1 = 2;
   int V2 = 0;
   int V3 = 3;

   if (V1)
      if (V2)
         V3 = V3 + 2;
   else
      V3 = V3 + 4;

   printf(""%d\n"", V3);
}","7"
"32",32,31,"remove_INDENTATION_atom","Non-confusing","void main() {
   int V1 = 2;
   int V2 = 0;
   int V3 = 5;

   if (V1)
      if (V2)
         V3 = V3 + 2;
      else
         V3 = V3 + 4;

   printf(""%d\n"", V3);
}","9"
"33",33,34,"remove_INDENTATION_atom","Confusing","void main() {
   int V1 = 5, V2 = 5;
   while (V2 > 0)
      V2--;
      V1++;
   printf(""%d\n"",V1);
}

","6"
"34",34,33,"remove_INDENTATION_atom","Non-confusing","void main() {
   int V1 = 5, V2 = 5;
   while (V2 > 0)
      V2--;
   V1++;
   printf(""%d\n"",V1);
}","6"
"35",35,36,"remove_INDENTATION_atom","Confusing","void main() {
   int V1 = 1, V2 = 2;
   if (V1 > V2)
   V2 = 1;
   V1 = 2;
   printf(""%d %d\n"",V1, V2);
}","2 2"
"36",36,35,"remove_INDENTATION_atom","Non-confusing","void main() {
   int V1 = 5, V2 = 2;
   if (V1 < V2)
      V1 = 2;
   V2 = 5;
   printf(""%d %d\n"",V1, V2);
}","5 5"
"37",37,38,"Macro Operator Precedence","Confusing","#define M1 64 - 1

void main(){
   int V1;
   V1 = M1 * 2;
   printf(""%d\n"", V1);
}","62"
"38",38,37,"Macro Operator Precedence","Non-confusing","void main(){
   int V1;
   V1 = 128 - 1 * 2;
   printf(""%d\n"", V1);
}","126"
"39",39,40,"Macro Operator Precedence","Confusing","#define M1(V1, V2) V1 * V2

void main(){
   int V3 = M1(1 + 2, 3 + 4);
   printf(""%d\n"", V3);
}

","11"
"40",40,39,"Macro Operator Precedence","Non-confusing","void main(){
   int V1 = 2 + 1 * 4 + 3;
   printf(""%d\n"", V1);
}","9"
"41",41,42,"Macro Operator Precedence","Confusing","#define M1(V1, V2) (V1) * (V2)

void main(){
   int V3 = M1(1 + 2, 3 + 4);
   printf(""%d\n"", V3);
}

","21"
"42",42,41,"Macro Operator Precedence","Non-confusing","void main(){
   int V1 = (2 + 1) * (3 + 4);
   printf(""%d\n"", V1);
}","21"
"43",43,44,"Pointer Arithmetic","Confusing","void main() {
   char *V1 = ""abcdef"" + 3;
   printf(""%s\n"", V1);
}","def"
"44",44,43,"Pointer Arithmetic","Non-confusing","void main() {
   char *V1 = &(""abcdef""[2]);
   printf(""%s\n"", V1);
}","cdef"
"45",45,46,"Pointer Arithmetic","Confusing","void main() {
   int V1[] = {4, 2, 7, 5};
   int *V2 = V1 + 1;
   printf(""%d\n"", *V2);
}","2"
"46",46,45,"Pointer Arithmetic","Non-confusing","void main() {
   int V1[] = {3, 1, 4, 6};
   int *V2 = &V1[1];
   printf(""%d\n"", *V2);
}","1"
"47",47,48,"Pointer Arithmetic","Confusing","void main() {
   int V1[] = {4, 7, 2, 3};
   int *V2 = V1 + 1;
   V2 = V2 + 2;
   printf(""%d\n"", *V2);
}","3"
"48",48,47,"Pointer Arithmetic","Non-confusing","void main() {
   int V1[] = {3, 2, 9, 4};
   int *V2 = &V1[1];
   V2 = &V2[2];
   printf(""%d\n"", *V2);
}","4"
"49",49,50,"Conditional Operator","Confusing","void main() {
   int V1 = 4;

   int V2 = V1 == 3 ? 2 : 1;

   printf(""%d\n"", V2);
}","1"
"50",50,49,"Conditional Operator","Non-confusing","void main() {
   int V1 = 4;
   int V2 = 3;
   int V3;
  
   if (V1 == 3) {
      V3 = 2;
   } else {
      V3 = 1;
   }

   printf(""%d\n"", V3);
}","1"
"51",51,52,"Conditional Operator","Confusing","void main() {
   int V1 = 2;
   int V2 = 3;
   int V3 = 1;

   int V4 = (V1 == 2 ? (V3 == 2 ? 1 : 2) : (V2 == 2 ? 3 : 4));

   printf(""%d\n"", V4);
}","2"
"52",52,51,"Conditional Operator","Non-confusing","void main() {
   int V1 = 2;
   int V2 = 3;
   int V3 = 1;

   int V4;
   if (V1 == 2) {
      if (V3 == 2) {
         V4 = 1;
      } else {
         V4 = 2;
      }
   } else {
      if (V2 == 2) {
         V4 = 3;
      } else {
         V4 = 4;
      }
   }

   printf(""%d\n"", V4);
}","2"
"53",53,54,"Conditional Operator","Confusing","void main() {
   int V1 = 2;
   int V2 = 3;
   int V3 = 1;

   int V4 = V1 == 3 ? V2 : V3;

   printf(""%d\n"", V4);
}","1"
"54",54,53,"Conditional Operator","Non-confusing","void main() {
   int V1 = 2;
   int V2 = 3;
   int V3 = 1;

   int V4;
   if (V1 == 3){
      V4 = V2;
   }
   else{
      V4 = V3;
   }

   printf(""%d\n"", V4);
}","1"
"55",55,56,"Arithmetic as Logic","Confusing","void main() {
   int V1 = 8;

   if ((V1 - 3) * (7 - V1) <= 0) {
      printf(""true\n"");
   } else {
      printf(""false\n"");
   }
}","true"
"56",56,55,"Arithmetic as Logic","Non-confusing","void main() {
   int V1 = 8;

   if (3 <= V1 || V1 >= 7) {
      printf(""true\n"");
   } else {
      printf(""false\n"");
   }
}","true"
"57",57,58,"Arithmetic as Logic","Confusing","void main() {
   int V1 = 2;

   if ((V1 - 2) * (6 - V1) > 0) {
      printf(""true\n"");
   } else {
      printf(""false\n"");
   }
}","false"
"58",58,57,"Arithmetic as Logic","Non-confusing","void main() {
   int V1 = 2;

   if (V1 < 2 || 6 < V1) {
      printf(""true\n"");
   } else {
      printf(""false\n"");
   }
}","false"
"59",59,60,"Arithmetic as Logic","Confusing","void main() {
   int V1 = 5;

   if (V1 + 5 != 0) {
      printf(""true\n"");
   } else {
      printf(""false\n"");
   }
}","true"
"60",60,59,"Arithmetic as Logic","Non-confusing","void main() {
   int V1 = 5;

   if (V1 != -5) {
      printf(""true\n"");
   } else {
      printf(""false\n"");
   }
}","true"
"61",61,62,"Comma Operator","Confusing","void main() {
   int V1, V2;

   V1 = (V2 = 1, 2);

   printf(""%d %d\n"", V1, V2);
}","2 1"
"62",62,61,"Comma Operator","Non-confusing","void main() {
   int V1, V2;

   V1 = 2;
   V2 = 1;

   printf(""%d %d\n"", V1, V2);
}","2 1"
"63",63,64,"Comma Operator","Confusing","void main() {
   int V1 = 3;
   int V2 = (V1 *= 2, V1 += 1);

   printf(""%d %d\n"", V1, V2);
}","7 7"
"64",64,63,"Comma Operator","Non-confusing","void main() {
   int V1 = 3;
  
   V1 *= 2;

   int V2 = (V1 += 1);

   printf(""%d %d\n"", V1, V2);
}","7 7"
"65",65,66,"Comma Operator","Confusing","void main() {
   int V1 = 3;
   int V2 = (V1 += 1, V1 *= 2);

   printf(""%d %d\n"", V1, V2);
}

","8 8"
"66",66,65,"Comma Operator","Non-confusing","void main() {
   int V1 = 3;
  
   V1 += 1;

   int V2 = (V1 *= 2);

   printf(""%d %d\n"", V1, V2);
}","8 8"
"67",67,68,"Preprocessor in Statement","Confusing","void main() {
   char *V1 = ""abcdef""
   #define M1
   ""abcdef"";

   printf(""%s\n"", V1);
}

","abcdefabcdef"
"68",68,67,"Preprocessor in Statement","Non-confusing","void main() {
   char *V1 = ""abcdef""
   ""abcdef"";

   #define M1

   printf(""%s\n"", V1);
}","abcdefabcdef"
"69",69,70,"Preprocessor in Statement","Confusing","void main() {
   int V1;
   V1 = 4;

   int V2 = 1
   #define M1 1
   +
   #define M2 2
   V1;

   printf(""%d %d\n"", V1, V2);
}","4 5"
"70",70,69,"Preprocessor in Statement","Non-confusing","void main() {
   #define M1 1
   #define M2 2

   int V1;
   V1 = 4;

   int V2 = 1 + V1;

   printf(""%d %d\n"", V1, V2);
}","4 5"
"71",71,72,"Preprocessor in Statement","Confusing","void main() {
   int V1 = 1, V2 = 2;

   if (V1 < V2) {
      #define M1 1
      #define M2 2
   } else {
      #define M1 2
      #define M2 1
   }

   printf(""%d %d\n"", M1, M2);
}","2 1"
"72",72,71,"Preprocessor in Statement","Non-confusing","void main() {
   int V1 = 1, V2 = 2;
   #define M1 2
   #define M2 1

   printf(""%d %d\n"", M1, M2);
}","2 1"
"73",73,74,"Side-Effecting Expression","Confusing","void main() {
   int V1 = 2;

   if (V1 = 1) {
      printf(""true\n"");
   } else {
      printf(""false\n"");
   }
}","true"
"74",74,73,"Side-Effecting Expression","Non-confusing","","true"
"75",75,76,"Side-Effecting Expression","Confusing","void main() {
   int V1 = 0;

   if (V1 = 0) {
      printf(""true\n"");
   } else {
      printf(""false\n"");
   }
}","false"
"76",76,75,"Side-Effecting Expression","Non-confusing","void main() {
   int V1 = 0;

   V1 = 0;

   if (V1) {
      printf(""true\n"");
   } else {
      printf(""false\n"");
   }
}","false"
"77",77,78,"Side-Effecting Expression","Confusing","void main() {
   int V1 = 0;
   int V2 = 9;

   while (!(V1 = 3)) {
      V2--;
      V1++;
   }

   printf(""%d %d\n"", V1, V2);
}","3 9"
"78",78,77,"Side-Effecting Expression","Non-confusing","void main() {
   int V1 = 0;
   int V2 = 7;

   V1 = 4;

   while (!4) {
      V2--;
      V1++;
   }

   printf(""%d %d\n"", V1, V2);
}","4 7"
"79",79,80,"Logic as Control Flow","Confusing","void main() {
   int V1 = 1;
   int V2 = 5;

   if (++V1 || ++V2) {
      V1 = V1 * 2;
      V2 = V2 * 2;
   }

   printf(""%d %d\n"", V1, V2);
}","4 10"
"80",80,79,"Logic as Control Flow","Non-confusing","void main() {
   int V1 = 2;
   int V2 = 4;

   if (++V1) {
        V1 = V1 * 2;
        V2 = V2 * 2;
   } else if (++V2) {
        V1 = V1 * 2;
        V2 = V2 * 2;
   }

   printf(""%d %d\n"", V1, V2);
}","6 8"
"81",81,82,"Logic as Control Flow","Confusing","void main() {
   int V1 = 1;
   int V2 = 5;

   V1 == V2 && ++V1 || ++V2;

   printf(""%d %d\n"", V1, V2);
}","1 6"
"82",82,81,"Logic as Control Flow","Non-confusing","void main() {
   int V1 = 2;
   int V2 = 6;

   if (V1 == V2) {
      ++V1;
   } else {
      ++V2;
   }

   printf(""%d %d\n"", V1, V2);
}","2 7"
"83",83,84,"Logic as Control Flow","Confusing","void main() {
   int V1 = 3;
   int V2 = 5;
   int V3 = 0;

   while (V1 != V2 && ++V1) {
      V3++;
   }

   printf(""%d %d %d\n"", V1, V2, V3);
}","5 5 2"
"84",84,83,"Logic as Control Flow","Non-confusing","void main() {
   int V1 = 1;
   int V2 = 11;
   int V3 = 0;

   while (V1 != V2) {
      ++V1;
      if (!V1) break;

      V3++;
   }

   printf(""%d %d %d\n"", V1, V2, V3);
}","11 11 10"
"85",85,86,"Repurposed Variables","Confusing","void main() {
   int V1[5];
   V1[4] = 3;

   while (V1[4]) {
      V1[3 - V1[4]] = V1[4];
      V1[4] = V1[4] - 1;
   }

   printf(""%d %d\n"", V1[1], V1[4]);
}","2 0"
"86",86,85,"Repurposed Variables","Non-confusing","void main() {
   int V1[6];
   int V2 = 5;

   while (V2) {
      V1[5 - V2] = V2;
      V2 = V2 - 1;
   }

   printf(""%d %d\n"", V1[1], V2);
}","4 0"
"87",87,88,"Repurposed Variables","Confusing","void main() {
   int V3 = 0;

   for (int V1 = 0; V1 < 2; V1++) {
      for (int V2 = 0; V1 < 2; V1++) {
        V3 = 4 * V1 + V2;
      }
   }

   printf(""%d\n"", V3);
}","4"
"88",88,87,"Repurposed Variables","Non-confusing","void main() {
   int V3 = 0;

   for (int V1 = 0; V1 < 2; V1++) {
      for (int V2 = 0; V2 < 2; V2++) {
         V3 = 4 * V1 + V2;
         V1 = V2;
      }
   }

   printf(""%d\n"", V3);
}","1"
"89",89,90,"Repurposed Variables","Confusing","void main() {
   int V1;
   for (int V2 = 0; V2 < 2; V2++) {
      V1 = (V2 < 1);
      if (V1) {
         V1 = V2 + 5;
      } else {
         V1 = V1 + 2;
      }
   }
   printf(""%d\n"", V1);
}","2"
"90",90,89,"Repurposed Variables","Non-confusing","void main() {
   int V1;
   for (int V2 = 0; V2 < 2; V2++) {
      int V3 = (V2 < 1);
      if (V3) {
         V1 = V2 + 4;
      } else {
         V1 = V3 + 4;
      }
   }
   printf(""%d\n"", V1);
}","4"
"91",91,92,"Reversed Subscripts","Confusing","void main() {
   char V1 = 2[""qwert""];

   printf(""%c\n"", V1);
}","e"
"92",92,91,"Reversed Subscripts","Non-confusing","void main() {
   char V1 = ""zxcvb""[4];

   printf(""%c\n"", V1);
}","b"
"93",93,94,"Reversed Subscripts","Confusing","void main() {
   char V1 = 3;
   char V2 = V1[""zxcvb""];

   printf(""%c\n"", V2);
}","v"
"94",94,93,"Reversed Subscripts","Non-confusing","void main() {
   char V1 = 2;
   char V2 = ""asdfg""[V1];

   printf(""%c\n"", V2);
}","d"
"95",95,96,"Reversed Subscripts","Confusing","void main() {
   char V1 = 4;
   char* V2 = ""qazwsx"";
   char V3 = V1[V2];

   printf(""%c\n"", V3);
}","s"
"96",96,95,"Reversed Subscripts","Non-confusing","void main() {
   char V1 = 4;
   char* V2 = ""abcdef"";
   char V3 = V2[V1];

   printf(""%c\n"", V3);
}","e"
"97",97,98,"Dead, Unreachable, Repeated","Confusing","void main() {
   int V1 = 1;

   V1 = 3;
   V1 = 2;

   printf(""%d\n"", V1);
}","2"
"98",98,97,"Dead, Unreachable, Repeated","Non-confusing","void main() {
  int V1 = 1;

  V1 = 2;

  printf(""%d\n"", V1);
}","2"
"99",99,100,"Dead, Unreachable, Repeated","Confusing","void main() {
   int V1 = 1;

   if (0) {
      V1 = 3;
   }

   printf(""%d\n"", V1);
}","1"
"100",100,99,"Dead, Unreachable, Repeated","Non-confusing","void main() {
   int V1 = 1;

   printf(""%d\n"", V1);
}","1"
"101",101,102,"Dead, Unreachable, Repeated","Confusing","void main() {
   int V1 = 0;

   V1 = V1;

   printf(""%d\n"", V1);
}","0"
"102",102,101,"Dead, Unreachable, Repeated","Non-confusing","void main() {
   int V1 = 0;

   printf(""%d\n"", V1);
}","0"
"103",103,104,"Change of Literal Encoding","Confusing","void main() {
   char V1 = 104;
   printf(""%c\n"", V1);
}","h"
"104",104,103,"Change of Literal Encoding","Non-confusing","void main() {
   char V1 = 'g';

   printf(""%c\n"", V1);
}","g"
"105",105,106,"Change of Literal Encoding","Confusing","void main() {
   int V1 = 013;

   printf(""%d\n"", V1);
}","11"
"106",106,105,"Change of Literal Encoding","Non-confusing","void main() {
   char V1 = 23;
 
   printf(""%d\n"", V1);
}","23"
"107",107,108,"Change of Literal Encoding","Confusing","void main() {
   int V1 = 208 & 13;

   printf(""%d\n"", V1);
}","0"
"108",108,107,"Change of Literal Encoding","Non-confusing","void main() {
   char V1 = 0xD0 & 0x0D;

   printf(""%d\n"", V1);
}","0"
"109",109,110,"Omitted Curly Braces","Confusing","void main() {
   int V1 = 2;

   if (0) V1++; V1++;

   printf(""%d\n"", V1);
}","3"
"110",110,109,"Omitted Curly Braces","Non-confusing","void main() {
   int V1 = 2;

   if (0) { V1++; } V1++;

   printf(""%d\n"", V1);
}","3"
"111",111,112,"Omitted Curly Braces","Confusing","void main() {
   int V1 = 4;

   int V2 = 0;
   while (V2 < 3) V2++; V1++;

   printf(""%d %d\n"", V1, V2);
}","5 3"
"112",112,111,"Omitted Curly Braces","Non-confusing","void main() {
   int V1 = 7;

   int V2 = 1;
   while (V2 < 3) { V2++; } V1++;
 
   printf(""%d %d\n"", V1, V2);
}","8 3"
"113",113,114,"Omitted Curly Braces","Confusing","void main() {
   int V1 = 3;

   for (int V2 = 0; V2 < 3; V2++) V1++; V1++;

   printf(""%d\n"", V1);
}","7"
"114",114,113,"Omitted Curly Braces","Non-confusing","void main() {
   int V1 = 4;

   for (int V2 = 0; V2 < 3; V2++) { V1++; } V1++;

   printf(""%d\n"", V1);
}","8"
"115",115,116,"Type Conversion","Confusing","void main() {
   float V1 = 1.99;

   int V2 = V1;
 
   printf(""%d\n"", V2);
}","1"
"116",116,115,"Type Conversion","Non-confusing","#include &lt;math.h&gt;
void main() {
   float V1 = 2.87;

   int V2 = trunc(V1);

   printf(""%d\n"", V2);
}","2"
"117",117,118,"Type Conversion","Confusing","void main() {
   int V1 = -1;

   unsigned int V2 = V1;

   int V3;
   if (V2 > 0) {
      V3 = 4;
   } else {
      V3 = 5;
   }

   printf(""%d\n"", V3);
}","4"
"118",118,117,"Type Conversion","Non-confusing","#include  &lt;limits.h&gt;
void main() {
   int V1 = -1;

   unsigned int V2;
   if (V1 >= 0) {
      V2 = V1;
   } else {
      V2 = UINT_MAX + (V1 + 1);
   }

   int V3;
   if (V2 >= 0) {
      V3 = 4;
   } else {
      V3 = 5;
   }  

   printf(""%d\n"", V3);
}","4"
"119",119,120,"Type Conversion","Confusing","void main() {
   int V1 = 261;

   char V2 = V1;

   printf(""%d\n"", V2);
}","5"
"120",120,119,"Type Conversion","Non-confusing","void main() {
   int V1 = 288;

   char V2 = V1 % 256;

   printf(""%d\n"", V2);
}","32"
"121",121,122,"Indentation","Confusing","void main() {
   int V1 = 0;
   int V2 = 2;

   if (V1) {}
      V2 = 4;

   printf(""%d\n"", V2);
}","4"
"122",122,121,"Indentation","Non-confusing","void main() {
   int V1 = 0;
   int V2 = 2;

   if (V1) {}
   V2 = 4;

   printf(""%d\n"", V2);
}","4"
"123",123,124,"Indentation","Confusing","void main() {
   int V1 = 0;
   int V2 = 1;

   if (V1) {
      V2 = 2;
   }
      V2 = V2 * 3;

   printf(""%d\n"", V2);
}","3"
"124",124,123,"Indentation","Non-confusing","void main() {
   int V1 = 0;
   int V2 = 5;

   if (V1) {
      V2 = 2;
   }
   V2 = V2 * 2;

   printf(""%d\n"", V2);
}","10"
"125",125,126,"Indentation","Confusing","void main() {
   int V1 = 2;
   int V2 = 0;
   int V3 = 3;

   if (V1) {
      if (V2) {
         V3 = V3 +2;
   } else {
      V3 = V3 + 4;
   }
   }

   printf(""%d\n"", V3);
}","7"
"126",126,125,"Indentation","Non-confusing","void main() {
  int V1 = 2;
  int V2 = 0;
  int V3 = 5;

  if (V1) {
     if (V2) {
        V3 = V3 + 2;
     } else {
        V3 = V3 + 4;
     }
  }

  printf(""%d\n"", V3);
}","9"
