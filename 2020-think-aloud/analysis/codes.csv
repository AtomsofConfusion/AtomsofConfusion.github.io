subject,start_offset,end_offset,code,text
4168,1013,1037,Comprehension Technique,I like to work backwards
4168,1098,1145,Correct Semantics,we're printing two integers out based on the %d
4168,1309,1361,Correct Semantics,"V1 initially is 2, but then V2 gets set to 3 plus V1"
4168,1375,1391,Math is easy or hard,If I can do math
4168,1995,2065,Previously Seen, I guess maybe it's just having seen something exactly like that befor
4168,2262,2381,Double Check,"you get the same result going backward and forward, then I am pretty, then you can be pretty confident that the answers"
4168,3265,3323,Correct Semantics,"And then after that V1 gets incremented, so that becomes 4"
4168,3741,3793,Double Check,working backward and forward getting the same answer
4168,4119,4127,Amusement,Laughter
4168,4396,4585,Correct Semantics,"The way the preprocessor works kinda makes this weird because it really turns out to be 3 minus 1 times 2. And by the order of operations that's going to make 3 minus 2, which is actually 1"
4168,4592,4643,Non-standard terminology,C is weird that way where when you define constants
4168,4592,4752,Language Value Judgement,"C is weird that way where when you define constants, you have to put the values in parentheses or they're just going to kind of get string substituted into code"
4168,4813,4838,Double Check,let me just check my work
4168,4866,4927,Counterfactual Semantics,"It is not 2 times 2, which would be 4 and it is not 4 it is 1"
4168,5106,5244,Mental Model,"macros evaluate this way, uh, just being kind of substituted in it and the order of operations taking over into bleeding into other areas."
4168,5106,5302,Unsure,"macros evaluate this way, uh, just being kind of substituted in it and the order of operations taking over into bleeding into other areas. I'm, there's, I'm not 100 percent sure that it does that."
4168,5499,5731,Counterfactual Semantics,"Yeah, if I were wrong, I kind of said it out loud, but if the macro did get evaluated first then M1 would be 2 and then V1 would be 2 times 2 and that would and then the program would output 4. But that's what it'd be if I was wrong"
4168,6004,6044,Correct Semantics, the macro does not get evaluated first.
4168,6004,6044,Mental Model, the macro does not get evaluated first.
4168,5907,6044,Remember,"Um, yeah, no as, because I'm not 100 percent on how and if I remember correctly, but I think that the macro does not get evaluated first."
4168,6490,6530,Uncommon pattern, this is a not very commonly used syntax
4168,6491,6530,Snippet Value Judgement,this is a not very commonly used syntax
4168,6563,6707,Correct Semantics,"this parentheses with a comma in the middle syntax varies by programming language, but if I remember correctly, we're just taking the last value"
4168,6544,6707,Remember,"But yeah, I, I th, this parentheses with a comma in the middle syntax varies by programming language, but if I remember correctly, we're just taking the last value"
4168,6709,6755,Inferring Semantics from Reasoning,"I mean it wouldn't make sense otherwise, right"
4168,6857,6955,Correct Semantics,I'm like 80 percent sure this time that we're taking the last value out of this set of parentheses
4168,6857,6955,Unsure,I'm like 80 percent sure this time that we're taking the last value out of this set of parentheses
4168,6975,7038,Not Previously Written,I don't think I've personally written code that looks like that
4168,7295,7355,Unfamiliar Syntax,I'm pretty sure I've never seen this syntax used in practice
4168,7402,7468,Javascript, I know like JavaScript people do and stuff like that all the time
4168,7374,7469,Sure, I'm sure it's valid because I know like JavaScript people do and stuff like that all the time.
4168,7311,7521,Inferring semantics from other language,"I've never seen this syntax used in practice, although I'm sure I'm sure it's valid because I know like JavaScript people do and stuff like that all the time. Uh, I don't, I've never seen that used in C before."
4168,7311,7521,Not Previously Seen,"I've never seen this syntax used in practice, although I'm sure I'm sure it's valid because I know like JavaScript people do and stuff like that all the time. Uh, I don't, I've never seen that used in C before."
4168,7843,7875,Python,python that would become a tuple
4168,7849,8001,Inferring Semantics from Reasoning," that would become a tuple, but in C that doesn't, that wouldn't fly because V1 has been declared as an integer, so it can't possibly be a pair or tuple"
4168,8008,8074,C vs C++," I'm saying pair that's a C++ construct, but you know what I mean."
4168,8161,8210,Not Previously Seen, I've never actually seen anybody write like this
4168,8133,8403,Previously Seen," in Javascript, um, although I've never actually seen anybody write like this, I have seen like the closure compiler take multiple statements and shove them together into a, a, a statement that looks like this where you have multiple statements in one set of parentheses"
4168,8405,8491,Unsure,"but I'm not sure if C does the same thing. So I actually, I actually don't really know"
4168,8137,8491,Javascript,"Javascript, um, although I've never actually seen anybody write like this, I have seen like the closure compiler take multiple statements and shove them together into a, a, a statement that looks like this where you have multiple statements in one set of parentheses, but I'm not sure if C does the same thing. So I actually, I actually don't really know"
4168,8977,9090,Quote,"Okay. So I don't see any weird syntax going. Well not weird. I don't see any, not commonly used syntax this time."
4168,8977,9090,Uncommon pattern,"Okay. So I don't see any weird syntax going. Well not weird. I don't see any, not commonly used syntax this time."
4168,8983,9090,Snippet Value Judgement,"So I don't see any weird syntax going. Well not weird. I don't see any, not commonly used syntax this time."
4168,9344,9399,Surprising comment,"we get to the, if statement, a V1 is not used in there."
4168,9400,9509,Unsure,"So that's just 10, module 3, which is 1, right? Yeah, I think the math is what I'm least confident about here"
4168,9454,9561,Math is easy or hard,"I think the math is what I'm least confident about here. I don't know. It's, it's weird. I can do math now."
4168,9604,9661,Mental Model, I know C doesn't really have true and false but true-ish
4168,9604,9661,Sure, I know C doesn't really have true and false but true-ish
4168,9568,9662,Boolean Value of Integer,"Anyway, 1 does evaluate to true-ish. I know C doesn't really have true and false but true-ish."
4168,8942,9702,Modulus,"Subject:            00:11:15       Okay. So I don't see any weird syntax going. Well not weird. I don't see any, not commonly used syntax this time. Once again just printing out one Integer V1. So we only have to figure out what V1. And that's the only variable here. So yup, it's only mentioned three times. Okay. All right. So this has to be evaluated forward. So Initially V1 equals 0 and then when we get to the, if statement, a V1 is not used in there. So that's just 10, module 3, which is 1, right? Yeah, I think the math is what I'm least confident about here. I don't know. It's, it's weird. I can do math now. Okay. Anyway, 1 does evaluate to true-ish. I know C doesn't really have true and false but true-ish. So V1 does become 4 because 10 is true."
4168,9739,9849,Tautological Reasoning,"And then the else statement, we can skip over that because the of the if statement because that's how it works"
4168,9919,9967,Double Check, if we kind of check that going backwards as you
4168,10700,10745,Non-standard terminology,a compiler would just short short that into 1
4168,11283,11498,Dependency," And then, because that statement doesn't depend on any other value, right? V1 equals 4 is just 4. There's no, there's no referencing any other value, then I, then I can stop there and just say, okay, so it equals 4"
4168,10321,11520,Comprehension Technique,"Um, yeah, once again, I mean this time you with this kind of code, you can't really go back. You can't really work backward because as you're working backward, you don't know which of these statements is going to get executed, but what I can do is kind of like a compiler would I know that you have a constant value right here with the 10 modulo 3, those are constant. So I know a compiler would just short short that into 1 and that I know a compiler would see, oh well there's a constant there so we can just kind of only take the statement inside the if block, um, and just forget about everything else because the compiler would know that the rest of the code is unreachable. And then from there I can work backwards and I can say, okay, well we need a V1 in order to have an output. That's what we're outputting. Okay. What was the last statement that changed V1? And I go up here to V1 equals 4. And Remember The V1 equals 8 has been kind of erased. Right? And then, because that statement doesn't depend on any other value, right? V1 equals 4 is just 4. There's no, there's no referencing any other value, then I, then I can stop there and just say, okay, so it equals 4, uh, on the, on hand."
4168,10321,11520,Compiler Optimizations,"Um, yeah, once again, I mean this time you with this kind of code, you can't really go back. You can't really work backward because as you're working backward, you don't know which of these statements is going to get executed, but what I can do is kind of like a compiler would I know that you have a constant value right here with the 10 modulo 3, those are constant. So I know a compiler would just short short that into 1 and that I know a compiler would see, oh well there's a constant there so we can just kind of only take the statement inside the if block, um, and just forget about everything else because the compiler would know that the rest of the code is unreachable. And then from there I can work backwards and I can say, okay, well we need a V1 in order to have an output. That's what we're outputting. Okay. What was the last statement that changed V1? And I go up here to V1 equals 4. And Remember The V1 equals 8 has been kind of erased. Right? And then, because that statement doesn't depend on any other value, right? V1 equals 4 is just 4. There's no, there's no referencing any other value, then I, then I can stop there and just say, okay, so it equals 4, uh, on the, on hand."
4168,11557,11605,Double Check,Working forward is also gives me the same answer
4168,12252,12470,Amusement,"[Laughter] So yeah. Okay. Um, we're putting one, we're outputting one integer, and uh, what I was just chuckling at was the, if block here where the conditional says V2 equals one with the assignment operator in there."
4168,13246,13552,Double Check,"Now working forward, uh, we have V1 equals 0, V2 equals 2. And then,

Subject:            00:16:59       uh, yeah, V2 does equal 1 and it would go into the if Block V1 equals 3. And then we skip over the else block and at the end V1 does equal 3. And that is the same answer that I got when going backward."
4168,13885,13976,Reasoning by Parts,Like I know how assignment works. I know how if statements work and I know how printf works
4168,14036,14104,Attribution of Confusion, I couldn't quite remember whether macros get evaluated first or not
4168,13977,14201,Remember," So there's nothing in here unlike any other question where I couldn't quite remember whether macros get evaluated first or not, or any other other question where they had that new syntax that I had not seen used in C before"
4168,13978,14325,Unsure,"So there's nothing in here unlike any other question where I couldn't quite remember whether macros get evaluated first or not, or any other other question where they had that new syntax that I had not seen used in C before. Like that kind of thing. If I don't, I'm not. If I'm not sure how that works then I'm not going to be 100 percent positive"
4168,13844,14326,Sure,"Subject:            00:17:45       Yeah. Like I know how assignment works. I know how if statements work and I know how printf works. So there's nothing in here unlike any other question where I couldn't quite remember whether macros get evaluated first or not, or any other other question where they had that new syntax that I had not seen used in C before. Like that kind of thing. If I don't, I'm not. If I'm not sure how that works then I'm not going to be 100 percent positive."
4168,13844,14326,printf,"Subject:            00:17:45       Yeah. Like I know how assignment works. I know how if statements work and I know how printf works. So there's nothing in here unlike any other question where I couldn't quite remember whether macros get evaluated first or not, or any other other question where they had that new syntax that I had not seen used in C before. Like that kind of thing. If I don't, I'm not. If I'm not sure how that works then I'm not going to be 100 percent positive."
4168,14566,14715,Few things," Uh, we're only out putting one variable here and thats V1 and there's only one statement that sets V1. So that means V1 equals 2 plus 3 is in fact 5"
4168,14730,14754,Double Check,And then working forward
4168,15295,15332,Dependency,That is V2 V2's a value depends on V1
4168,15516,15554,Double Check,and working backwards. Yeah that works
4168,17893,17938,Learned by Reading Book,
4168,18553,18746,Value of Different Programming Languages,
4168,18921,19057,PowerShell,
4168,19194,19297,Social Context of Code,
4168,19539,19559,Open Source Software,
4168,20020,20180,Unsure,
4168,20021,20181,Professional vs Academic,
4168,20116,20446,Tooling,
4168,20483,20782,Tooling,
4168,20587,20782,Custom Environments,
4168,20884,21064,Professional vs Academic,
4168,20832,21286,Would RTFM,
4168,21437,21801,Professional vs Academic,
4168,21833,22015,Learned by Reading Book,
4168,22233,22312,Potential Confusing Constructs,
4168,22325,22357,Potential Confusing Constructs,
4168,22441,22503,Emotional Aspect,
4168,21834,22504,Experienced vs Inexperienced,
4168,22730,22787,Action Script,
4168,22812,23035,Pascal,
4168,23205,23356,Value of Different Programming Languages,
4168,23205,23356,Java,
4168,23205,23356,Fortran,
4168,23915,23961,PHP,
4168,24043,24133,Action Script,
4168,24043,24133,Javascript,
4168,24516,24667,Python,
4168,24694,24787,PowerShell,
4168,24993,25032,PowerShell,
4168,25133,25212,PowerShell,
4168,25116,25213,Amusement,
4168,25422,25602,Learned by Programming,
4168,25422,25602,Python,
4168,25712,25968,Social Context of Code,
4168,25712,25968,Javascript,
4168,25712,25968,Learned by Reading Book,
4168,26005,26068,Learned by Reading Book,
4168,26005,26068,PHP,
4168,26105,26165,Python,
4168,26202,26212,Javascript,
4168,26835,27082,Bash,
4168,28259,28301,Comprehension Technique, it's more a reading technique for reading
4168,28175,28350,Writing vs Reading,"Well, I don't think I used, well I kind of use it for writing code too actually, but it's more a reading technique for reading and also checking code and then optimizing code."
4168,28260,28350,Performance Optimization,it's more a reading technique for reading and also checking code and then optimizing code.
4168,28367,28647,Dependency,when I work backwards I know exactly what the result needs to be or at least I know that data type of the result and then I can go back and see which statements affect the result and then I can sort of build a tree to see which statements affect statements that affect the result.
4168,28679,28834,Cognitive Load,"I mean there's a limit to how many I can keep track of at a time, but that's why I like to write smaller functions rather than giant functions that do many"
4168,28749,28902,Maintainability,"that's why I like to write smaller functions rather than giant functions that do many, many things, which is also nice because then more that's reusable."
4168,28917,28980,Maintainability,this allows me to see if I've written something that's useless.
4168,29024,29283,Design Concerns,"That's never gonna have any effect on the result because that's all we care about when we're writing a function where we only really care about its output or its return value or in a case of this, whatever value is printing out, we only care about the output."
4168,29667,30056,Top-down comprehension,"It's useful I think because you get an idea of what the author's intentions were, right? Uh, when I read code I, well there's not a lot of intention to read from this, but if I'm reading a code in the wild, the first thing I try to do is not understand what the code is doing, but understand what the author intended the code to do a just in case those two are not actually the same thing."
4168,30093,30199,Bottom-up comprehension,"And if I'm ever unclear on the intention, uh, I may go ahead and just figure out what the code does anyway"
4168,30201,30316,Communication,"Um, but oftentimes I will, if I have the opportunity to, I'll ask the author, what is the purpose of this function?"
4168,30431,30439,Comment,comments
4168,30335,30544,Top-down writing,"Right now when I'm writing code, the approach that I usually take involves actually writing out comments first, uh, to outline the algorithm and what it's going to do. And then I go back and write the code in."
4168,29667,30932,Author Intention,"It's useful I think because you get an idea of what the author's intentions were, right? Uh, when I read code I, well there's not a lot of intention to read from this, but if I'm reading a code in the wild, the first thing I try to do is not understand what the code is doing, but understand what the author intended the code to do a just in case those two are not actually the same thing.

Subject:            00:42:57       And if I'm ever unclear on the intention, uh, I may go ahead and just figure out what the code does anyway. Um, but oftentimes I will, if I have the opportunity to, I'll ask the author, what is the purpose of this function? What is it doing? Right now when I'm writing code, the approach that I usually take involves actually writing out comments first, uh, to outline the algorithm and what it's going to do. And then I go back and write the code in. Um, when I think about what the code needs to do to achieve the result, uh, I'm not, I'm not really working backwards because, um, I, I kind of work from the start and the end and then work into the middle, right? Like, because when I'm writing code I need to worry about the inputs as well. So I look at the inputs and outputs and I, and I think of the ways I could transform the input."
4168,32141,32369,Experienced vs Inexperienced,"And this is probably one of those examples of junior versus senior code, right? Junior developer would write that because it's clever. Senior code would just put it on, just put it on a separate line because it's easier to read."
4168,31892,32369,Notices Transformation Correctly,"Subject:            00:44:57       This is what I feel should have been easier to read. Then the last one because the increment, because this statement, the plus plus shows on its own line and you can clearly see that that's a separate line. I see. And this is probably one of those examples of junior versus senior code, right? Junior developer would write that because it's clever. Senior code would just put it on, just put it on a separate line because it's easier to read."
4168,31892,32369,Discussion Question,"Subject:            00:44:57       This is what I feel should have been easier to read. Then the last one because the increment, because this statement, the plus plus shows on its own line and you can clearly see that that's a separate line. I see. And this is probably one of those examples of junior versus senior code, right? Junior developer would write that because it's clever. Senior code would just put it on, just put it on a separate line because it's easier to read."
4168,32674,32824,Causes of Confusion," And it's not that it's ambiguous or anything, it just that it takes a couple extra seconds to process and make sure that you did interpret correctly."
4168,32825,33112,Potential Confusing Constructs,"Especially when you mix multiple operators together, then you have to work out which operator comes before which operator. So here you just have one operator, the plus sign and then in a completely separate statement, another operator plus plus there you had plus mixed in with plus plus"
4168,33114,33239,Remember,"So part of it is trying to remember which, which uh, which unary operator is a comes before, um, which one takes effect after"
4168,33114,33350,Causes of Confusion,"So part of it is trying to remember which, which uh, which unary operator is a comes before, um, which one takes effect after. But part of it is also just the mixing of operators into one statement also actually makes it harder to read."
4168,33620,33669,Previously Seen,"Yeah, that's because I've seen that enough times."
4168,33670,33810,Experienced vs Inexperienced,"I know what it is, but I also know that maybe someone with less experience would have more trouble, would have, might get caught up on that."
4168,33823,34012,Causes of Confusion,"This is almost as long as you know, a plus plus means you don't even have to remember whether it comes before or after, whereas there you do need to remember the specifics of that operator."
4168,33823,34013,Remember,"This is almost as long as you know, a plus plus means you don't even have to remember whether it comes before or after, whereas there you do need to remember the specifics of that operator.
"
4168,35233,35295,Contrasting different languages,Especially since not all programming languages will do it like
4168,35304,35398,Alternative Idioms,"if you use a typed constant then it won't, then it won't do that, they will evaluate it first."
4168,35601,35661,Top-down comprehension,"well, the thing I thought of immediately was typed constants"
4168,35670,35697,Unsure, I don't know if C has them
4168,35671,35736,C vs C++,"I don't know if C has them, but in C++ there's the const keyword."
4168,35601,35775,Alternative Idioms,"well, the thing I thought of immediately was typed constants, uh, in, I don't know if C has them, but in C++ there's the const keyword. You say const int M1 equals 3 minus 1."
4168,35880,36303,Apparent Contradiction,"some other programming languages. Oh yeah. And PHP, if you use the define function that defines a constant and in that situation because you're doing a function call, then the arguments do have to get evaluated before the function can be called. And I know that the subtraction would be evaluated before they function call to define the constant. And I know the concept would be defined after the evaluation of subtraction."
4168,35880,36303,PHP,"some other programming languages. Oh yeah. And PHP, if you use the define function that defines a constant and in that situation because you're doing a function call, then the arguments do have to get evaluated before the function can be called. And I know that the subtraction would be evaluated before they function call to define the constant. And I know the concept would be defined after the evaluation of subtraction."
4168,35880,36303,Contrasting different languages,"some other programming languages. Oh yeah. And PHP, if you use the define function that defines a constant and in that situation because you're doing a function call, then the arguments do have to get evaluated before the function can be called. And I know that the subtraction would be evaluated before they function call to define the constant. And I know the concept would be defined after the evaluation of subtraction."
4168,36388,36437,Conflating Macros with Constants,some other languages. Don't really have constants
4168,36439,36475,Python,Python doesn't really have constants
4168,36480,36501,Javascript,neither does Javascri
4168,36439,36658,Alternative Idioms,"Python doesn't really have constants and neither does Javascript, in which case you would, if you wanted to do something like this, you would be making a variable instead and then it just becomes like any other variable"
4168,36388,36788,Contrasting different languages,"some other languages. Don't really have constants. Python doesn't really have constants and neither does Javascript, in which case you would, if you wanted to do something like this, you would be making a variable instead and then it just becomes like any other variable. The subtraction is evaluated first. I'm actually not too sure about Java. It's been a while since I've done constants with Java."
4168,36696,36788,Unsure,I'm actually not too sure about Java. It's been a while since I've done constants with Java.
4168,36696,36788,Java,I'm actually not too sure about Java. It's been a while since I've done constants with Java.
4168,36899,36902,PHP,php
4168,36903,36909,Python,python
4168,37119,37214,Remember,"Yeah. Yeah. I, this, I, this just happens to be one of the quirks that I remember about C++ for"
4168,37307,37889,Learned from Mistake,"from experience really, because I think I ran into this problem once where I was getting the wrong value in a statement that used a that used a macro and I wasn't really sure why. Um, and then what happened was after banging my head for a few hours, um, I figure I found out, I looked up the command with GCC to simply print out the preprocessed a C++. So the output of the preprocessor but without compiling. So just the preprocessor output. And I looked at it and I saw and I looked at the statement, I saw that you macro substituted in and I said, oh, okay, that makes sense now."
4168,37143,38148,Anecdote,"this just happens to be one of the quirks that I remember about C++ for

Interviewer:        00:49:53       you, remember from?

Subject:            00:49:54       from experience really, because I think I ran into this problem once where I was getting the wrong value in a statement that used a that used a macro and I wasn't really sure why. Um, and then what happened was after banging my head for a few hours, um, I figure I found out, I looked up the command with GCC to simply print out the preprocessed a C++. So the output of the preprocessor but without compiling. So just the preprocessor output. And I looked at it and I saw and I looked at the statement, I saw that you macro substituted in and I said, oh, okay, that makes sense now.

Subject:            00:50:41       So I think it's because I spent so much time figuring, figuring out that one problem that I just, it got burned into my head. Like that's how C++ works. But that was also a long time ago. So I wasn't 100 percent confident."
4168,38079,38148,Long ago,But that was also a long time ago. So I wasn't 100 percent confident.
4168,38079,38148,Unsure,But that was also a long time ago. So I wasn't 100 percent confident.
4168,38332,38419,Learned from Mistake," Yeah, from just making that mistake. It wasn't like anybody told me that it does this."
4168,39657,39740,Learned by Internet Search,"I finally came across the stack overflow post that, uh, explained what was going on"
4168,38503,40170,Python," I remember another big mistake that I made in python was that for optional arguments to a function if the argument, well, any value, anytime you specify a value that is the default value that makes the argument optional, uh, which is how it works in many programming languages, but the value for the default or the default values are evaluated in python at the time that the function is defined, not when the function is called.

Subject:            00:51:43       So if you have a mutable object as a default value, say an empty list as a default value. Every time you call that function, it's referencing the same mutable list as an all the previous calls, as long as you haven't specified a value to override the default value. So every time you call that function, if you're just letting it, if you haven't overwritten the default value, yeah, it's just going and using that same list. Even though you might expect it to start over with an empty list, every time you start, every time you call the function, without overriding that default argument. Yeah, that was another huge mistake that I ran into and spent quite a few hours on in python until I finally came across the stack overflow post that, uh, explained what was going on. And then after I read it, I said, oh yeah, that makes. That makes sense.

Interviewer:        00:52:32       Sure. But it's not necessarily what you expect.

Subject:            00:52:33       It's not what I expected. So I get it now, I understand why they did it that way, but it was definitely not what I expected. And this is one of those things as well where you wouldn't expect the 1 to bind to the 2 here, but it does it."
4168,38503,40170,Potential Confusing Constructs," I remember another big mistake that I made in python was that for optional arguments to a function if the argument, well, any value, anytime you specify a value that is the default value that makes the argument optional, uh, which is how it works in many programming languages, but the value for the default or the default values are evaluated in python at the time that the function is defined, not when the function is called.

Subject:            00:51:43       So if you have a mutable object as a default value, say an empty list as a default value. Every time you call that function, it's referencing the same mutable list as an all the previous calls, as long as you haven't specified a value to override the default value. So every time you call that function, if you're just letting it, if you haven't overwritten the default value, yeah, it's just going and using that same list. Even though you might expect it to start over with an empty list, every time you start, every time you call the function, without overriding that default argument. Yeah, that was another huge mistake that I ran into and spent quite a few hours on in python until I finally came across the stack overflow post that, uh, explained what was going on. And then after I read it, I said, oh yeah, that makes. That makes sense.

Interviewer:        00:52:32       Sure. But it's not necessarily what you expect.

Subject:            00:52:33       It's not what I expected. So I get it now, I understand why they did it that way, but it was definitely not what I expected. And this is one of those things as well where you wouldn't expect the 1 to bind to the 2 here, but it does it."
4168,38503,40170,Learned from Mistake," I remember another big mistake that I made in python was that for optional arguments to a function if the argument, well, any value, anytime you specify a value that is the default value that makes the argument optional, uh, which is how it works in many programming languages, but the value for the default or the default values are evaluated in python at the time that the function is defined, not when the function is called.

Subject:            00:51:43       So if you have a mutable object as a default value, say an empty list as a default value. Every time you call that function, it's referencing the same mutable list as an all the previous calls, as long as you haven't specified a value to override the default value. So every time you call that function, if you're just letting it, if you haven't overwritten the default value, yeah, it's just going and using that same list. Even though you might expect it to start over with an empty list, every time you start, every time you call the function, without overriding that default argument. Yeah, that was another huge mistake that I ran into and spent quite a few hours on in python until I finally came across the stack overflow post that, uh, explained what was going on. And then after I read it, I said, oh yeah, that makes. That makes sense.

Interviewer:        00:52:32       Sure. But it's not necessarily what you expect.

Subject:            00:52:33       It's not what I expected. So I get it now, I understand why they did it that way, but it was definitely not what I expected. And this is one of those things as well where you wouldn't expect the 1 to bind to the 2 here, but it does it."
4168,38503,40170,Anecdote," I remember another big mistake that I made in python was that for optional arguments to a function if the argument, well, any value, anytime you specify a value that is the default value that makes the argument optional, uh, which is how it works in many programming languages, but the value for the default or the default values are evaluated in python at the time that the function is defined, not when the function is called.

Subject:            00:51:43       So if you have a mutable object as a default value, say an empty list as a default value. Every time you call that function, it's referencing the same mutable list as an all the previous calls, as long as you haven't specified a value to override the default value. So every time you call that function, if you're just letting it, if you haven't overwritten the default value, yeah, it's just going and using that same list. Even though you might expect it to start over with an empty list, every time you start, every time you call the function, without overriding that default argument. Yeah, that was another huge mistake that I ran into and spent quite a few hours on in python until I finally came across the stack overflow post that, uh, explained what was going on. And then after I read it, I said, oh yeah, that makes. That makes sense.

Interviewer:        00:52:32       Sure. But it's not necessarily what you expect.

Subject:            00:52:33       It's not what I expected. So I get it now, I understand why they did it that way, but it was definitely not what I expected. And this is one of those things as well where you wouldn't expect the 1 to bind to the 2 here, but it does it."
4168,39935,40170,Design Concerns,"It's not what I expected. So I get it now, I understand why they did it that way, but it was definitely not what I expected. And this is one of those things as well where you wouldn't expect the 1 to bind to the 2 here, but it does it."
4168,38504,40170,Language Expectations,"I remember another big mistake that I made in python was that for optional arguments to a function if the argument, well, any value, anytime you specify a value that is the default value that makes the argument optional, uh, which is how it works in many programming languages, but the value for the default or the default values are evaluated in python at the time that the function is defined, not when the function is called.

Subject:            00:51:43       So if you have a mutable object as a default value, say an empty list as a default value. Every time you call that function, it's referencing the same mutable list as an all the previous calls, as long as you haven't specified a value to override the default value. So every time you call that function, if you're just letting it, if you haven't overwritten the default value, yeah, it's just going and using that same list. Even though you might expect it to start over with an empty list, every time you start, every time you call the function, without overriding that default argument. Yeah, that was another huge mistake that I ran into and spent quite a few hours on in python until I finally came across the stack overflow post that, uh, explained what was going on. And then after I read it, I said, oh yeah, that makes. That makes sense.

Interviewer:        00:52:32       Sure. But it's not necessarily what you expect.

Subject:            00:52:33       It's not what I expected. So I get it now, I understand why they did it that way, but it was definitely not what I expected. And this is one of those things as well where you wouldn't expect the 1 to bind to the 2 here, but it does it."
4168,40607,40701,Combined multiple elements,this syntax where you have two statements surrounded by parentheses and separated with a comma
4168,40607,40753,Not Previously Seen,"this syntax where you have two statements surrounded by parentheses and separated with a comma and you say. Yeah, I've never seen that in C before"
4168,40600,40772,Unfamiliar Syntax,"it was this syntax where you have two statements surrounded by parentheses and separated with a comma and you say. Yeah, I've never seen that in C before. Okay. Hands down."
4168,40546,40772,Discussion Question,"Subject:            00:53:17       Yeah, it was this, it was this syntax where you have two statements surrounded by parentheses and separated with a comma and you say. Yeah, I've never seen that in C before. Okay. Hands down."
4168,41179,41264,Social Context of Code,"Well, because as javascript and javascript is known for doing things really strangely"
4168,41179,41385,Javascript,"Well, because as javascript and javascript is known for doing things really strangely, so you don't know how much of it inherited from other languages and how much of it is just Javascript being Javascript."
4168,41179,41385,Unsure,"Well, because as javascript and javascript is known for doing things really strangely, so you don't know how much of it inherited from other languages and how much of it is just Javascript being Javascript."
4168,41266,41385,Inferring semantics from other language,so you don't know how much of it inherited from other languages and how much of it is just Javascript being Javascript.
4168,41585,41627,Snippet Value Judgement,I wouldn't write this myself in javascript
4168,41648,41701,Unsure,"Even in Javascript, I wouldn't be 100 percent on this"
4168,41707,41773,Previously Seen,"I've seen output from the Google's, from Google's Closure compiler"
4168,41707,41773,Learned by Reading Code,"I've seen output from the Google's, from Google's Closure compiler"
4168,41573,41773,Would Have Written it Differently,"Right. Now, I wouldn't write this myself in javascript. So even not. Yeah. Even in Javascript, I wouldn't be 100 percent on this, but I've seen output from the Google's, from Google's Closure compiler"
4168,41859,42408,Javascript,"Closure compiler, and it will take if you have several successive statements and only the value of the last one matters. Closure compiler will sometimes take those statements and smash them together into this little sandwich here and only the value of the last statement gets returned, if you will, and not really function but gets returned out of these parentheses. So I thought, well, okay, it's possible that this is one of those things that javascript inherited instead of just made up. And I thought, well, okay, maybe that's how it works in C."
4168,41859,42408,Correct Semantics,"Closure compiler, and it will take if you have several successive statements and only the value of the last one matters. Closure compiler will sometimes take those statements and smash them together into this little sandwich here and only the value of the last statement gets returned, if you will, and not really function but gets returned out of these parentheses. So I thought, well, okay, it's possible that this is one of those things that javascript inherited instead of just made up. And I thought, well, okay, maybe that's how it works in C."
4168,41859,42408,Inferring semantics from other language,"Closure compiler, and it will take if you have several successive statements and only the value of the last one matters. Closure compiler will sometimes take those statements and smash them together into this little sandwich here and only the value of the last statement gets returned, if you will, and not really function but gets returned out of these parentheses. So I thought, well, okay, it's possible that this is one of those things that javascript inherited instead of just made up. And I thought, well, okay, maybe that's how it works in C."
4168,42491,42528,Unsure,But I obviously I don't actually know
4168,43222,43284,Incorrect Semantics,That also wouldn't have made sense because V2 was of type int.
4168,43126,43284,Counterfactual Semantics," And for a second, someone might read it as V2 equals and then read that as one unit 1 comma 2. That also wouldn't have made sense because V2 was of type int."
4168,43126,43284,Precedence," And for a second, someone might read it as V2 equals and then read that as one unit 1 comma 2. That also wouldn't have made sense because V2 was of type int."
4168,44385,44466,Guessing,"I mean, I don't know. It came. A lot of this came down to just intuitive guessing"
4168,44580,44672,Language Expectations,but I guess I've seen enough C++ to kind of know what the conventions of the language maybe.
4168,44580,44672,Style,but I guess I've seen enough C++ to kind of know what the conventions of the language maybe.
4168,44580,44672,Learned by Reading Code,but I guess I've seen enough C++ to kind of know what the conventions of the language maybe.
4168,44790,44827,Style,But there's a philosophy surrounding.
4168,45724,45777,Non-standard terminology,"  Oh yeah, that's the word I was looking for in line."
4168,45828,46054,Maintainability,"Once again, going back to how I was saying that, you know, I can, this is a way to look for useless code and I do that a lot actually. So I'm used to finding. I'm used to finding code that is unreachable such as the else block"
4168,46185,46425,Apparent Contradiction," And it was also necessary to work backwards, right? Because you know, only one of these statements is going to get executed. So if you're, if I'm working backwards, I need to figure out which, which statement is the one that gets executed."
4168,47060,47142,Dependency,you realize neither of them depends on the value that was assigned to V1 initially
4168,47888,48116,Complex,"Oh yeah. If there were nested if blocks. Um, yeah, there were a nested. If blocks then it might get kind of complex to read things backwards now if there was just more code, but it was, but there were no, there was no branching."
4168,48349,48490,Professional vs Academic," in the real world you don't see too much of, of conditionals that are constant because people usually are smart enough not to code like that"
4168,48689,48766,Top-down comprehension,but this is also another way to try to understand the programmers intentions.
4168,48803,49095,Branch testing," I can add to my mental picture what the code does under certain circumstances and then I can look at what those circumstances are. And then I can ask myself why those circumstances were picked. And it usually has something to do with, uh, the purpose of the overall, of the overall function."
4168,49327,49491,Professional vs Academic,"in practice I don't do that all all that often because most of the time most of the time the blocks are both there and both and both of them get executed sometimes,"
4168,49864,50013,Top-down comprehension,"I think there's a certain point where you don't really see individual lines anymore, but you can kind of see what a group lines are doing altogether."
4168,50812,50927,Counterfactual Semantics," Although actually looking back at it now, it doesn't matter whether V2 was 2 or 1, it would have been true anyway."
4168,51703,51846,Performance Optimization,"I might actually, one of the things I might be able to eliminate as these assignments save a couple instructions and these in the machine code."
4168,52140,52400,Trick Question," Yeah. Almost to a point where I said is there some trick?

Interviewer:        01:04:26       Right, right. Um, yeah. Well, do you think there's a trick?

Subject:            01:04:31       Well, no, but part of, but part of me always thinks this is too easy."
4168,52331,52400,Simple,"Well, no, but part of, but part of me always thinks this is too easy."
4168,53127,53480,Mental Model,"Well I just want to talk about the tree here. Which statements, depend on which statements because you'll notice it's a neat little line. The last line depends on the second to last line which, depends on the third to last line. So it was a neat little line which actually. Well yeah, I don't know, I just thought it was neat how it's aligned like that."
4168,53127,53480,Dependency,"Well I just want to talk about the tree here. Which statements, depend on which statements because you'll notice it's a neat little line. The last line depends on the second to last line which, depends on the third to last line. So it was a neat little line which actually. Well yeah, I don't know, I just thought it was neat how it's aligned like that."
4168,53714,54050,Performance Optimization,"Right. I think it makes it easier to read if you separate this out because you could easily have written, you could have easily skipped the first two lines and just printf 5. Yes. Or I guess if you really wanted to optimize it, you, you don't even have to do the integer conversion, you could just actually have 5 written in the string."
4168,53679,54050,printf,"Subject:            01:05:56       Right. I think it makes it easier to read if you separate this out because you could easily have written, you could have easily skipped the first two lines and just printf 5. Yes. Or I guess if you really wanted to optimize it, you, you don't even have to do the integer conversion, you could just actually have 5 written in the string."
4168,53714,54050,Would Have Written it Differently,"Right. I think it makes it easier to read if you separate this out because you could easily have written, you could have easily skipped the first two lines and just printf 5. Yes. Or I guess if you really wanted to optimize it, you, you don't even have to do the integer conversion, you could just actually have 5 written in the string."
4168,54146,54247,Performance Optimization, If you are really optimizing the heck out of this linear code is easy and because the tree is linear
4168,56817,56990,Learned from Mistake,
3787,704,736,Unsure,V-eye is 6 else V-eye is 3. Huh.
3787,893,937,Not Previously Written,"  I'm, I haven't used this notation anywhere"
3787,1102,1149,Unsure," If I'm correct, these are, this is And and Or,"
3787,1326,1351,Surprising comment,So our variable here is 0
3787,1326,1457,Guessing,"So our variable here is 0. If it's 0 and 1 I'm not really sure what the output of this is, I guess it would still be 3, it'll be 0."
3787,1634,1659,Visual Reference,I guess that's not clear.
3787,2221,2562,If-statements must operate on a variable," I'm not familiar with this notation [if (0 && 1 || 2)] so I didn't know, uh, what. So will the variable will be affected by this or it will just completely skip this and just print out the variable value which initially was assigned here. So yeah, so I'm just sticking to this rather than, you know, the code entering into the if statement."
3787,2221,2562,Unfamiliar Syntax," I'm not familiar with this notation [if (0 && 1 || 2)] so I didn't know, uh, what. So will the variable will be affected by this or it will just completely skip this and just print out the variable value which initially was assigned here. So yeah, so I'm just sticking to this rather than, you know, the code entering into the if statement."
3787,2472,2562,Control Flow Skips Code," I'm just sticking to this rather than, you know, the code entering into the if statement."
3787,2190,2562,Surprising comment,"So right, it was partly because I'm not familiar with this notation [if (0 && 1 || 2)] so I didn't know, uh, what. So will the variable will be affected by this or it will just completely skip this and just print out the variable value which initially was assigned here. So yeah, so I'm just sticking to this rather than, you know, the code entering into the if statement."
3787,3180,3340,Unsure," This is and so V1 equals equals 1. So yeah, this makes sense because it's comparing the variables to 0s and 1s here. But this, I'm not sure what it is actually"
3787,3180,3340,Unfamiliar Syntax," This is and so V1 equals equals 1. So yeah, this makes sense because it's comparing the variables to 0s and 1s here. But this, I'm not sure what it is actually"
3787,4338,4392,Non-standard terminology, if the if-statement doesn't work it'll go to the else
3787,4195,4584,Sure,"Because this makes sense like I showed you in the previous page. So we're just comparing the variables here. Uh, so if the variable is, if the, if the if-statement doesn't work it'll go to the else and uh, because else doesn't take any, a condition into factor. So it just assigns the value to it, which is 5 and we're just printing the value V3, so, yeah. Pretty confident it works. Yeah."
3787,4195,4584,Correct Semantics,"Because this makes sense like I showed you in the previous page. So we're just comparing the variables here. Uh, so if the variable is, if the, if the if-statement doesn't work it'll go to the else and uh, because else doesn't take any, a condition into factor. So it just assigns the value to it, which is 5 and we're just printing the value V3, so, yeah. Pretty confident it works. Yeah."
3787,4905,5078,Incorrect Semantics,"Okay. So V1 is 1 V2 is 2. V1 is less than 2, V2, yes. So we go here. Define. So we define and this as 1 M2 is 2, right. So percentage d, M1 M2. So we just print out 1 and 2."
3787,5244,5453,Incorrect Semantics,"Because, uh, the, if statement. So if condition holds. So it goes inside the if statement where it assigns M1 and M2 as 1 and 2 respectively and we just print them out afterwards without any problems. So yeah."
3787,5756,5925,Correct Semantics,"So here we just have a variable. We take a second variable, add it, add 2 the first variable and store it in the second variable and just print out the value. So yeah, 5"
3787,6237,6247,Unsure,If 0. Hmm.
3787,6402,6456,Surprising comment,"in my opinion, it'll, it'll go inside the if statement"
3787,6376,6726,Incorrect Semantics,"So zero is... So we have, in my opinion, it'll, it'll go inside the if statement because zero is, you know, we're not assigning it to anything. We're just moving forward with XXX. So zero exists, right. So if zero we have, we increment the value of V1 which is, which becomes three exiting that again V1 plus plus would be 4 and we just print out V1 "
3787,6376,6726,Value Exists,"So zero is... So we have, in my opinion, it'll, it'll go inside the if statement because zero is, you know, we're not assigning it to anything. We're just moving forward with XXX. So zero exists, right. So if zero we have, we increment the value of V1 which is, which becomes three exiting that again V1 plus plus would be 4 and we just print out V1 "
3787,6390,6736,Boolean Value of Integer,"So we have, in my opinion, it'll, it'll go inside the if statement because zero is, you know, we're not assigning it to anything. We're just moving forward with XXX. So zero exists, right. So if zero we have, we increment the value of V1 which is, which becomes three exiting that again V1 plus plus would be 4 and we just print out V1 which is 4"
3787,6390,6736,Inferring Semantics from Reasoning,"So we have, in my opinion, it'll, it'll go inside the if statement because zero is, you know, we're not assigning it to anything. We're just moving forward with XXX. So zero exists, right. So if zero we have, we increment the value of V1 which is, which becomes three exiting that again V1 plus plus would be 4 and we just print out V1 which is 4"
3787,6965,7009,Unsure, if statement isn't something which is clear
3787,6965,7009,Snippet Value Judgement, if statement isn't something which is clear
3787,6962,7009,Ambiguous Readability,the if statement isn't something which is clear
3787,7013,7057,Guessing, I'm hoping that the answer would be correct
3787,7014,7057,Surprising comment,I'm hoping that the answer would be correct
3787,7277,7288,Non-standard terminology,hash define
3787,7244,7304,Unsure," I'm not sure if we can write, a hash define in this fashion"
3787,7245,7304,Questioning Program Validity,"I'm not sure if we can write, a hash define in this fashion"
3787,7367,7501,Relying on Correctness of Example,"So every code executes. Right?

Interviewer:        10:02          Yeah

Subject:            10:02          So this, this works. Okay."
3787,7596,7643,Incorrect Semantics,"Three minus one mhmm, int V1, V1 is M1 into two"
3787,7869,7978,Surprising comment,"Um, because, uh, I just remembered every program executes. So this, my thinking of this not working is wrong."
3787,7869,7978,Relying on Correctness of Example,"Um, because, uh, I just remembered every program executes. So this, my thinking of this not working is wrong."
3787,8029,8072,Simple,"Yeah, it's just straightforward after that."
3787,8396,8713,Macro Expansion Can't Contain Space,"So, uh, so the hash define variable with the value. Uh, I'm not certain if the values can be distributed in a long, uh, in a, in a, in a statement sort of a thing because as, as over here it's three minus one. So if it's, if and it's separated by a space, so I'm not sure if hash define takes into account the spaces."
3787,9240,9284,Non-standard terminology,"So the fourth place, we assign It as a three"
3787,9288,9306,Value Exists, while this exists
3787,10218,10222,Unsure,Hmm.
3787,10412,10461,Value Exists,in each case we have a V1 which V1 4 which exists
3787,11401,11480,Value Exists,"so there might be a case where V1, doesn't exist, which I don't think there is."
3787,11810,11912,Amusement,"Int V1 is [laughs] okay. I can just read this carefully. V1, two plus three, printf V1. That's a five."
3787,11949,11978,Trick Question,This is not a trick question?
3787,12228,12268,Arithmetic, so this is a straightforward arithmetic
3787,12225,12382,Simple,"Uh, so this is a straightforward arithmetic. So and we're just printing out the summation of the values, which it's pretty straightforward. It's, it's, yeah."
3787,12939,13010,Visual Reference,I just have a problem with this statement here [points at if-condition]
3787,13549,13557,Non-standard terminology,brackets
3787,13311,13558,Parenthesis,"one thing that strikes me here is, uh, so the, the order in which it'll uh, it'll uh, use the And, and, the Or statements, so would And be considered before Or the order of precedence. So, uh, how would that work for a statement with out brackets?"
3787,13311,13558,Precedence,"one thing that strikes me here is, uh, so the, the order in which it'll uh, it'll uh, use the And, and, the Or statements, so would And be considered before Or the order of precedence. So, uh, how would that work for a statement with out brackets?"
3787,13311,13558,Unsure,"one thing that strikes me here is, uh, so the, the order in which it'll uh, it'll uh, use the And, and, the Or statements, so would And be considered before Or the order of precedence. So, uh, how would that work for a statement with out brackets?"
3787,12891,13589,Discussion Question,"Subject:            24:41          [Snippet 11] I just have a problem with this statement here [points at if-condition]. So, if you could...

Interviewer:        24:46          Um, so can you be a little bit more specific about what part of it, um, because you mentioned before that you've seen if statements before. Um, so, so what about it in particular? Um, is unusual?

Subject:            25:03          Um, uh, so one thing that strikes me here is, uh, so the, the order in which it'll uh, it'll uh, use the And, and, the Or statements, so would And be considered before Or the order of precedence. So, uh, how would that work for a statement with out brackets? So that is one of my concerns."
3787,13672,13824,Apparent Contradiction," If I were to tell you that order, would the rest of it makes sense?

Subject:            25:41          It might, I think. Yeah, you tell me the order."
3787,14627,14784,Unsure," It's confusing because zero and one... what? What does, what's zero and one, what does. How would I, I don't know what it means. Yeah, it's, it's ambiguous."
3787,14627,14784,Quote," It's confusing because zero and one... what? What does, what's zero and one, what does. How would I, I don't know what it means. Yeah, it's, it's ambiguous."
3787,14628,14784,Ambiguous Readability,"It's confusing because zero and one... what? What does, what's zero and one, what does. How would I, I don't know what it means. Yeah, it's, it's ambiguous."
3787,14593,14784,Discussion Question,"Subject:            26:35          It's confusing because zero and one... what? What does, what's zero and one, what does. How would I, I don't know what it means. Yeah, it's, it's ambiguous."
3787,15082,15227,Python,"Like what's your, what's the language you're most familiar with? What programming language?

Subject:            27:15          Uh, python, yeah."
3787,16277,16471,Question about Semantics,"Again, it, it's, it's, How would a program proceed from this because in, in. Okay. So, so we're not checking for anything, we just know that zeros and ones are... if. I mean, I guess some of it."
3787,16946,17326,Alternative Idioms,"True, uh false and and true, or two is true in general.

Interviewer:        29:18          Yeah, sure.

Subject:            29:19          Yeah.

Interviewer:        29:19          Um, so is this the kind of thing that you would expect to see in python? Like does this make sense or does this.

Subject:            29:30          Yeah, ok, I think this is much more clearer. Okay"
3787,17242,17418,Discussion Question,"Subject:            29:30          Yeah, ok, I think this is much more clearer. Okay. So if the statement is false and true would be, it would be a false right? False and true."
3787,17631,17705,Correct Semantics,So it has to be true on both the sides to be a true otherwise it's a false
3787,17895,17989,Visual Reference,"False or true. This is false or true. So this going to be boiled down to this [F || T], right?"
3787,17860,17989,Discussion Question,"Subject:            30:04          False or true. This is false or true. So this going to be boiled down to this [F || T], right?"
3787,17894,18295,Correct Semantics," False or true. This is false or true. So this going to be boiled down to this [F || T], right?

Interviewer:        30:14          Yeah, exactly

Subject:            30:16          Right. So if it's. Hmm, which is, I mean because if it's an if statement, so V1 would be assigned to six, it'll definitely be because it's either false or true, which if it's, you know, it's false and true would be true"
3787,18076,18295,Caught Own Mistake After Prompted,"Right. So if it's. Hmm, which is, I mean because if it's an if statement, so V1 would be assigned to six, it'll definitely be because it's either false or true, which if it's, you know, it's false and true would be true"
3787,19773,19830,Questioning Program Validity,can we write hash-define statements inside the main code?
3787,19730,19830,Discussion Question,"Subject:            32:23          So, uh, can we write hash-define statements inside the main code?"
3787,19953,19979,Uncommon pattern,"eah, that's not too common"
3787,20119,20301,Convention,"what are you used to seeing or what would you have expected here instead?

Subject:            32:58          So hash-define over here

Interviewer:        33:03          At the top?"
3787,20679,20765,Performance Optimization," I know that hash-defines they, they take less time to execute than a normal variable."
3787,20844,20886,Unsure,"Yes. But I'm not certain how that is, but."
3787,20844,20886,Correct for Wrong Reasons,"Yes. But I'm not certain how that is, but."
3787,21151,21219,Previously Seen,"um, I'm certain I've studied it, but I do not remember it right now."
3787,21151,21219,Remember,"um, I'm certain I've studied it, but I do not remember it right now."
3787,22905,22932,Non-standard terminology,"assigns two to M1, one to M"
3787,24332,24377,Similar To,it was similar to something like a while one.
3787,24332,24377,Incorrect Semantics,it was similar to something like a while one.
3787,24332,24377,Inferring Semantics from Reasoning,it was similar to something like a while one.
3787,24456,24768,Incorrect Semantics,"So while keep on. So this is true [pointing at while(1) ], right? For all the cases. So I just assumed that since we have no other variable than one, I mean we're using zero here for the if, and zero is an integer. So it, it is true. I mean zero does exist. Yeah. So it'll just go into the if statement and yeah."
3787,24456,24768,If-statements must operate on a variable,"So while keep on. So this is true [pointing at while(1) ], right? For all the cases. So I just assumed that since we have no other variable than one, I mean we're using zero here for the if, and zero is an integer. So it, it is true. I mean zero does exist. Yeah. So it'll just go into the if statement and yeah."
3787,24456,24768,Boolean Value of Integer,"So while keep on. So this is true [pointing at while(1) ], right? For all the cases. So I just assumed that since we have no other variable than one, I mean we're using zero here for the if, and zero is an integer. So it, it is true. I mean zero does exist. Yeah. So it'll just go into the if statement and yeah."
3787,24456,24768,Value Exists,"So while keep on. So this is true [pointing at while(1) ], right? For all the cases. So I just assumed that since we have no other variable than one, I mean we're using zero here for the if, and zero is an integer. So it, it is true. I mean zero does exist. Yeah. So it'll just go into the if statement and yeah."
3787,24456,24768,Mental Model,"So while keep on. So this is true [pointing at while(1) ], right? For all the cases. So I just assumed that since we have no other variable than one, I mean we're using zero here for the if, and zero is an integer. So it, it is true. I mean zero does exist. Yeah. So it'll just go into the if statement and yeah."
3787,25620,25656,Boolean Value of Integer,"Yeah, but not one would be a zero so"
3787,25620,25656,Correct Semantics,"Yeah, but not one would be a zero so"
3787,25158,25657,Apparent Contradiction,"So, um, this, this is like a very common idiom [pointing to while(1)], you see that all the time, while one, um, and so in your head if you wanted to do the opposite of that, I mean like I understand logically where you're coming from, but I'm trying to think.

Subject:            38:47          Yeah. So it'll be at a, I guess a not here.

Interviewer:        38:51          Oh, that makes sense. Yeah. Okay. Yeah. Not One.

Subject:            38:55          Yeah, but not one would be a zero so."
3787,26060,26335,Caught Own Mistake After Prompted," I suppose so, I don't think. No. No. Okay. So um just run through it one more time. V1 is two if false. Okay. I see that it changes it. Okay. So if it won't go inside the false statement, so it'll be. It'll just increment it by one. So it'd be four minus one, which is three"
3787,26703,26820,Question about Semantics,"I have a question here. So would it, would the preprocessing compute? This is two or would it be kept us three minus "
3787,26702,26824,Unsure," I have a question here. So would it, would the preprocessing compute? This is two or would it be kept us three minus one?"
3787,26668,26824,Discussion Question,"Subject:            40:36          I have a question here. So would it, would the preprocessing compute? This is two or would it be kept us three minus one?"
3787,27259,27365,Learned from Mistake, because that in C I have encountered certain places where having a space generally messed up my execution
3787,27410,27456,Remember,I don't remember seeing spaces in hash-defines
3787,27260,27460,Not Previously Seen,"because that in C I have encountered certain places where having a space generally messed up my execution. So, and I, I haven't, uh, maybe I have but I don't remember seeing spaces in hash-defines. So"
3787,27846,27951,Apparent Contradiction,"So that was something which was weird because again, that shouldn't matter in C, C plus plus, but it did."
3787,27622,27951,printf,"New Speaker:        41:46          So I'm so, so the Linux compiler GCC. Uh, so I think there was a, so the printf statements would, wouldn't run because I had a space involved, a space or a tab involved. Interesting. Yeah. So that was something which was weird because again, that shouldn't matter in C, C plus plus, but it did."
3787,27655,29075,Anecdote,"  So I'm so, so the Linux compiler GCC. Uh, so I think there was a, so the printf statements would, wouldn't run because I had a space involved, a space or a tab involved. Interesting. Yeah. So that was something which was weird because again, that shouldn't matter in C, C plus plus, but it did.

Interviewer:        42:18          like in, in the string part or in the. You, do you remember like where the space or the tab was? Like for example, could you write it? And no worries if you can't remember.

Subject:            42:31          I don't remember it though. It's a, it's a, it's a sort of hint that it was C. [Writing printf(""yolo"", ""lola"", ""rn"") ] How did it go? Okay. So it was, it was something here and so let's, we're printing out multiple in one statement, we're printing multiple, uh, uh, uh, uh

Interviewer:        43:01          Values

Subject:            43:02          Yeah. Printing multiple things here. So this would, guess it was this which created problems. Okay. So you're trying to. Yeah,

Interviewer:        43:17          you're trying to print out a tab.

Subject:            43:18          No, no, not a tab. But uh, so there's something here. So there's, as you know, those data is something else. And uh, yeah. So, so the space here I think was something which one of our professors pointed out that that you just remove the space and it'll work, and which it did. Which was funny."
3787,30525,30962,Caught Own Mistake Before Prompted,"Um, because of, because we're using and one here and as you said, M1 hash-defines. So the preprocessor just changes the value of the, the define, hash-define variable into the variable itself. So that's how I like. So it struck me whether it, it, it could be three minus one times two, or it could be just three minus one or it could be just this being evaluated. Which is two into two. Okay. Yeah. So I was not sure which one would this"
3787,31079,31128,Incorrect Semantics," Um three minutes one, it would not. It does not."
3787,31164,31328,Caught Own Mistake Before Prompted," Or hold on. Or could it or hm three minus one into two. This is the correct notation. Right? So this is what it does. So it would be three minus two, which is one."
3787,31469,31538,Correct Semantics,So I guess the output is one then because there are no brackets here.
3787,31469,31538,Parenthesis,So I guess the output is one then because there are no brackets here.
3787,31734,31781,Parenthesis,"So yeah, the bracket doesn't come into picture."
3787,32351,32395,Value Exists,So the while would just be while V1 4 exists
3787,32312,32499,Amusement,"So yeah. So the while loop here would. So the while would just be while V1 4 exists. So that's what's happening, right? Because it's neither zero. Oh, okay. Okay. Now I see. Huh. [Laughs]"
3787,32312,32499,Caught Own Mistake Before Prompted,"So yeah. So the while loop here would. So the while would just be while V1 4 exists. So that's what's happening, right? Because it's neither zero. Oh, okay. Okay. Now I see. Huh. [Laughs]"
3787,32264,32499,Discussion Question,"Subject             47:29          [Snippet 85] So yeah. So the while loop here would. So the while would just be while V1 4 exists. So that's what's happening, right? Because it's neither zero. Oh, okay. Okay. Now I see. Huh. [Laughs]"
3787,32704,33173,Correct Semantics,"V1 of four is assigned to V... Okay. So this is two now the next one, it would be V1 of three minus two, which is the V1 of four which is two, so V1 of 2 would be two, and V1 of V1 of four is one, the next one. The next one is V1 of 3 minus one, which is two, V1 of 4 which is one, so V1 of 2 is one and v1 of 4 is zero. So it'll terminate after that. So V1 is zero and uh V1 4 is zero. And V1 of one is, where is that, two. So I guess two and zero would be the output."
4642,569,606,Simple,"Uh, these are pretty straight forward"
4642,545,1214,Code Review,"[Snippet 79] All right. Uh, these are pretty straight forward. Um, I think my first thing in the if is that the order evaluation here, um, we know it's short circuited. So in the If we know that V1 is incremented plus plus V2 never executed, which can be deliberate or not. So if I would read this code like in code review, I would directly questioned the author, like it's this intentional or not because that is just a little subtlety, right? So we can say V1 at that point, it's now incremented to 2 to V-n equals V1 equals V1 times 2 so it becomes 4 and then V2 is three times to trees and nine so the output would be treat. Come on nine and end time is 1:07 right?"
4642,545,1214,Author Intention,"[Snippet 79] All right. Uh, these are pretty straight forward. Um, I think my first thing in the if is that the order evaluation here, um, we know it's short circuited. So in the If we know that V1 is incremented plus plus V2 never executed, which can be deliberate or not. So if I would read this code like in code review, I would directly questioned the author, like it's this intentional or not because that is just a little subtlety, right? So we can say V1 at that point, it's now incremented to 2 to V-n equals V1 equals V1 times 2 so it becomes 4 and then V2 is three times to trees and nine so the output would be treat. Come on nine and end time is 1:07 right?"
4642,545,1214,Short-circuiting,"[Snippet 79] All right. Uh, these are pretty straight forward. Um, I think my first thing in the if is that the order evaluation here, um, we know it's short circuited. So in the If we know that V1 is incremented plus plus V2 never executed, which can be deliberate or not. So if I would read this code like in code review, I would directly questioned the author, like it's this intentional or not because that is just a little subtlety, right? So we can say V1 at that point, it's now incremented to 2 to V-n equals V1 equals V1 times 2 so it becomes 4 and then V2 is three times to trees and nine so the output would be treat. Come on nine and end time is 1:07 right?"
4642,545,1214,Evaluation Order,"[Snippet 79] All right. Uh, these are pretty straight forward. Um, I think my first thing in the if is that the order evaluation here, um, we know it's short circuited. So in the If we know that V1 is incremented plus plus V2 never executed, which can be deliberate or not. So if I would read this code like in code review, I would directly questioned the author, like it's this intentional or not because that is just a little subtlety, right? So we can say V1 at that point, it's now incremented to 2 to V-n equals V1 equals V1 times 2 so it becomes 4 and then V2 is three times to trees and nine so the output would be treat. Come on nine and end time is 1:07 right?"
4642,1675,1700,Overconfident,I'm always overconfident.
4642,2051,2233,Surprising comment,"And even that I would say even like if I'm normally make like little trivial mistakes, there following code. I say like, Oh, any mistake there would just be, because I'm being sloppy"
4642,1882,2365,Simple,"because this code is fairly like you can still track it in your human mind so to speak. So tracking like the V1, V2. It's like very unlikely that I made a mistake here. And even that I would say even like if I'm normally make like little trivial mistakes, there following code. I say like, Oh, any mistake there would just be, because I'm being sloppy, but still as a human to feel very confident, like I can 100% track what this code does, it's not a complicat... Complex algorithm."
4642,1882,2365,Sure,"because this code is fairly like you can still track it in your human mind so to speak. So tracking like the V1, V2. It's like very unlikely that I made a mistake here. And even that I would say even like if I'm normally make like little trivial mistakes, there following code. I say like, Oh, any mistake there would just be, because I'm being sloppy, but still as a human to feel very confident, like I can 100% track what this code does, it's not a complicat... Complex algorithm."
4642,1882,2365,Cognitive Load,"because this code is fairly like you can still track it in your human mind so to speak. So tracking like the V1, V2. It's like very unlikely that I made a mistake here. And even that I would say even like if I'm normally make like little trivial mistakes, there following code. I say like, Oh, any mistake there would just be, because I'm being sloppy, but still as a human to feel very confident, like I can 100% track what this code does, it's not a complicat... Complex algorithm."
4642,2725,3097,Potential Confusing Constructs,"so the moment it gets too complicated, let's say you have recursion and stuff like that. So then you only way to really track it is that you exhaust the [inaudible] right after each step by step. If it's finite and off, you'd get mentally just run the code, but then you need like secondary assistance. Like either you write it down in a document or you handwrite it down."
4642,2688,3272,Causes of Confusion,"The alternative to that would be so, so the moment it gets too complicated, let's say you have recursion and stuff like that. So then you only way to really track it is that you exhaust the [inaudible] right after each step by step. If it's finite and off, you'd get mentally just run the code, but then you need like secondary assistance. Like either you write it down in a document or you handwrite it down. But like if you have two variables and it's such a simple scope. Yeah, you can basically just track that by have, you know, but, and keep track of two variables, that's easy."
4642,3559,3746,Unsure,"There's an implicit implicit conversion. And, um, well I don't feel super confident about that, but I think all implicit conversions are rounding conversions, so it's not the truncation. "
4642,3559,3746,Incorrect Semantics,"There's an implicit implicit conversion. And, um, well I don't feel super confident about that, but I think all implicit conversions are rounding conversions, so it's not the truncation. "
4642,3862,3989,Snippet Value Judgement,"But you know what this is like language lawyerism like, is an integer always rounded with an implicit conversion [sucks teeth]."
4642,4074,4440,Alternative Idioms,"This is one of the things like as an afterthought that if I would read this in a code review, I would look, I would almost go like, I know the language specifies x, Y or Z, right? Either it's like a ceil or floor or it's a rounded. I would almost ask the programmer, can you just use like either a round or a floor or a ceil function to explicitly state your intent?"
4642,4074,4440,Would Have Written it Differently,"This is one of the things like as an afterthought that if I would read this in a code review, I would look, I would almost go like, I know the language specifies x, Y or Z, right? Either it's like a ceil or floor or it's a rounded. I would almost ask the programmer, can you just use like either a round or a floor or a ceil function to explicitly state your intent?"
4642,4074,4440,Code Review,"This is one of the things like as an afterthought that if I would read this in a code review, I would look, I would almost go like, I know the language specifies x, Y or Z, right? Either it's like a ceil or floor or it's a rounded. I would almost ask the programmer, can you just use like either a round or a floor or a ceil function to explicitly state your intent?"
4642,4528,4772,Author Intention,"Because now it's a constant that I can officially see the moment it's an input or an output, it becomes kind of like fuzzy what you're actual intent is because I lose the, I, I lose the truncation of float floating point value to integer value."
4642,4773,4963,Ambiguous Readability,"Yeah. So yeah, again, this is more like a readability kind of thing then, because now it's clear what your intention is versus, oh we accidentally got rounded up and you intended to do this."
4642,5164,5268,Unsure,"Oh, because it is one of those things that I'm really bad at, these things that I never use in practice."
4642,5164,5268,Uncommon pattern,"Oh, because it is one of those things that I'm really bad at, these things that I never use in practice."
4642,5164,5714,Would RTFM,"Oh, because it is one of those things that I'm really bad at, these things that I never use in practice. So if you would say like, are you willing to bet $100,000 on the fact that implicit conversions from floating point to integer are always rounded? I would say like, I really think so. But it's something that without reading the language rules, just to be certain, like the previous sample, I can say, oh, if I bet $100,000 on it, I'd go like I can do that right now. And here it's like I would need to go into the language lawyer stuff for that."
4642,5164,5714,Apparent Contradiction,"Oh, because it is one of those things that I'm really bad at, these things that I never use in practice. So if you would say like, are you willing to bet $100,000 on the fact that implicit conversions from floating point to integer are always rounded? I would say like, I really think so. But it's something that without reading the language rules, just to be certain, like the previous sample, I can say, oh, if I bet $100,000 on it, I'd go like I can do that right now. And here it's like I would need to go into the language lawyer stuff for that."
4642,5810,5929,Would RTFM,"So that's where I leave a little bit of, it might be imprecise, don't take my word for it, but read the language rules."
4642,6048,6356,Code Review,"[Snippet 109] Void main, int V1 is 2. If zero, V1 plus plus. All righty, so somebody uses a constant expression and a V1 plus plus. So yeah, the first thing would be is that if I would be reviewing this code, I would say don't be silly. Why are you being silly? But that's just the readability kind of thing."
4642,6048,6356,Snippet Value Judgement,"[Snippet 109] Void main, int V1 is 2. If zero, V1 plus plus. All righty, so somebody uses a constant expression and a V1 plus plus. So yeah, the first thing would be is that if I would be reviewing this code, I would say don't be silly. Why are you being silly? But that's just the readability kind of thing."
4642,6357,6440,Side-effect,"So the other thing is, is that um, this is guaranteed to not have any side effects."
4642,6357,6660,Compiler Optimizations,"So the other thing is, is that um, this is guaranteed to not have any side effects. So, um, anything inside an if the Then clause or whatever you call it, uh yeah, that first V1 plus plus, is totally dead code and more, obviously the compiler will totally eliminate that entirely from the whole program."
4642,6963,7084,Compiler Optimizations,"I'm 100% confident that yes, this if null, will never have any side effects. Compilers will just elide it, and that's it."
4642,6876,7162,Side-effect,"Because this is, this is almost self evident. There's, there's like, I mean it's very, I'm 100% confident that yes, this if null, will never have any side effects. Compilers will just elide it, and that's it. And then V1 is 2, plus plus, output. Oh, three, sloppy. Again. I said, yeah, "
4642,6876,7162,Incorrect Semantics,"Because this is, this is almost self evident. There's, there's like, I mean it's very, I'm 100% confident that yes, this if null, will never have any side effects. Compilers will just elide it, and that's it. And then V1 is 2, plus plus, output. Oh, three, sloppy. Again. I said, yeah, "
4642,6876,7162,Caught Own Mistake Before Prompted,"Because this is, this is almost self evident. There's, there's like, I mean it's very, I'm 100% confident that yes, this if null, will never have any side effects. Compilers will just elide it, and that's it. And then V1 is 2, plus plus, output. Oh, three, sloppy. Again. I said, yeah, "
4642,6876,7162,Sure,"Because this is, this is almost self evident. There's, there's like, I mean it's very, I'm 100% confident that yes, this if null, will never have any side effects. Compilers will just elide it, and that's it. And then V1 is 2, plus plus, output. Oh, three, sloppy. Again. I said, yeah, "
4642,7851,8292,Causes of Confusion,"Otherwise, then this is like, if null, it might be really weird way maybe to get like unused variable suppression, which you could do maybe with just like parenthesis for like, you know, you would never use the variable, but you'd want to keep it in the code for reasons. There's a couple of weird maybe reasons why you would ever do that, but very rarely. So if you do that then, um, yeah, you're going to confuse anybody who reads the code"
4642,8294,8440,Amusement,"So, that's, that's my first question if I have a review like this and I would go, I say like, why the hell are you doing that [yelling, laughing]?"
4642,8294,8440,Code Review,"So, that's, that's my first question if I have a review like this and I would go, I say like, why the hell are you doing that [yelling, laughing]?"
4642,8441,8518,Comment,So at minimum there should be a comment if there's any ulterior motive for it
4642,7366,8589,Development Behavior,"So the silly part is that if false condition, right? So you have a constant false condition. Um, if you read that directly in code, there must be some ulterior motive to do that because the, there's valid reasons where you might sometimes want to do this. Instead if you have like special macro evaluation now you want to have like conditional, i don't know, asserts or stuff like that. So if you go through pre-processor, then eventually the whole pre-processed code might have this. Otherwise, then this is like, if null, it might be really weird way maybe to get like unused variable suppression, which you could do maybe with just like parenthesis for like, you know, you would never use the variable, but you'd want to keep it in the code for reasons. There's a couple of weird maybe reasons why you would ever do that, but very rarely. So if you do that then, um, yeah, you're going to confuse anybody who reads the code. So, that's, that's my first question if I have a review like this and I would go, I say like, why the hell are you doing that [yelling, laughing]? So at minimum there should be a comment if there's any ulterior motive for it. And otherwise I say like, I don't know why you do this, you're weird."
4642,7366,8589,Design Concerns,"So the silly part is that if false condition, right? So you have a constant false condition. Um, if you read that directly in code, there must be some ulterior motive to do that because the, there's valid reasons where you might sometimes want to do this. Instead if you have like special macro evaluation now you want to have like conditional, i don't know, asserts or stuff like that. So if you go through pre-processor, then eventually the whole pre-processed code might have this. Otherwise, then this is like, if null, it might be really weird way maybe to get like unused variable suppression, which you could do maybe with just like parenthesis for like, you know, you would never use the variable, but you'd want to keep it in the code for reasons. There's a couple of weird maybe reasons why you would ever do that, but very rarely. So if you do that then, um, yeah, you're going to confuse anybody who reads the code. So, that's, that's my first question if I have a review like this and I would go, I say like, why the hell are you doing that [yelling, laughing]? So at minimum there should be a comment if there's any ulterior motive for it. And otherwise I say like, I don't know why you do this, you're weird."
4642,7366,8589,Author Intention,"So the silly part is that if false condition, right? So you have a constant false condition. Um, if you read that directly in code, there must be some ulterior motive to do that because the, there's valid reasons where you might sometimes want to do this. Instead if you have like special macro evaluation now you want to have like conditional, i don't know, asserts or stuff like that. So if you go through pre-processor, then eventually the whole pre-processed code might have this. Otherwise, then this is like, if null, it might be really weird way maybe to get like unused variable suppression, which you could do maybe with just like parenthesis for like, you know, you would never use the variable, but you'd want to keep it in the code for reasons. There's a couple of weird maybe reasons why you would ever do that, but very rarely. So if you do that then, um, yeah, you're going to confuse anybody who reads the code. So, that's, that's my first question if I have a review like this and I would go, I say like, why the hell are you doing that [yelling, laughing]? So at minimum there should be a comment if there's any ulterior motive for it. And otherwise I say like, I don't know why you do this, you're weird."
4642,7366,8589,Snippet Value Judgement,"So the silly part is that if false condition, right? So you have a constant false condition. Um, if you read that directly in code, there must be some ulterior motive to do that because the, there's valid reasons where you might sometimes want to do this. Instead if you have like special macro evaluation now you want to have like conditional, i don't know, asserts or stuff like that. So if you go through pre-processor, then eventually the whole pre-processed code might have this. Otherwise, then this is like, if null, it might be really weird way maybe to get like unused variable suppression, which you could do maybe with just like parenthesis for like, you know, you would never use the variable, but you'd want to keep it in the code for reasons. There's a couple of weird maybe reasons why you would ever do that, but very rarely. So if you do that then, um, yeah, you're going to confuse anybody who reads the code. So, that's, that's my first question if I have a review like this and I would go, I say like, why the hell are you doing that [yelling, laughing]? So at minimum there should be a comment if there's any ulterior motive for it. And otherwise I say like, I don't know why you do this, you're weird."
4642,8795,9060,Simple,"[Snippet 100] Oh, well, well, well, well this is a very simple right not. I'll just put it down, It's 1:15 and I feel very comfortable about that. And uh, yeah, this is almost like textbook example of the simplest hello world application. So, yeah. Not much to add."
4642,8795,9060,Sure,"[Snippet 100] Oh, well, well, well, well this is a very simple right not. I'll just put it down, It's 1:15 and I feel very comfortable about that. And uh, yeah, this is almost like textbook example of the simplest hello world application. So, yeah. Not much to add."
4642,9307,9419,Tooling,"If V2 equals one is not an equal, so this is an assignment, most compilers nowadays will start warning for that."
4642,9420,9567,Non-standard terminology,"So, uh, yeah, again, in review. My first question would be, is this intentional? Because if it's intentional, you want to double brace it to do so."
4642,9420,9567,Code Review,"So, uh, yeah, again, in review. My first question would be, is this intentional? Because if it's intentional, you want to double brace it to do so."
4642,9420,9567,Author Intention,"So, uh, yeah, again, in review. My first question would be, is this intentional? Because if it's intentional, you want to double brace it to do so."
4642,10437,10706,Multiple Possible Semantics,"And so that's the first thing is that do you want to combine both the assignments and the evaluation of the resulting expression in one if statement? Might sometimes be more reasonable. Right. Um, so that, that's a bike shedding topic. A lot of people disagree on that."
4642,10437,10706,Social Context of Code,"And so that's the first thing is that do you want to combine both the assignments and the evaluation of the resulting expression in one if statement? Might sometimes be more reasonable. Right. Um, so that, that's a bike shedding topic. A lot of people disagree on that."
4642,10706,11083,Author Intention," But the second thing is that if you do it like this, like most compilers will now, totally punish you. If you tried to do it, you would normally do both double, you know, parenthesis. Which gives you readability signal like, Oh, I'm explicitly having the inner expression, some assignment and then evaluate the result of that. So that's what normal compilers allow you to do. "
4642,10707,11275,Tooling,"But the second thing is that if you do it like this, like most compilers will now, totally punish you. If you tried to do it, you would normally do both double, you know, parenthesis. Which gives you readability signal like, Oh, I'm explicitly having the inner expression, some assignment and then evaluate the result of that. So that's what normal compilers allow you to do. They will balk at you if you do this, but in double parentheses. Again in this case it becomes silly because it did. The whole thing can be elided, which the compiler will probably do to this."
4642,10707,11275,Compiler Optimizations,"But the second thing is that if you do it like this, like most compilers will now, totally punish you. If you tried to do it, you would normally do both double, you know, parenthesis. Which gives you readability signal like, Oh, I'm explicitly having the inner expression, some assignment and then evaluate the result of that. So that's what normal compilers allow you to do. They will balk at you if you do this, but in double parentheses. Again in this case it becomes silly because it did. The whole thing can be elided, which the compiler will probably do to this."
4642,11544,11655,Simple," Because it's also like very easy to explain what happens here. It's easy to reason about and explain, so yeah."
4642,11762,11777,Similar To,Another if null
4642,11749,12050,Compiler Optimizations,"[Snippet 99] Another if null, if null V1 is 3. Well, it's also simple da dun [like a an award noise] and uh, yeah. Not much to add here. Again, like in the previous example, the compiler will totally either ignore or elide, whatever happens here. And um just print out int V1 is one and print out one."
4642,11749,12050,Simple,"[Snippet 99] Another if null, if null V1 is 3. Well, it's also simple da dun [like a an award noise] and uh, yeah. Not much to add here. Again, like in the previous example, the compiler will totally either ignore or elide, whatever happens here. And um just print out int V1 is one and print out one."
4642,12157,12494,Simple,"[Snippet 62] Time is 1:20. Alright int V1 comma V2, V1 is 2, V2 is 1. Wow. Yeah. You always think like there should be something suspicious going on here, right? Because like this seems also too simple cause you output this a two one, yeah no sneaky reversal of arguments anywhere. Yeah. Yeah. I think that's uh, that's a scored at 1:20."
4642,12157,12494,Trick Question,"[Snippet 62] Time is 1:20. Alright int V1 comma V2, V1 is 2, V2 is 1. Wow. Yeah. You always think like there should be something suspicious going on here, right? Because like this seems also too simple cause you output this a two one, yeah no sneaky reversal of arguments anywhere. Yeah. Yeah. I think that's uh, that's a scored at 1:20."
4642,12601,12970,Trick Question,"Because again, this is very straight forward, right? It assigns one value to V1, it assigns a value to V2, they get simply passed into the printf. Again, this is a very simple level of of of logic. It almost makes you suspicious, like there's something subtle, right? You're trying to trick me. But yeah, and this is, uh like simple-y and hello world kind of a example."
4642,12601,12970,Simple,"Because again, this is very straight forward, right? It assigns one value to V1, it assigns a value to V2, they get simply passed into the printf. Again, this is a very simple level of of of logic. It almost makes you suspicious, like there's something subtle, right? You're trying to trick me. But yeah, and this is, uh like simple-y and hello world kind of a example."
4642,13143,13560,Snippet Value Judgement,"Int V1 is, oh yeah, that is a tricky, right? This is why macros are bad because this macro expands directly in place, which means there's no parentheses whatsoever. So that expands out to simply [inaudible] 3 minus 1 times 2, which becomes three minus one times two [saying 1*2 quickly], which is two, which is one. So, the output of this one is one. And um, this is a good example of why macros are very, very evil.
"
4642,13143,13560,Correct Semantics,"Int V1 is, oh yeah, that is a tricky, right? This is why macros are bad because this macro expands directly in place, which means there's no parentheses whatsoever. So that expands out to simply [inaudible] 3 minus 1 times 2, which becomes three minus one times two [saying 1*2 quickly], which is two, which is one. So, the output of this one is one. And um, this is a good example of why macros are very, very evil.
"
4642,13143,13560,Trick Question,"Int V1 is, oh yeah, that is a tricky, right? This is why macros are bad because this macro expands directly in place, which means there's no parentheses whatsoever. So that expands out to simply [inaudible] 3 minus 1 times 2, which becomes three minus one times two [saying 1*2 quickly], which is two, which is one. So, the output of this one is one. And um, this is a good example of why macros are very, very evil.
"
4642,13684,14069,Simple,"Uh, again, because like the only tricky part is that naive reader might substitute, this as like 2, but it's again a very simple textbook example of do inline expansion of the macro and then just it reads very simple, straight forward to 3 minus 1 times 2 is 1. So again, this is like, except for the subtlety of the macro and why macros are usually bad. This is very straight forward."
4642,13684,14069,Experienced vs Inexperienced,"Uh, again, because like the only tricky part is that naive reader might substitute, this as like 2, but it's again a very simple textbook example of do inline expansion of the macro and then just it reads very simple, straight forward to 3 minus 1 times 2 is 1. So again, this is like, except for the subtlety of the macro and why macros are usually bad. This is very straight forward."
4642,13684,14069,Trick Question,"Uh, again, because like the only tricky part is that naive reader might substitute, this as like 2, but it's again a very simple textbook example of do inline expansion of the macro and then just it reads very simple, straight forward to 3 minus 1 times 2 is 1. So again, this is like, except for the subtlety of the macro and why macros are usually bad. This is very straight forward."
4642,14217,14796,Parenthesis," I've seen this example. It's almost like, it's almost, it's weird but there are again examples of where this may be desirable but like a good compiler, should almost like balk at this. Like, listen, this is going to have side effects because this, um, it's one of those things where yeah, you want to have either a parenthesis in there or otherwise. So, um, if I would be reading this code, then I would tell somebody like, yeah, I tried to not use macros maybe the other ones is that, make sure that you isolate them in such a way that they are not surprising in their effects."
4642,14217,14796,Side-effect," I've seen this example. It's almost like, it's almost, it's weird but there are again examples of where this may be desirable but like a good compiler, should almost like balk at this. Like, listen, this is going to have side effects because this, um, it's one of those things where yeah, you want to have either a parenthesis in there or otherwise. So, um, if I would be reading this code, then I would tell somebody like, yeah, I tried to not use macros maybe the other ones is that, make sure that you isolate them in such a way that they are not surprising in their effects."
4642,14217,14796,Tooling," I've seen this example. It's almost like, it's almost, it's weird but there are again examples of where this may be desirable but like a good compiler, should almost like balk at this. Like, listen, this is going to have side effects because this, um, it's one of those things where yeah, you want to have either a parenthesis in there or otherwise. So, um, if I would be reading this code, then I would tell somebody like, yeah, I tried to not use macros maybe the other ones is that, make sure that you isolate them in such a way that they are not surprising in their effects."
4642,20926,21292,Causes of Confusion,"So because, like there's an implicit conversion, right? So in the moment you say V2 equals V1 there's an implicit conversion from a float value to V2. And of course it can either, you know for sure it's going to be either one or two. And I'm fairly certain that all the implicit conversions between floating point to integral values are always rounded. But not 100%."
4642,20891,21292,Discussion Question,"Subject:            26:19          So because, like there's an implicit conversion, right? So in the moment you say V2 equals V1 there's an implicit conversion from a float value to V2. And of course it can either, you know for sure it's going to be either one or two. And I'm fairly certain that all the implicit conversions between floating point to integral values are always rounded. But not 100%."
4642,21560,21735,Incorrect Semantics,"Yeah, ok, and the alternatives would be

Subject:            26:58          That it would need to be a ceil. So it would actually truncate the value. So 1.99 would become one."
4642,21560,21735,Counterfactual Semantics,"Yeah, ok, and the alternatives would be

Subject:            26:58          That it would need to be a ceil. So it would actually truncate the value. So 1.99 would become one."
4642,21818,21871,Multiple Possible Semantics," So it's either a floor, it's a ceil or it's a round."
4642,23131,23273,Would RTFM,"Because it can be surprising and subtle and like, oh my God, I have to read the C rules again for this [inaudible], and then I'm like. So yeah"
4642,23510,23841,Recurring Problem,"Right? So that's the thing that you say like, ah, this is one of those rules that you're probably going to get it wrong. So yeah, it would have been fair if I would've been fair if I would've done a three or a four, but yeah that's typically one of those very subtle things that you know you're going to get it wrong at some point."
4642,24186,24568,Causes of Confusion,"No, except I of course was sloppy here. It's one of the funny things as an engineer which is also why you have to reviews. Is that even if you think like that you're obvious, theres still kind of. So you have like logic errors if your program is fundamentally wrong and you fundamentally read it wrong or something like that. Like that wrongness. And you have things like sloppiness"
4642,24186,24568,Code Review,"No, except I of course was sloppy here. It's one of the funny things as an engineer which is also why you have to reviews. Is that even if you think like that you're obvious, theres still kind of. So you have like logic errors if your program is fundamentally wrong and you fundamentally read it wrong or something like that. Like that wrongness. And you have things like sloppiness"
4642,24186,24568,Caught Own Mistake Before Prompted,"No, except I of course was sloppy here. It's one of the funny things as an engineer which is also why you have to reviews. Is that even if you think like that you're obvious, theres still kind of. So you have like logic errors if your program is fundamentally wrong and you fundamentally read it wrong or something like that. Like that wrongness. And you have things like sloppiness"
4642,24676,24844,Incorrect Semantics,"But I initially wrote two, so you feel very confident in your understanding of how it works and how it's supposed to work and then you just make a sloppy two out of it."
4642,24676,24844,Sure,"But I initially wrote two, so you feel very confident in your understanding of how it works and how it's supposed to work and then you just make a sloppy two out of it."
4642,24954,25157,Causes of Confusion,"Yes. But both are very, and this is one of the things that you also like in computer science you always get hammered in, it's like both are equally very present, clear and present dangers in engineering."
4642,25193,25785,Anecdote," Because I guess the impact of either type of mistake. Yes. So sloppy's like so, and this is the funny thing, like in review is that if you review code, people often focus on the subtle hard to understand parts and trying to really understand them all. But if somebody writes a constant equals 2, nobody gives a second thought. Like is your constant really reasonable value. Like somebody puts in K gravity equals eight dot nine ba da da da da, and nobody thinks a second time. Like, my God, you meant 9.8. So that's like, people are sloppy, trivial things. Every [inaudible] engineering too."
4642,25193,25785,Causes of Confusion," Because I guess the impact of either type of mistake. Yes. So sloppy's like so, and this is the funny thing, like in review is that if you review code, people often focus on the subtle hard to understand parts and trying to really understand them all. But if somebody writes a constant equals 2, nobody gives a second thought. Like is your constant really reasonable value. Like somebody puts in K gravity equals eight dot nine ba da da da da, and nobody thinks a second time. Like, my God, you meant 9.8. So that's like, people are sloppy, trivial things. Every [inaudible] engineering too."
4642,25193,25785,Code Review," Because I guess the impact of either type of mistake. Yes. So sloppy's like so, and this is the funny thing, like in review is that if you review code, people often focus on the subtle hard to understand parts and trying to really understand them all. But if somebody writes a constant equals 2, nobody gives a second thought. Like is your constant really reasonable value. Like somebody puts in K gravity equals eight dot nine ba da da da da, and nobody thinks a second time. Like, my God, you meant 9.8. So that's like, people are sloppy, trivial things. Every [inaudible] engineering too."
4642,25950,26083,Trick Question,"Oh yeah. This one was like, um, you must be tricking me because this is too simple for words. Like how can you get this wrong? Right."
4642,25950,26083,Sure,"Oh yeah. This one was like, um, you must be tricking me because this is too simple for words. Like how can you get this wrong? Right."
4642,26421,26473,Sure,"Um, nope. I think that's not confused me in any way."
4642,26696,26731,Simple,"Nope, also Pretty straight forward."
4642,26839,26891,Simple,"h, yeah, also pretty straight forward. No questions."
7640,740,826,Questioning Program Validity (correctly),"Uh, main is void. That's a little bit strange to me, but I think that's allowed anyway"
7640,1811,1920,Paranoia,"Uh, I feel like I'm never positive when doing anything in C or c plus plus, but I'm about as close as can be."
7640,1815,2076,Surprising comment,"I feel like I'm never positive when doing anything in C or c plus plus, but I'm about as close as can be.

Interviewer:        01:50          Sure. Do you work with C or C plus plus?

Subject:            01:52          Yeah, yeah, yeah, this is my primary. Yup."
7640,1815,2076,Apparent Contradiction,"I feel like I'm never positive when doing anything in C or c plus plus, but I'm about as close as can be.

Interviewer:        01:50          Sure. Do you work with C or C plus plus?

Subject:            01:52          Yeah, yeah, yeah, this is my primary. Yup."
7640,2375,2468,Learned from Mistake,"I think I've been bitten enough times like, you know, random things you, you look at like, ah"
7640,2375,2468,Paranoia,"I think I've been bitten enough times like, you know, random things you, you look at like, ah"
7640,2743,2785,Code Review,So I also do like readability reviews here
7640,3058,3104,Trick Question,I don't know how tricky you're intending to be
7640,3171,3256,Potential Confusing Constructs,"I felt like, you know, the, the trick here where it's like the increment or something"
7640,3480,3701,Surprising comment," things that I expect to be like, difficult to, to reason about, right? Um, so, uh, or maybe like the right way to phrase it is things that like small syntactic changes would actually cause, like large behavioral changes."
7640,3930,4155,Professional vs Academic,"Is that one in particular, the difference between pre and post increments, something that you've seen in the past?

Subject:            03:48          Uh, it doesn't, so, yeah. Yes. Uh, not like at work per se, like, but, um,"
7640,4331,4418,Would Have Written it Differently,"people tend to avoid it at work because specifically because it is a, like one of those"
7640,4720,4859,Alternative Idioms,"if I saw this, uh, or, or even the post-increment, either one, um, in code I would say like, actually can you move that off to its own line"
7640,4623,5148,Style," Um, you know, I haven't seen it explicitly in our style guide, but, uh, certainly if I saw like if I saw this, uh, or, or even the post-increment, either one, um, in code I would say like, actually can you move that off to its own line? So then it's like, I know that that's changing first or, or after, like whichever one you actually want. Right. Um, so I don't know if thats like explicitly a style guide thing, but, uh, I would certainly like request it in a review and I think people would, um, like would do that. Yeah"
7640,2739,5148,Pre vs Post-increment,"Uh, So I also do like readability reviews here. So I, I sort of, have been trained in some sense to look for particular things, um, that, that are like wrong or whatever. And, uh, I, I didn't have any of those red flags go off. Um, I, I don't know. I, I don't totally know exactly what you're aiming to do here. Uh, so I don't know how tricky you're intending to be, but, um, I didn't see anything that was like, like super tricky. I felt like, you know, the, the trick here where it's like the increment or something. So, uh, yeah, I felt like I caught everything in some sense. Um,

Interviewer:        03:05          Sure, well can you say a little bit more about the trick here?

Subject:            03:08          Yeah, I mean like, uh, things that I expect to be like, difficult to, to reason about, right? Um, so, uh, or maybe like the right way to phrase it is things that like small syntactic changes would actually cause, like large behavioral changes. Sure. Um, and so, so one here would be like, is this a pre or post increment? Um, and yeah, that, uh, I don't know. There, there doesn't seem to be, uh, too much here other than that. So, um,

Interviewer:        03:43          Is that one in particular, the difference between pre and post increments, something that you've seen in the past?

Subject:            03:48          Uh, it doesn't, so, yeah. Yes. Uh, not like at work per se, like, but, um,

Subject:            03:59          I've,

Subject:            04:00          yeah, I mean that's something that I think, uh, you see us like ha ha, gotcha. You know, um, but people tend to avoid it at work because specifically because it is a, like one of those [inaudible]

Interviewer:        04:11          Oh, I see, but then when you say people avoid it, is that like a style guide type avoidance or sort of like an implicit?

Subject:            04:21          Um, you know, I haven't seen it explicitly in our style guide, but, uh, certainly if I saw like if I saw this, uh, or, or even the post-increment, either one, um, in code I would say like, actually can you move that off to its own line? So then it's like, I know that that's changing first or, or after, like whichever one you actually want. Right. Um, so I don't know if thats like explicitly a style guide thing, but, uh, I would certainly like request it in a review and I think people would, um, like would do that. Yeah"
7640,5459,5700,Sure,"Uh, so the zero here means that this is actually an octal number, right, so this is really like eight plus three, so 11. Uh, so I believe this is going to print just 11. Um, yeah, I'll call that done. And I'm also pretty positive about that."
7640,5843,5876,Few things,"Uh, there's very little code here"
7640,6320,6420,Snippet Value Judgement,"V1 is a character and I'm initializing it with, uh, the obnoxiously weird backwards like two bracket"
7640,6567,6669,Correct Semantics,"So this is equivalent to the like more standard right like qwert of 2, just a weird way of writing it."
7640,6873,6923,Potential Confusing Constructs,I am actually quite terrible with like the print f
7640,6873,7098,Author Intention,"I am actually quite terrible with like the print f specifiers, but I'm pretty sure that that's not intended to be a trick, that there's just a, um, c is actually like a character instead of, I don't know what else it would be"
7640,7140,7231,Paranoia,"yeah, I'm going to call it done. Uh, I feel like I should be less sure of these things. Um,"
7640,7140,7231,Sure,"yeah, I'm going to call it done. Uh, I feel like I should be less sure of these things. Um,"
7640,7374,7489,Criticism of Study Design,"like does 6 mean I would stake my life on it. Right? [laughter] Like, like how sure do I have to be, to have a six."
7640,7971,8068,Amusement,"I would never stake my life on any of these things [laughter], but I am, I am pretty positive, so"
7640,7971,8068,Paranoia,"I would never stake my life on any of these things [laughter], but I am, I am pretty positive, so"
7640,7971,8068,Sure,"I would never stake my life on any of these things [laughter], but I am, I am pretty positive, so"
7640,8198,8474,Criticism of Study Design,"Uh, I think, um, maybe I was not the right subject for this thing. So like, this is, uh, another one of these like, gotcha patterns, uh, that, um, and in particular I've, uh, I've seen before, right. So I know that this is a, like a weird, backwards way of doing these things."
7640,8511,8648,Trick Question,"So again, I, I feel like for all of these, the answer is like, I'm, I'm pretty confident I've like found all the tricks. Right. Uh, yeah."
7640,8511,8648,Sure,"So again, I, I feel like for all of these, the answer is like, I'm, I'm pretty confident I've like found all the tricks. Right. Uh, yeah."
7640,8900,9163,Amusement,"In a, like, here's a list of like weird, esoteric things you can do in c plus plus. Um, certainly not like that would never pass code review, right, [laughter] but, uh, yeah, in like in the context of, um, like did you know that you can do this sort of thing too?"
7640,8900,9163,Learned by Reading Book,"In a, like, here's a list of like weird, esoteric things you can do in c plus plus. Um, certainly not like that would never pass code review, right, [laughter] but, uh, yeah, in like in the context of, um, like did you know that you can do this sort of thing too?"
7640,8900,9163,Professional vs Academic,"In a, like, here's a list of like weird, esoteric things you can do in c plus plus. Um, certainly not like that would never pass code review, right, [laughter] but, uh, yeah, in like in the context of, um, like did you know that you can do this sort of thing too?"
7640,8900,9163,Code Review,"In a, like, here's a list of like weird, esoteric things you can do in c plus plus. Um, certainly not like that would never pass code review, right, [laughter] but, uh, yeah, in like in the context of, um, like did you know that you can do this sort of thing too?"
7640,8900,9163,Uncommon pattern,"In a, like, here's a list of like weird, esoteric things you can do in c plus plus. Um, certainly not like that would never pass code review, right, [laughter] but, uh, yeah, in like in the context of, um, like did you know that you can do this sort of thing too?"
7640,9592,9860,Correct Semantics,"Great, so, uh, at the end here. Alright, so this is going to evaluate to 2, um, but down here, V1 is going to be three, uh cause that's what the post increment does. Which means that this whole thing is five. So that's five for V2, V1 is three, so it's three and five."
7640,9937,9979,Amusement,still feeling pretty confident [chuckles].
7640,9937,9979,Sure,still feeling pretty confident [chuckles].
7640,10113,10408,Pre vs Post-increment,"Uh, so this is, I mean, it's the same thing as the first sample almost. Um, and yeah, I mean the only difference is that like there's this like it's post-increment instead of pre, right, but I uh, yeah, I guess I don't have a different answer from the why I was confident about the first one. Um"
7640,10113,10408,Notices Transformation Incorrectly,"Uh, so this is, I mean, it's the same thing as the first sample almost. Um, and yeah, I mean the only difference is that like there's this like it's post-increment instead of pre, right, but I uh, yeah, I guess I don't have a different answer from the why I was confident about the first one. Um"
7640,10567,10878,Top-down comprehension,"Okay. Uh. V1 is Zero, V2 is eight, so conditional stuff and then, okay, so just going to print two or four. Uh, and now we just have to work through the math. Um, okay. So V2 is eight. This is going to be five times, uh, minus one, minus one is less than or equal to zero. That's true. So it should be four, uh,"
7640,10978,11025,Math is easy or hard,just cause I can like totally fuck up the math.
7640,11173,11350,Math is easy or hard,"Uh, just cause, I mean I, I'm pretty sure I got the math right, but like, uh,,

Subject:            13:09          those things can, I don't know. I make mistakes on that a lot."
7640,11173,11350,Paranoia,"Uh, just cause, I mean I, I'm pretty sure I got the math right, but like, uh,,

Subject:            13:09          those things can, I don't know. I make mistakes on that a lot."
7640,11457,11610,Top-down comprehension,"Yeah, yeah, I'm not worried like the rest of the logic felt, uh, like yes, I understand that this is going to print one of these two things and um, yeah."
7640,11457,11610,Sure,"Yeah, yeah, I'm not worried like the rest of the logic felt, uh, like yes, I understand that this is going to print one of these two things and um, yeah."
7640,12079,12308,Simple," Uh, so it's very similar to the last one when we did, but uh, there's less math I just have to like is this and I'm just just doing the comparisons. Um, and it's, yeah, it's much easier to to double check that those are correct."
7640,12079,12308,Math is easy or hard," Uh, so it's very similar to the last one when we did, but uh, there's less math I just have to like is this and I'm just just doing the comparisons. Um, and it's, yeah, it's much easier to to double check that those are correct."
7640,12079,12308,Notices Transformation Correctly," Uh, so it's very similar to the last one when we did, but uh, there's less math I just have to like is this and I'm just just doing the comparisons. Um, and it's, yeah, it's much easier to to double check that those are correct."
7640,12456,12597,Uninitialized,"Uh, V1 is Zero V2 is 4, V3 has been not initialized, but in either branch we are going to initialize it so you don't have to worry about that"
7640,12456,12597,Top-down comprehension,"Uh, V1 is Zero V2 is 4, V3 has been not initialized, but in either branch we are going to initialize it so you don't have to worry about that"
7640,12682,12728,Criticism of Study Design,"So, uh, wondering why V2 is even here, but, ok"
7640,12974,13050,Notices Transformation Incorrectly,"Uh, similar to the last one, um, the, the logic is even a little bit simpler"
7640,12974,13469,Uninitialized,"Uh, similar to the last one, um, the, the logic is even a little bit simpler. Uh, right. The conditional branches is pretty simple. Um, and looking at the strange thing here I think is that like V3 is uninitialized to start, but I like I happen to know the rules for what happens in these cases. And um, yeah, I think for most of these it's like, oh, like I, I think I know what's like intended here as like the trick, even I don't know if you're like, intending to be tricky, but, um, yeah. So,"
7640,12974,13469,Trick Question,"Uh, similar to the last one, um, the, the logic is even a little bit simpler. Uh, right. The conditional branches is pretty simple. Um, and looking at the strange thing here I think is that like V3 is uninitialized to start, but I like I happen to know the rules for what happens in these cases. And um, yeah, I think for most of these it's like, oh, like I, I think I know what's like intended here as like the trick, even I don't know if you're like, intending to be tricky, but, um, yeah. So,"
7640,12974,13469,Simple,"Uh, similar to the last one, um, the, the logic is even a little bit simpler. Uh, right. The conditional branches is pretty simple. Um, and looking at the strange thing here I think is that like V3 is uninitialized to start, but I like I happen to know the rules for what happens in these cases. And um, yeah, I think for most of these it's like, oh, like I, I think I know what's like intended here as like the trick, even I don't know if you're like, intending to be tricky, but, um, yeah. So,"
7640,13747,13788,Questioning Program Validity (correctly),"I... I'm not sure this would compile. Um,"
7640,14071,14335,Macro Redefinition,"right here we have like, uh, a redefinition of both M1 and M2 to be different things. Um, and I'm not positive. I, I think that's not well defined. Um, and I think that should be a compiler error, but it could also be like overwrite to use the like the latter one."
7640,13824,14719,Correct Semantics," Okay. So you want my thought process? So my thought, my thought process is, uh, the, right like the preprocessor kicks in first, so I don't actually care about any of the, like, you know, V1 or any of that. I just care about the defines, uh, and right here we have like, uh, a redefinition of both M1 and M2 to be different things. Um, and I'm not positive. I, I think that's not well defined. Um, and I think that should be a compiler error, but it could also be like overwrite to use the like the latter one. I don't even know if like compiler errors, is a possible option here. Uh, but in terms of like what I'm allowed to write down, uh, but if I, I think, I think I would go with like compiler error, or like this is not a well defined program. Uh, and if I had to pick something, otherwise I would, I don't know. Um, yeah, I think, I think this is just not a well-defined program. Uh, uh,"
7640,13824,14719,Unsure," Okay. So you want my thought process? So my thought, my thought process is, uh, the, right like the preprocessor kicks in first, so I don't actually care about any of the, like, you know, V1 or any of that. I just care about the defines, uh, and right here we have like, uh, a redefinition of both M1 and M2 to be different things. Um, and I'm not positive. I, I think that's not well defined. Um, and I think that should be a compiler error, but it could also be like overwrite to use the like the latter one. I don't even know if like compiler errors, is a possible option here. Uh, but in terms of like what I'm allowed to write down, uh, but if I, I think, I think I would go with like compiler error, or like this is not a well defined program. Uh, and if I had to pick something, otherwise I would, I don't know. Um, yeah, I think, I think this is just not a well-defined program. Uh, uh,"
7640,13824,14719,Questioning Program Validity (correctly)," Okay. So you want my thought process? So my thought, my thought process is, uh, the, right like the preprocessor kicks in first, so I don't actually care about any of the, like, you know, V1 or any of that. I just care about the defines, uh, and right here we have like, uh, a redefinition of both M1 and M2 to be different things. Um, and I'm not positive. I, I think that's not well defined. Um, and I think that should be a compiler error, but it could also be like overwrite to use the like the latter one. I don't even know if like compiler errors, is a possible option here. Uh, but in terms of like what I'm allowed to write down, uh, but if I, I think, I think I would go with like compiler error, or like this is not a well defined program. Uh, and if I had to pick something, otherwise I would, I don't know. Um, yeah, I think, I think this is just not a well-defined program. Uh, uh,"
7640,15007,15142,Potential Confusing Constructs,"Uh, yeah, so the, um, so I certainly am like much less confident about what happens in the preprocessor then the rest of the language. "
7640,15007,15142,Unsure,"Uh, yeah, so the, um, so I certainly am like much less confident about what happens in the preprocessor then the rest of the language. "
7640,15533,16381,Unsure,"Sure. Okay. So, um, if hypothetically this were to compile though, what do you think is the most likely thing that would happen?

Subject:            19:50          So I think there are, like, I think either it's going to be one space, two or two space one. Um, and I think that either are reasonable in the sense that like, I think a reasonable behavior is you take the first definition you see and you ignore all future definitions. Um, I think another one is, uh, you overwrite whatever definitions you've seen. Right. And those would give opposite.

Interviewer:        20:20          I see. So,

Subject:            20:20          Uh, yeah, I, um, I had no idea. Okay. Uh, maybe, yeah, I guess my, my confidence in it not compiling is relatively high, but if you're, if you tell me like this compiles, what does it do? I'm like totally unsure."
7640,15533,16381,Inferring Semantics from Reasoning,"Sure. Okay. So, um, if hypothetically this were to compile though, what do you think is the most likely thing that would happen?

Subject:            19:50          So I think there are, like, I think either it's going to be one space, two or two space one. Um, and I think that either are reasonable in the sense that like, I think a reasonable behavior is you take the first definition you see and you ignore all future definitions. Um, I think another one is, uh, you overwrite whatever definitions you've seen. Right. And those would give opposite.

Interviewer:        20:20          I see. So,

Subject:            20:20          Uh, yeah, I, um, I had no idea. Okay. Uh, maybe, yeah, I guess my, my confidence in it not compiling is relatively high, but if you're, if you tell me like this compiles, what does it do? I'm like totally unsure."
7640,15533,16381,Multiple Possible Semantics,"Sure. Okay. So, um, if hypothetically this were to compile though, what do you think is the most likely thing that would happen?

Subject:            19:50          So I think there are, like, I think either it's going to be one space, two or two space one. Um, and I think that either are reasonable in the sense that like, I think a reasonable behavior is you take the first definition you see and you ignore all future definitions. Um, I think another one is, uh, you overwrite whatever definitions you've seen. Right. And those would give opposite.

Interviewer:        20:20          I see. So,

Subject:            20:20          Uh, yeah, I, um, I had no idea. Okay. Uh, maybe, yeah, I guess my, my confidence in it not compiling is relatively high, but if you're, if you tell me like this compiles, what does it do? I'm like totally unsure."
7640,20405,20838,Correct Semantics,"Um, so all of the like v one, v two and the if statement like that's all irrelevant. Uh, right. Because that like after the pre-processor runs that is just an empty if statement with an empty, like empty, true and false branch. Um, so that all disappears. Uh, and the only thing that's relevant is, M1 one is defined to be one, then M2 is defined to be two, then they're both defined to be the opposite. And then we do the print. Um,"
7640,20875,21090,Multiple Possible Semantics,"and the question is like, can I overwrite those, uh, macro definitions? Um, yeah. I mean, I, I think I said this earlier, but like the real question is like, do they, uh, overwrite or do you just take the first one?"
7640,20840,21090,Discussion Question,"Subject:            29:58          and the question is like, can I overwrite those, uh, macro definitions? Um, yeah. I mean, I, I think I said this earlier, but like the real question is like, do they, uh, overwrite or do you just take the first one?"
7640,21215,21270,Inferring Semantics from Reasoning,I feel like overwriting them is the less insane option.
7640,21215,21390,Language Value Judgement,"I feel like overwriting them is the less insane option.

Subject:            30:41          Uh, but, I don't know. It's C. So maybe the more insane option is the right choice."
7640,21180,21394,Quote,"Subject:            30:34          I feel like overwriting them is the less insane option.

Subject:            30:41          Uh, but, I don't know. It's C. So maybe the more insane option is the right choice. Uh,"
7640,21431,21691,Guessing,"Yeah, I'm going to, I'm like, I'm definitely very unsure about this, but, um, I would venture to guess that like overwriting the definitions is, uh, what should happen. Um, which means that the printf would see uh, M1 as 2 cause that comes later and M2 as one."
7640,21431,21691,Unsure,"Yeah, I'm going to, I'm like, I'm definitely very unsure about this, but, um, I would venture to guess that like overwriting the definitions is, uh, what should happen. Um, which means that the printf would see uh, M1 as 2 cause that comes later and M2 as one."
7640,21865,21977,Correct Semantics,"Okay. So yeah, sorry. M1 would be two and one cause like those are over written. Uh, so this should be two, one."
7640,23409,23457,C vs C++,"Okay. Is that, uh, C, or also in c plus plus or?"
8697,1651,1954,Relying on Correctness of Example,"Um, right off the bat it's void main, uh, which is, I feel like I'm back in Java land. So, uh, it should be int, although this is c and c, I believe is totally cool with that. I mean it says a compiled like in the instructions that it compiles, but it's like very weird because it's like the wrong type."
8697,1651,1954,Java,"Um, right off the bat it's void main, uh, which is, I feel like I'm back in Java land. So, uh, it should be int, although this is c and c, I believe is totally cool with that. I mean it says a compiled like in the instructions that it compiles, but it's like very weird because it's like the wrong type."
8697,1651,1954,Contrasting different languages,"Um, right off the bat it's void main, uh, which is, I feel like I'm back in Java land. So, uh, it should be int, although this is c and c, I believe is totally cool with that. I mean it says a compiled like in the instructions that it compiles, but it's like very weird because it's like the wrong type."
8697,1651,1954,Questioning Program Validity (correctly),"Um, right off the bat it's void main, uh, which is, I feel like I'm back in Java land. So, uh, it should be int, although this is c and c, I believe is totally cool with that. I mean it says a compiled like in the instructions that it compiles, but it's like very weird because it's like the wrong type."
8697,2083,2136,Unsure," I wonder if C++ allows that, actually, I don't know."
8697,2083,2136,C vs C++," I wonder if C++ allows that, actually, I don't know."
8697,2220,2311,History Lesson,"you're not actually assigning, though it looks like assigning, it's initializing it to zero"
8697,2382,2450,Math is easy or hard,"10 mod three, uh, which off the top of my head I'm terrible at doing"
8697,1998,2455,Modulus,"Subject:            01:12          But it does actually work for whatever reason, um, I wonder if C++ allows that, actually, I don't know. So then you have a int V1 equals zero, so int is the type, V1 is the name and then you're not actually assigning, though it looks like assigning, it's initializing it to zero, which is the value literal. Um, then you have an if conditional, uh, 10 mod three, uh, which off the top of my head I'm terrible at doing. Uh,"
8697,2607,3011,Modulus,"I mean it's like, obviously it's modulus operator, so it's like a, uh, kind of close to the remainder. Although there are edge cases like negative and stuff like that. But anyway, it's like the remainder of division and basically you can take like any number and restricted it into a certain range using the operator, but so it's going to be some value between zero one or two, uh, based on that. Um, and"
8697,2607,3011,Correct Semantics,"I mean it's like, obviously it's modulus operator, so it's like a, uh, kind of close to the remainder. Although there are edge cases like negative and stuff like that. But anyway, it's like the remainder of division and basically you can take like any number and restricted it into a certain range using the operator, but so it's going to be some value between zero one or two, uh, based on that. Um, and"
8697,3088,3616,Inferring Semantics from Reasoning,"oh, okay. Actually now that I think about it. I don't really care what the value is, I guess cause it's like it's just a conditional, so it's like you can convert it to boolean. Um, so in this case, uh, it does not evenly divide into three is not evenly divided into 10. Uh, so there is a remainder and of non zero value. So it's true. Um, which then means that V1 is then later assigned the value of four. Um, the Else block is not executed. And then printf D, %d of V1, so the printed value, which I guess I write where again?"
8697,3088,3616,Modulus,"oh, okay. Actually now that I think about it. I don't really care what the value is, I guess cause it's like it's just a conditional, so it's like you can convert it to boolean. Um, so in this case, uh, it does not evenly divide into three is not evenly divided into 10. Uh, so there is a remainder and of non zero value. So it's true. Um, which then means that V1 is then later assigned the value of four. Um, the Else block is not executed. And then printf D, %d of V1, so the printed value, which I guess I write where again?"
8697,3088,3616,Correct for Wrong Reasons,"oh, okay. Actually now that I think about it. I don't really care what the value is, I guess cause it's like it's just a conditional, so it's like you can convert it to boolean. Um, so in this case, uh, it does not evenly divide into three is not evenly divided into 10. Uh, so there is a remainder and of non zero value. So it's true. Um, which then means that V1 is then later assigned the value of four. Um, the Else block is not executed. And then printf D, %d of V1, so the printed value, which I guess I write where again?"
8697,3088,3616,Potential Confusing Constructs,"oh, okay. Actually now that I think about it. I don't really care what the value is, I guess cause it's like it's just a conditional, so it's like you can convert it to boolean. Um, so in this case, uh, it does not evenly divide into three is not evenly divided into 10. Uh, so there is a remainder and of non zero value. So it's true. Um, which then means that V1 is then later assigned the value of four. Um, the Else block is not executed. And then printf D, %d of V1, so the printed value, which I guess I write where again?"
8697,3088,3616,Correct Semantics,"oh, okay. Actually now that I think about it. I don't really care what the value is, I guess cause it's like it's just a conditional, so it's like you can convert it to boolean. Um, so in this case, uh, it does not evenly divide into three is not evenly divided into 10. Uh, so there is a remainder and of non zero value. So it's true. Um, which then means that V1 is then later assigned the value of four. Um, the Else block is not executed. And then printf D, %d of V1, so the printed value, which I guess I write where again?"
8697,3699,3950,Amusement,"Okay. Uh, it was for with, I guess do you want the full uh backslash N like that

Interviewer:        03:18          Whichever you're more

Subject:            03:19          Okay [laughs] like both of them are, yeah, it's four or that. Um, all right."
8697,4132,4212,Modulus,"Uh, sure. I, yeah, I mean five, unless I'm like totally wrong about the modulus."
8697,4132,4212,Unsure,"Uh, sure. I, yeah, I mean five, unless I'm like totally wrong about the modulus."
8697,4630,4824,Modulus,"So I did not put a hundred percent confident because I still would like to write out 10 mod three to make sure that it's a non zero value. But other than that, uh, you know, I'm fully confident."
8697,4630,4824,Unsure,"So I did not put a hundred percent confident because I still would like to write out 10 mod three to make sure that it's a non zero value. But other than that, uh, you know, I'm fully confident."
8697,5034,5440,Correct Semantics,"All right. Uh, so it's again void main, um so int V1 equals two plus three, so it's five. Um, and I don't know, do you care about like integer promotions and stuff like that? The fact that it's like these are literals they're both by default integers. So there's no type conversion happening even though if it was defined as a different type it could be. Anyway, uh, then it's just going to print out five."
8697,5034,5440,Counterfactual Semantics,"All right. Uh, so it's again void main, um so int V1 equals two plus three, so it's five. Um, and I don't know, do you care about like integer promotions and stuff like that? The fact that it's like these are literals they're both by default integers. So there's no type conversion happening even though if it was defined as a different type it could be. Anyway, uh, then it's just going to print out five."
8697,5477,5638,Amusement,"And so your confidence?

Subject:            05:03          Oh, yes, yes [chuckles].

Interviewer:        05:05          Okay. So why, why are you six confident?"
8697,5675,5763,Simple,"Because I did not notice anything that, uh, felt ambig... ambiguous to me or surprising."
8697,6191,6398,Remember,"And so if I recall correctly, the operator precedence is such that And and Or are the same. Um, they don't, I don't believe either one of them takes precedence over the other. And so it's just left to right."
8697,6191,6398,Incorrect Semantics,"And so if I recall correctly, the operator precedence is such that And and Or are the same. Um, they don't, I don't believe either one of them takes precedence over the other. And so it's just left to right."
8697,5931,6745,Precedence,"All right. Starting off with v one zero. Um, so then, uh, in the, if conditional you have false and a logical And, but there's the, there's no parentheses and this is like poorly written code cause it's hard to read and it inherently where the Or uh, follows. And so if I recall correctly, the operator precedence is such that And and Or are the same. Um, they don't, I don't believe either one of them takes precedence over the other. And so it's just left to right. And that's, uh, it would be zero And one which is false And true, which is false Or two, which is a truthy value. Thus the conditional is true. And then V1 equals six, then prints out six. So six, 3:10 and I'm going to throw a four on that because I, I, I believe that that's the, the precedence for operators, but I'm not a hundred percent sure."
8697,5931,6745,Parenthesis,"All right. Starting off with v one zero. Um, so then, uh, in the, if conditional you have false and a logical And, but there's the, there's no parentheses and this is like poorly written code cause it's hard to read and it inherently where the Or uh, follows. And so if I recall correctly, the operator precedence is such that And and Or are the same. Um, they don't, I don't believe either one of them takes precedence over the other. And so it's just left to right. And that's, uh, it would be zero And one which is false And true, which is false Or two, which is a truthy value. Thus the conditional is true. And then V1 equals six, then prints out six. So six, 3:10 and I'm going to throw a four on that because I, I, I believe that that's the, the precedence for operators, but I'm not a hundred percent sure."
8697,5931,6745,Ambiguous Readability,"All right. Starting off with v one zero. Um, so then, uh, in the, if conditional you have false and a logical And, but there's the, there's no parentheses and this is like poorly written code cause it's hard to read and it inherently where the Or uh, follows. And so if I recall correctly, the operator precedence is such that And and Or are the same. Um, they don't, I don't believe either one of them takes precedence over the other. And so it's just left to right. And that's, uh, it would be zero And one which is false And true, which is false Or two, which is a truthy value. Thus the conditional is true. And then V1 equals six, then prints out six. So six, 3:10 and I'm going to throw a four on that because I, I, I believe that that's the, the precedence for operators, but I'm not a hundred percent sure."
8697,5931,6745,Snippet Value Judgement,"All right. Starting off with v one zero. Um, so then, uh, in the, if conditional you have false and a logical And, but there's the, there's no parentheses and this is like poorly written code cause it's hard to read and it inherently where the Or uh, follows. And so if I recall correctly, the operator precedence is such that And and Or are the same. Um, they don't, I don't believe either one of them takes precedence over the other. And so it's just left to right. And that's, uh, it would be zero And one which is false And true, which is false Or two, which is a truthy value. Thus the conditional is true. And then V1 equals six, then prints out six. So six, 3:10 and I'm going to throw a four on that because I, I, I believe that that's the, the precedence for operators, but I'm not a hundred percent sure."
8697,5918,6745,Correct for Wrong Reasons,"[Snippet 11] All right. Starting off with v one zero. Um, so then, uh, in the, if conditional you have false and a logical And, but there's the, there's no parentheses and this is like poorly written code cause it's hard to read and it inherently where the Or uh, follows. And so if I recall correctly, the operator precedence is such that And and Or are the same. Um, they don't, I don't believe either one of them takes precedence over the other. And so it's just left to right. And that's, uh, it would be zero And one which is false And true, which is false Or two, which is a truthy value. Thus the conditional is true. And then V1 equals six, then prints out six. So six, 3:10 and I'm going to throw a four on that because I, I, I believe that that's the, the precedence for operators, but I'm not a hundred percent sure."
8697,6856,6927,Caught Own Mistake Before Prompted,"Ok, so you have V1 is three and then V2, eight, [chuckles] seven, seven"
8697,6929,7133,Correct Semantics,"Um, uh, okay. And then, uh, so V2 is seven, then you're incrementing using post, post increments on V1 later on. So it's now four, so you have four and seven and then yeah, it prints out four space seven."
8697,7295,7392,Simple,"Yeah, because I again, nothing feels ambiguous to me. I feel confident that's the correct answer."
8697,7295,7392,Sure,"Yeah, because I again, nothing feels ambiguous to me. I feel confident that's the correct answer."
8697,7695,7767,History Lesson," I think even zero zero is considered an octal, although not sure about."
8697,7925,7957,Non-standard terminology,because d is the regular integer
8697,7480,7989,Snippet Value Judgement,"[Snippet 105] Oh God, I hate these. Octals. Oh, yeah, sorry. 3:11. So right off the bat I noticed the fact that uh, the one is formed from an octal of as an a leading zero where there's other numbers after the zero. I think even zero zero is considered an octal, although not sure about. Um, so the, the value is base eight, I believe. Um, which means 13. Is actually, so it's actually going to be eight. It's gonna be 11 is the actual value in because d is the regular integer when it actually prints it out,"
8697,7480,7989,Correct Semantics,"[Snippet 105] Oh God, I hate these. Octals. Oh, yeah, sorry. 3:11. So right off the bat I noticed the fact that uh, the one is formed from an octal of as an a leading zero where there's other numbers after the zero. I think even zero zero is considered an octal, although not sure about. Um, so the, the value is base eight, I believe. Um, which means 13. Is actually, so it's actually going to be eight. It's gonna be 11 is the actual value in because d is the regular integer when it actually prints it out,"
8697,8111,8231,Paranoia,"I'm going to put five only because I'm never confident with octals in general, but I am pretty confident that's correct."
8697,8349,8799,Uncommon pattern,"Oh, just in general. Like we don't really think normally, it's not ambiguous. It's just we don't know. We think about Octals in that, like in general. And so I, I preferred not to use them I guess because they are harder to read.[Excitedly] It's ambiguous in the sense that like we are, we just, we usually read digits in either base 10 or occasionally in programming base 2. So it's introducing a different base for, without making it super obvious."
8697,8349,8799,Unfamiliar Syntax,"Oh, just in general. Like we don't really think normally, it's not ambiguous. It's just we don't know. We think about Octals in that, like in general. And so I, I preferred not to use them I guess because they are harder to read.[Excitedly] It's ambiguous in the sense that like we are, we just, we usually read digits in either base 10 or occasionally in programming base 2. So it's introducing a different base for, without making it super obvious."
8697,8349,8799,Change of Radix,"Oh, just in general. Like we don't really think normally, it's not ambiguous. It's just we don't know. We think about Octals in that, like in general. And so I, I preferred not to use them I guess because they are harder to read.[Excitedly] It's ambiguous in the sense that like we are, we just, we usually read digits in either base 10 or occasionally in programming base 2. So it's introducing a different base for, without making it super obvious."
8697,8349,8799,Complex,"Oh, just in general. Like we don't really think normally, it's not ambiguous. It's just we don't know. We think about Octals in that, like in general. And so I, I preferred not to use them I guess because they are harder to read.[Excitedly] It's ambiguous in the sense that like we are, we just, we usually read digits in either base 10 or occasionally in programming base 2. So it's introducing a different base for, without making it super obvious."
8697,8913,9347,Change of Radix,"Yeah, you'd have to like think about it like, cause we, I mean there's nothing fundamentally different about it. It's just that like we think about numbers usually in base 10 cause that's how we learn numbers. And then I mean base 2, we can, we usually learn that as well as computer scientists. But rarely do we do a lot of, uh, you know, math in base eight in our head or in general. And so we're just not accustomed to it, I guess."
8697,8913,9347,Convention,"Yeah, you'd have to like think about it like, cause we, I mean there's nothing fundamentally different about it. It's just that like we think about numbers usually in base 10 cause that's how we learn numbers. And then I mean base 2, we can, we usually learn that as well as computer scientists. But rarely do we do a lot of, uh, you know, math in base eight in our head or in general. And so we're just not accustomed to it, I guess."
8697,9628,9772,Potential Confusing Constructs,"if you put a pointer in between those int and V1, it would not carry over to the other V2 as crazy as that is, because this language is terrible"
8697,9493,9773,Language Value Judgement," Um, so, oh yeah, that's right [chuckles]. So V1 and V2 are both integers. In this case cus it's a comma, but, uh, you know, fun fact, if you put a pointer in between those int and V1, it would not carry over to the other V2 as crazy as that is, because this language is terrible."
8697,9493,9773,History Lesson," Um, so, oh yeah, that's right [chuckles]. So V1 and V2 are both integers. In this case cus it's a comma, but, uh, you know, fun fact, if you put a pointer in between those int and V1, it would not carry over to the other V2 as crazy as that is, because this language is terrible."
8697,9493,9773,Amusement," Um, so, oh yeah, that's right [chuckles]. So V1 and V2 are both integers. In this case cus it's a comma, but, uh, you know, fun fact, if you put a pointer in between those int and V1, it would not carry over to the other V2 as crazy as that is, because this language is terrible."
8697,10284,10450,Incorrect Semantics," Like if you're defining a value in the preprocessor, and it's already set, but if you set it again, they will not warn you or whatever. It just lets you override it."
8697,10149,10450,Macro Redefinition," they're just defines. So because of that, uh, you're just defining values and then for whatever reason macros like can be overwritten. Like if you're defining a value in the preprocessor, and it's already set, but if you set it again, they will not warn you or whatever. It just lets you override it."
8697,9903,11043,Sure,"But yeah, but these defines or like not affected by the condition also. So the conditional actually doesn't matter in this case. Becau... Um, I at first I thought they were, ifdefs, uh, I was going to like work that out, but they're actually not, they're just defines. So because of that, uh, you're just defining values and then for whatever reason macros like can be overwritten. Like if you're defining a value in the preprocessor, and it's already set, but if you set it again, they will not warn you or whatever. It just lets you override it. And so, uh, just because of the latter two defines happened after in code than the first two defines those are the values that are accepted or that are used, uh, in the, uh, like, so basically it does all the preprocessing and then by the time this code actually gets to C code, then it's the last value they were set at. And based on this, I would say it's uh M1 is two and M2 is one, so, uh, two and one and 3:15 and six because that's, uh, I, I'm confident that given this is the entire code, like there's no other defines nothing else being imported then. Yeah, that's the correct answer."
8697,9903,11043,Correct Semantics,"But yeah, but these defines or like not affected by the condition also. So the conditional actually doesn't matter in this case. Becau... Um, I at first I thought they were, ifdefs, uh, I was going to like work that out, but they're actually not, they're just defines. So because of that, uh, you're just defining values and then for whatever reason macros like can be overwritten. Like if you're defining a value in the preprocessor, and it's already set, but if you set it again, they will not warn you or whatever. It just lets you override it. And so, uh, just because of the latter two defines happened after in code than the first two defines those are the values that are accepted or that are used, uh, in the, uh, like, so basically it does all the preprocessing and then by the time this code actually gets to C code, then it's the last value they were set at. And based on this, I would say it's uh M1 is two and M2 is one, so, uh, two and one and 3:15 and six because that's, uh, I, I'm confident that given this is the entire code, like there's no other defines nothing else being imported then. Yeah, that's the correct answer."
8697,9774,11043,Caught Own Mistake Before Prompted,"Um, so, so it's a int V1 is one and V2 is 2, uh, if V1 is less than tw.. V2 and then we have some crazy macro defines, uh, okay. But yeah, but these defines or like not affected by the condition also. So the conditional actually doesn't matter in this case. Becau... Um, I at first I thought they were, ifdefs, uh, I was going to like work that out, but they're actually not, they're just defines. So because of that, uh, you're just defining values and then for whatever reason macros like can be overwritten. Like if you're defining a value in the preprocessor, and it's already set, but if you set it again, they will not warn you or whatever. It just lets you override it. And so, uh, just because of the latter two defines happened after in code than the first two defines those are the values that are accepted or that are used, uh, in the, uh, like, so basically it does all the preprocessing and then by the time this code actually gets to C code, then it's the last value they were set at. And based on this, I would say it's uh M1 is two and M2 is one, so, uh, two and one and 3:15 and six because that's, uh, I, I'm confident that given this is the entire code, like there's no other defines nothing else being imported then. Yeah, that's the correct answer."
8697,11153,11347,Simple,"Okay. So you have V1 is three, V2 is V1 plus two is five. Um, and then V2 is five, so its outputting five,

Subject:            12:28          Six does not feel ambiguous or any question at all."
8697,11459,12073,History Lesson,"[Snippet 61] Oh, [chuckles] Default initialization. Oh yes, yeah, 3:16. Okay. So right off of the bat, I noticed that you're using default initialization here, which actually might not, I don't know, maybe that word, that terminology does not apply to C, but I can think about it in C plus plus land of default initialization where you have integers where it's undefined to read them, but you're, they're, still created for their, their storage duration exists, but they have no known value. Um, so in, but in this case you're assigning over them anyways, so it's fine. You're not going to get undefined behavior. "
8697,11459,12073,Amusement,"[Snippet 61] Oh, [chuckles] Default initialization. Oh yes, yeah, 3:16. Okay. So right off of the bat, I noticed that you're using default initialization here, which actually might not, I don't know, maybe that word, that terminology does not apply to C, but I can think about it in C plus plus land of default initialization where you have integers where it's undefined to read them, but you're, they're, still created for their, their storage duration exists, but they have no known value. Um, so in, but in this case you're assigning over them anyways, so it's fine. You're not going to get undefined behavior. "
8697,11459,12073,Uninitialized,"[Snippet 61] Oh, [chuckles] Default initialization. Oh yes, yeah, 3:16. Okay. So right off of the bat, I noticed that you're using default initialization here, which actually might not, I don't know, maybe that word, that terminology does not apply to C, but I can think about it in C plus plus land of default initialization where you have integers where it's undefined to read them, but you're, they're, still created for their, their storage duration exists, but they have no known value. Um, so in, but in this case you're assigning over them anyways, so it's fine. You're not going to get undefined behavior. "
8697,12073,12248,Precedence,"Um, okay, so it starts by cause of the parentheses. Uh, that is the first, the inner most context. And then left to right because the comm operator, so you have V2 equals one."
8697,12073,12248,Correct Semantics,"Um, okay, so it starts by cause of the parentheses. Uh, that is the first, the inner most context. And then left to right because the comm operator, so you have V2 equals one."
8697,12073,12248,Parenthesis,"Um, okay, so it starts by cause of the parentheses. Uh, that is the first, the inner most context. And then left to right because the comm operator, so you have V2 equals one."
8697,12285,12661,Uncommon pattern,"So then that value is I guess, cast off into the ether because then the comma operator. So as you go to the next thing to the right and it's two, two was the result of that sub-expression. And that's assigned into V1. So V1 is two and V1 is one. V1 is 2, V2 is 1. 3:17 and six, it feels like very awkwardly written but understandable code, the I can read [chuckles awkwardly]."
8697,12285,12661,Sure,"So then that value is I guess, cast off into the ether because then the comma operator. So as you go to the next thing to the right and it's two, two was the result of that sub-expression. And that's assigned into V1. So V1 is two and V1 is one. V1 is 2, V2 is 1. 3:17 and six, it feels like very awkwardly written but understandable code, the I can read [chuckles awkwardly]."
8697,12285,12661,Correct Semantics,"So then that value is I guess, cast off into the ether because then the comma operator. So as you go to the next thing to the right and it's two, two was the result of that sub-expression. And that's assigned into V1. So V1 is two and V1 is one. V1 is 2, V2 is 1. 3:17 and six, it feels like very awkwardly written but understandable code, the I can read [chuckles awkwardly]."
8697,12966,13019,Unsure,
8697,16144,16170,Unsure,"Okay. Um, what is 10 mod 3"
8697,16109,16170,Discussion Question,"Subject:            20:57          Okay. Um, what is 10 mod 3"
8697,16292,16363,Cognitive Load,"Okay, that's fair. I don't know. I'm terrible at doing math in my head."
8697,16292,16363,Math is easy or hard,"Okay, that's fair. I don't know. I'm terrible at doing math in my head."
8697,16696,16968,Comprehension Technique,"Fair enough, so one, two, three. One, two, three, four, five, six, seven, eight, nine, 10. So that would be... Oh interesting. Actually. Not sure what though, so it's starting at. Would that be one or zero? I mean it's, it can't be zero because it's doesn't evenly divide."
8697,17103,17167,Cognitive Load,"[Laughing] My terribleness with doing math in my head, honestly."
8697,17103,17167,Math is easy or hard,"[Laughing] My terribleness with doing math in my head, honestly."
8697,17103,17167,Amusement,"[Laughing] My terribleness with doing math in my head, honestly."
8697,17321,17521,Unsure,"I mean, so honestly, like I, I think it's one because you know, three, three times three is nine, so then you have like the remainder of that is just, it's one. Right. And that is, that's about right."
8697,17321,17521,Correct Semantics,"I mean, so honestly, like I, I think it's one because you know, three, three times three is nine, so then you have like the remainder of that is just, it's one. Right. And that is, that's about right."
8697,17570,17691,Cognitive Load,"Subject:            22:19          But like, I dunno, I'm just like terrible with those kinds of things, like in my head."
8697,18009,18063,Visual Reference,the visual pneumonic you used here with the three bars
8697,18210,18470,Math is easy or hard,"Um, I don't know. I don't know. I just, I'm naturally not good with doing things in my head. And especially with like math in general. And so I'm just never confident basically my own abilities to do math like without using a calculator or like drawing it out."
8697,18210,18470,Paranoia,"Um, I don't know. I don't know. I just, I'm naturally not good with doing things in my head. And especially with like math in general. And so I'm just never confident basically my own abilities to do math like without using a calculator or like drawing it out."
8697,18603,18841,Comprehension Technique,"So yeah. So basically you do the logic was like do I think this is this zero? No, it is not evenly divided so it's fine. But only because it was in conditional that I was like all right, I can just, I can get past what the actual value is"
8697,19337,19547,Mental Model,"Yes. Because it does not evenly divide and I only, the only pattern is like, you know like the Fizz buzz pattern of like does this divide into two and is equal to zero. Then it's an even number. Like, thats the"
8697,19939,19983,Common Pattern,So and that's where it's most commonly used.
8697,20283,20614,Javascript,"I was just getting at the fact that like mod is used for ""is this even"" especially on like non low level languages where like for example in Javascript where it was like my prior background was mostly in the bitwise operators things and like things like modulus or actually slower because it stringifies them first before doing it."
8697,20283,20614,Contrasting different languages,"I was just getting at the fact that like mod is used for ""is this even"" especially on like non low level languages where like for example in Javascript where it was like my prior background was mostly in the bitwise operators things and like things like modulus or actually slower because it stringifies them first before doing it."
8697,20283,20614,Performance Optimization,"I was just getting at the fact that like mod is used for ""is this even"" especially on like non low level languages where like for example in Javascript where it was like my prior background was mostly in the bitwise operators things and like things like modulus or actually slower because it stringifies them first before doing it."
8697,20283,20614,Design Concerns,"I was just getting at the fact that like mod is used for ""is this even"" especially on like non low level languages where like for example in Javascript where it was like my prior background was mostly in the bitwise operators things and like things like modulus or actually slower because it stringifies them first before doing it."
8697,20650,20797,Performance Optimization," So it's actually better to do. Um, like you can't just say like, oh check a low bit cause that's going to be like more expensive than doing mod 2."
8697,20650,20797,Alternative Idioms," So it's actually better to do. Um, like you can't just say like, oh check a low bit cause that's going to be like more expensive than doing mod 2."
8697,16017,21281,Modulus,"[Snippet 1] If there are actually any questions, um, about how the code works or anything.

Subject:            20:57          Okay. Um, what is 10 mod 3

Interviewer:        20:59          Well actually it's, I was going to ask you that.

Subject:            21:02          Okay, that's fair. I don't know. I'm terrible at doing math in my head.

Interviewer:        21:09          Oh yeah, well feel, feel free to. Actually, hold on a sec. Can I get you to switch? [changes from black pen to red]

Subject:            21:12          Yes.

Interviewer:        21:12          Because now it's going to be more of a back and forth conversation

Subject:            21:17          Fair enough, so one, two, three. One, two, three, four, five, six, seven, eight, nine, 10. So that would be... Oh interesting. Actually. Not sure what though, so it's starting at. Would that be one or zero? I mean it's, it can't be zero because it's doesn't evenly divide.

Interviewer:        21:39          So, so where's the, where's the sort of difficulty with this?

Subject:            21:46          [Laughing] My terribleness with doing math in my head, honestly.

Interviewer:        21:48          Um, well, okay, so could, it could either be zero or one yes. So where's... Why?

Subject:            22:05          I mean, so honestly, like I, I think it's one because you know, three, three times three is nine, so then you have like the remainder of that is just, it's one. Right. And that is, that's about right.

Interviewer:        22:15          Uh... Yeah

Subject:            22:19          But like, I dunno, I'm just like terrible with those kinds of things, like in my head.

Interviewer:        22:23          Yeah. Um, well, okay, so you're right. Um, the mod value is one, it is a truthy value, V1 does get set to 4, the output is four? Yeah. So you've got all of those things. Um, but I'm still trying to drill down because you were so confident about all these things. Um, and even even the visual pneumonic you used here with the three bars, that seems like an awesome way to do it. And you sort of ripped through it. So, um, what was the hesitation?

Subject:            22:51          Um, I don't know. I don't know. I just, I'm naturally not good with doing things in my head. And especially with like math in general. And so I'm just never confident basically my own abilities to do math like without using a calculator or like drawing it out.

Interviewer:        23:15          Okay. I mean be that as it may you got it completely right.

Subject:            23:19          So yeah. So basically you do the logic was like do I think this is this zero? No, it is not evenly divided so it's fine. But only because it was in conditional that I was like all right, I can just, I can get past what the actual value is

Interviewer:        23:28          Right, but if it had been assigned.

Subject:            23:30          Right, then I would've taken more time I think yeah.

Interviewer:        23:35          Ultimately you would have written it right because you did get it right here. But yeah, it probably would have taken a little more time. Yeah. But yeah, I just found that interesting that because you were immediately able to decide that that's a non zero value.

Subject:            23:44          Yes. Because it does not evenly divide and I only, the only pattern is like, you know like the Fizz buzz pattern of like does this divide into two and is equal to zero. Then it's an even number. Like, thats the

Interviewer:        23:53          I thought Fizz Buzz was three times five or

Subject:            23:59          Oh yeah, I guess it is three and I guess, but anyway, um, so it actually, that's not the Fizz Buzz, that was a bad example. But the, the, is this an even number pattern I guess?

Interviewer:        24:06          Right, yeah, yeah, yeah.

Subject:            24:08          So and that's where it's most commonly used.

Interviewer:        24:10          Oh wait. The reason its relevant for Fizz Buzz is cause you can just cause you need to find the ones where it's doubly divisible. So you find all of them for one and then you, nevermind, I I think I see what you're getting at.

Subject:            24:23          I was just getting at the fact that like mod is used for ""is this even"" especially on like non low level languages where like for example in Javascript where it was like my prior background was mostly in the bitwise operators things and like things like modulus or actually slower because it stringifies them first before doing it.

Subject:            24:41          So it's actually better to do. Um, like you can't just say like, oh check a low bit cause that's going to be like more expensive than doing mod 2.

Interviewer:        24:50          Right, that's kind of crazy.

Subject:            24:52          So stuff like that. It's like, that's what I guess my mind was going to, I was like, Oh yeah, I know that pattern cause it's it's not an, it's not evenly divided, therefore it's a true value.

Interviewer:        25:01          Cool. Alright. Well yeah, awesome explanation. Um, yeah. And you got that one right. Um, okay. So does this guy, do you have any questions about that one?"
8697,21562,21655,Unsure,"[Snippet 11] Uh, yeah, definitely. I'm curious the order operations on the logical operators."
8697,21562,21655,Precedence,"[Snippet 11] Uh, yeah, definitely. I'm curious the order operations on the logical operators."
8697,21526,21655,Discussion Question,"
Subject:            25:29          [Snippet 11] Uh, yeah, definitely. I'm curious the order operations on the logical operators."
8697,22459,22767,Precedence," I mean, I, I'm certainly curious what the difference is, like, which is evaluated which, and, uh, but I, I don't really, I can't, I can take a shot in the dark, which one is higher precedence than the other but like, I don't actually have a good reason for why to believe one or the other. So, I'm not sure."
8697,22459,22767,Unsure," I mean, I, I'm certainly curious what the difference is, like, which is evaluated which, and, uh, but I, I don't really, I can't, I can take a shot in the dark, which one is higher precedence than the other but like, I don't actually have a good reason for why to believe one or the other. So, I'm not sure."
8697,22929,23334,Ambiguous Readability,"Certainly not frequently? Um, very occasionally. And if so, uh, I personally always try to wrap things in parentheses to distinguish like, like at the time I'd probably look up online, ""Hey, what's the order of operations on this?"", and then I would like put parentheses around the things and actually happened first. Not because it changes the functionality, but because it changes the readability of it."
8697,22929,23334,Parenthesis,"Certainly not frequently? Um, very occasionally. And if so, uh, I personally always try to wrap things in parentheses to distinguish like, like at the time I'd probably look up online, ""Hey, what's the order of operations on this?"", and then I would like put parentheses around the things and actually happened first. Not because it changes the functionality, but because it changes the readability of it."
8697,22929,23334,Would Have Written it Differently,"Certainly not frequently? Um, very occasionally. And if so, uh, I personally always try to wrap things in parentheses to distinguish like, like at the time I'd probably look up online, ""Hey, what's the order of operations on this?"", and then I would like put parentheses around the things and actually happened first. Not because it changes the functionality, but because it changes the readability of it."
8697,22929,23334,Uncommon pattern,"Certainly not frequently? Um, very occasionally. And if so, uh, I personally always try to wrap things in parentheses to distinguish like, like at the time I'd probably look up online, ""Hey, what's the order of operations on this?"", and then I would like put parentheses around the things and actually happened first. Not because it changes the functionality, but because it changes the readability of it."
8697,24078,24133,Non-standard terminology,"Binds tighter, it's, I've never heard that term before."
8697,24723,24821,Correct Semantics,"Okay. Um, but if the, if the were swapped and places and then it would evaluate one in one and two"
8697,24723,24993,Visual Reference,"Okay. Um, but if the, if the were swapped and places and then it would evaluate one in one and two

Interviewer:        28:15          Can you write what you mean?

Subject:            28:17          Oh yeah, sure. So if these were swapped, if it was if zero or one? Uh,"
8697,25029,25490,Visual Reference," how do you, like, I'll just, yeah, I guess [struggling to write ampersand symbol]

Interviewer:        28:34          Yeah. I think when I write them, Ands, I don't actually write it in that way.

Subject:            28:45          I feel silly [laughs].

Subject:            28:48          Okay, well, [laughs] whatever. So if this were the case, you said like, you know, you, you noted that this binds tighter, so one And two would be would happen first. Um,"
8697,25029,25490,Amusement," how do you, like, I'll just, yeah, I guess [struggling to write ampersand symbol]

Interviewer:        28:34          Yeah. I think when I write them, Ands, I don't actually write it in that way.

Subject:            28:45          I feel silly [laughs].

Subject:            28:48          Okay, well, [laughs] whatever. So if this were the case, you said like, you know, you, you noted that this binds tighter, so one And two would be would happen first. Um,"
8697,24723,26035,Counterfactual Semantics,"Okay. Um, but if the, if the were swapped and places and then it would evaluate one in one and two

Interviewer:        28:15          Can you write what you mean?

Subject:            28:17          Oh yeah, sure. So if these were swapped, if it was if zero or one? Uh,

Subject:            28:31          how do you, like, I'll just, yeah, I guess [struggling to write ampersand symbol]

Interviewer:        28:34          Yeah. I think when I write them, Ands, I don't actually write it in that way.

Subject:            28:45          I feel silly [laughs].

Subject:            28:48          Okay, well, [laughs] whatever. So if this were the case, you said like, you know, you, you noted that this binds tighter, so one And two would be would happen first. Um,

Subject:            29:04          so then it would be true as well, right?

Interviewer:        29:07          Yeah, it would be true as well. But for a different reason.

Subject:            29:10          Yeah, for different reason, yeah, in a different way.

Interviewer:        29:11          So, you can put the parens around the right hand side, um, around the, the And expression. Um, yeah. So maybe the interesting one is if you switch the zero and the one.

Subject:            29:26          Oh yeah. And then it changes the result."
8697,26162,26241,Precedence,"The right side gets not evaluated first, but has the, it splits up in that way."
8697,26162,26241,Evaluation Order,"The right side gets not evaluated first, but has the, it splits up in that way."
8697,26036,26241,Unsure,"Yeah. I was mostly just curious about like the, the fact that like the, because this has a higher precedence than it ends up. The right side gets not evaluated first, but has the, it splits up in that way."
8697,26571,26742,Discussion Question,"Subject:            29:58          Um, so you're not curious about like assembly and stuff like that? You're just curious about the language itself? Like the output of it."
8697,26850,27157,Criticism of Study Design,"Oh, I'm just curious, like I assume the answer is no at this point, but I was wondering if this research study is going to go into the fact that like, uh, this line is never executed at runtime because it has no functionality, like its in all cases it's overwritten so it, it never happens. Stuff like that."
8697,27840,27923,Unsure,"Um, it, I guess I don't have a better way to ask it. Like, is it 11 in to base ten?"
8697,27805,27923,Discussion Question,"Subject:            30:58          Um, it, I guess I don't have a better way to ask it. Like, is it 11 in to base ten?"
8697,28804,29018,Quote,"Yeah. And that's like, I don't know. It's, it's, it's, um, it's logical. It's not uh fundamentally different than anything else we do. It's just the fact that it is uncommon in our use case that if feels a natural."
8697,28804,29018,Uncommon pattern,"Yeah. And that's like, I don't know. It's, it's, it's, um, it's logical. It's not uh fundamentally different than anything else we do. It's just the fact that it is uncommon in our use case that if feels a natural."
8697,29483,30042,Potential Confusing Constructs,"No, I was also worried if like the catch, like I was glad the second the and second sheet both had percent d as like the output. I was like, I'm actually not confident. That's just like the regular entry. I think it is, but the percent, yeah, it was not 100% sure. And so when I saw the second sheet I was ""okay, that, that's not the trick here"". When I saw the first one, it was like really simple. I was worried. I was like, Oh man, is the, is the trick of this, the fact that that's like the wrong printf, identifier or whatever the, the argument thing is."
8697,29483,30042,Relying on Correctness of Example,"No, I was also worried if like the catch, like I was glad the second the and second sheet both had percent d as like the output. I was like, I'm actually not confident. That's just like the regular entry. I think it is, but the percent, yeah, it was not 100% sure. And so when I saw the second sheet I was ""okay, that, that's not the trick here"". When I saw the first one, it was like really simple. I was worried. I was like, Oh man, is the, is the trick of this, the fact that that's like the wrong printf, identifier or whatever the, the argument thing is."
8697,29483,30042,Inferring Semantics from Reasoning,"No, I was also worried if like the catch, like I was glad the second the and second sheet both had percent d as like the output. I was like, I'm actually not confident. That's just like the regular entry. I think it is, but the percent, yeah, it was not 100% sure. And so when I saw the second sheet I was ""okay, that, that's not the trick here"". When I saw the first one, it was like really simple. I was worried. I was like, Oh man, is the, is the trick of this, the fact that that's like the wrong printf, identifier or whatever the, the argument thing is."
8697,29483,30042,Unsure,"No, I was also worried if like the catch, like I was glad the second the and second sheet both had percent d as like the output. I was like, I'm actually not confident. That's just like the regular entry. I think it is, but the percent, yeah, it was not 100% sure. And so when I saw the second sheet I was ""okay, that, that's not the trick here"". When I saw the first one, it was like really simple. I was worried. I was like, Oh man, is the, is the trick of this, the fact that that's like the wrong printf, identifier or whatever the, the argument thing is."
8697,29448,30042,printf,"Subject:            32:33          No, I was also worried if like the catch, like I was glad the second the and second sheet both had percent d as like the output. I was like, I'm actually not confident. That's just like the regular entry. I think it is, but the percent, yeah, it was not 100% sure. And so when I saw the second sheet I was ""okay, that, that's not the trick here"". When I saw the first one, it was like really simple. I was worried. I was like, Oh man, is the, is the trick of this, the fact that that's like the wrong printf, identifier or whatever the, the argument thing is."
8697,29448,30042,Discussion Question,"Subject:            32:33          No, I was also worried if like the catch, like I was glad the second the and second sheet both had percent d as like the output. I was like, I'm actually not confident. That's just like the regular entry. I think it is, but the percent, yeah, it was not 100% sure. And so when I saw the second sheet I was ""okay, that, that's not the trick here"". When I saw the first one, it was like really simple. I was worried. I was like, Oh man, is the, is the trick of this, the fact that that's like the wrong printf, identifier or whatever the, the argument thing is."
8697,30079,30168,Non-standard terminology,"Yeah, yeah, format specifier.

Subject:            33:01          Format Specifier, yeah."
8697,30329,30527,Amusement,"Yeah, that's fine. I was just remarking on the fact that like, you know, I'm really glad [laughs] that that was not like the issue. That I realize multiple sheets had the exact same format, so it..."
8697,31330,31449,Uncommon pattern,"Cause we don't really use printf at all. like in C++, right. So. Well you sometimes do, but like in general it's c-out."
8697,31330,31449,C vs C++,"Cause we don't really use printf at all. like in C++, right. So. Well you sometimes do, but like in general it's c-out."
8697,31295,31449,printf,"Subject:            33:43          Cause we don't really use printf at all. like in C++, right. So. Well you sometimes do, but like in general it's c-out."
8697,31534,31870,Caught Own Mistake Before Prompted,"[Snippet 71] Uh, yeah. So this one's, um, fun in that. At first glance I didn't actually read the lines below. I just saw hashes and assumed it was if def. And so then my initial reaction was, and I thought I was going to be trying to determine how the braces lined up based off of what blocks were actually included in the code or not."
8697,31759,31870,Potential Confusing Constructs,trying to determine how the braces lined up based off of what blocks were actually included in the code or not.
8697,31959,32258,Correct Semantics,"That's what I thought I was going to be doing. And then I was like, okay, let me figure it out how it's gonna work out. And then I suddenly realized, oh actually that has nothing to do with anything. It's just, you're just reading the identifier or reading the, the defines and then finding out. But"
8697,32428,33003,Convention," I suppose that usually when people are using macros in C/C plus plus, it's because they are trying to do um, compiler time conditional logic to decide what code is actually included. Usually around things like is this the right platform and switch, you know, for portability reasons like switch between the code the actually want to use. Um, and so that's why I thought it was going to be, and then I realized it's actually just defining macro values, that you. There's function-style macros and what's the other term? Non-function-style macros but what's the word for that?"
8697,32428,33003,Author Intention," I suppose that usually when people are using macros in C/C plus plus, it's because they are trying to do um, compiler time conditional logic to decide what code is actually included. Usually around things like is this the right platform and switch, you know, for portability reasons like switch between the code the actually want to use. Um, and so that's why I thought it was going to be, and then I realized it's actually just defining macro values, that you. There's function-style macros and what's the other term? Non-function-style macros but what's the word for that?"
8697,32891,33207,Non-standard terminology,"There's function-style macros and what's the other term? Non-function-style macros but what's the word for that?

Interviewer:        35:03          Object style

Subject:            35:04          Object-style macros? I don't know. Something like that. So when you're just defining them and then it just, you know,
"
8697,33242,33529,Incorrect Semantics," I guess it's the, it occurs, it overwrites the values based off of the order, which it consumes it top to bottom. So, and then it ended up being like that by the time it in, in the preprocessor it gets to this line, it then just inserts literals for the values that it came across last."
8697,34346,34814,C vs C++,"Uh, because this is C I don't have any like, you know, things of interest or, uh, confusion, but this was C plus plus. Um, actually in C plus plus as well this is fine cause you define it as integer. But if there was some, like if the type was not obviously like a builtin type, then this could be invoking the comma operator could be overloaded by like a function call. That was the only thing that's like a little weird, but in, this is C, so it's like not an issue."
8697,34346,34814,History Lesson,"Uh, because this is C I don't have any like, you know, things of interest or, uh, confusion, but this was C plus plus. Um, actually in C plus plus as well this is fine cause you define it as integer. But if there was some, like if the type was not obviously like a builtin type, then this could be invoking the comma operator could be overloaded by like a function call. That was the only thing that's like a little weird, but in, this is C, so it's like not an issue."
8697,34346,34995,Amusement,"Uh, because this is C I don't have any like, you know, things of interest or, uh, confusion, but this was C plus plus. Um, actually in C plus plus as well this is fine cause you define it as integer. But if there was some, like if the type was not obviously like a builtin type, then this could be invoking the comma operator could be overloaded by like a function call. That was the only thing that's like a little weird, but in, this is C, so it's like not an issue.

Interviewer:        36:33          That's interesting. Um, yeah. I'd never thought about overloading the comma operator.

Subject:            36:43          It's a thing. [Laughs]"
8697,35108,35143,C vs C++,C Plus plus is a terrible language.
8697,35108,35143,Language Value Judgement,C Plus plus is a terrible language.
3316,808,989,Correct Semantics,"Um looks like we're taking a or declaring another pointer to that array and adding one, that's interesting. Um, I think that should be, I guess that's the address over the array as."
3316,990,1065,Value Exists,I don't think you can add one to an array like that as there's just nothing
3316,1067,1144,Multiple Possible Semantics,"There can be a length or an element, but I don't think that's how that works."
3316,1182,1280,Questioning Program Validity," this pointer to an int should be, if I were to guess that it's correct, is the size of the array."
3316,990,1451,Guessing,"I don't think you can add one to an array like that as there's just nothing. There can be a length or an element, but I don't think that's how that works. So I guess I will, and that, and then this pointer to an int should be, if I were to guess that it's correct, is the size of the array. So right now the array was instantiated at four and then the size should be uh five. So if you were to print the dereferenced V2, then be five. So program output is five?"
3316,990,1451,Unsure,"I don't think you can add one to an array like that as there's just nothing. There can be a length or an element, but I don't think that's how that works. So I guess I will, and that, and then this pointer to an int should be, if I were to guess that it's correct, is the size of the array. So right now the array was instantiated at four and then the size should be uh five. So if you were to print the dereferenced V2, then be five. So program output is five?"
3316,990,1451,Inferring Semantics from Reasoning,"I don't think you can add one to an array like that as there's just nothing. There can be a length or an element, but I don't think that's how that works. So I guess I will, and that, and then this pointer to an int should be, if I were to guess that it's correct, is the size of the array. So right now the array was instantiated at four and then the size should be uh five. So if you were to print the dereferenced V2, then be five. So program output is five?"
3316,990,1451,Incorrect Semantics,"I don't think you can add one to an array like that as there's just nothing. There can be a length or an element, but I don't think that's how that works. So I guess I will, and that, and then this pointer to an int should be, if I were to guess that it's correct, is the size of the array. So right now the array was instantiated at four and then the size should be uh five. So if you were to print the dereferenced V2, then be five. So program output is five?"
3316,1877,1911,Amusement,I'm going to go with four [laugh].
3316,2049,2113,Unsure,I wasn't sure that you could add to an array directly like that.
3316,2150,2363,Multiple Possible Semantics,"Um, so assuming that the code was relatively simple, I just assumed that you could index something in the array and it was either going to add an element or increase the length of the array. So I went with length."
3316,2150,2363,Mental Model,"Um, so assuming that the code was relatively simple, I just assumed that you could index something in the array and it was either going to add an element or increase the length of the array. So I went with length."
3316,2748,2775,Similar To,[Snippet 46] Another array.
3316,2776,2826,Correct Semantics,This time the pointer is an address of an element.
3316,2827,2883,Unsure,The second element in the array or I guess the first if.
3316,2933,2997,Non-standard terminology,Then we're passing a reference to the element one in that array.
3316,2884,3172,Sure,"So the array contains three, one, four, and six. Then we're passing a reference to the element one in that array. So V2 will contain a reference to that element and then when you try and print out the dereferenced V2 it'll print out 1. And then 11:05. I think I'm positive about that one."
3316,3409,3441,Non-standard terminology,as opposed to the incrementation
3316,3312,3451,Notices Transformation Correctly,"Uh, this is a more familiar, accessing of an array that I'm used to in C I think just by element as opposed to the incrementation, I guess."
3316,3312,3587,Previously Seen,"Uh, this is a more familiar, accessing of an array that I'm used to in C I think just by element as opposed to the incrementation, I guess.

Interviewer:        04:47          So you'd say it's because you've seen this kind of thing?

Subject:            04:49          Yeah."
3316,3699,3922,Correct Semantics,"Alright. V1 is 2. And then V2 is equal to the incrementation of V1, so three minus two, so one. So V2 is currently one. And then if we were to print out V1 and V2, we print out two and one. In spaces like that, there we go."
3316,4179,4294,Simple,"I'm familiar with incrementation and evaluating simple, simple arithmetic on the side of assigning to ints at least"
3316,4118,4295,Sure,"I think I've seen some more stuff like this before. Uh, the, I'm familiar with incrementation and evaluating simple, simple arithmetic on the side of assigning to ints at least."
3316,4118,4295,Previously Seen,"I think I've seen some more stuff like this before. Uh, the, I'm familiar with incrementation and evaluating simple, simple arithmetic on the side of assigning to ints at least."
3316,4103,4295,Reasoning by Parts,"Uh, uh, again, I think I've seen some more stuff like this before. Uh, the, I'm familiar with incrementation and evaluating simple, simple arithmetic on the side of assigning to ints at least."
3316,4103,4295,Math is easy or hard,"Uh, uh, again, I think I've seen some more stuff like this before. Uh, the, I'm familiar with incrementation and evaluating simple, simple arithmetic on the side of assigning to ints at least."
3316,4103,4295,Arithmetic,"Uh, uh, again, I think I've seen some more stuff like this before. Uh, the, I'm familiar with incrementation and evaluating simple, simple arithmetic on the side of assigning to ints at least."
3316,4465,4514,Non-standard terminology,we assign it to an integer so it gets rounded off
3316,4421,4599,Correct Semantics,It's a float V1 is one point nine nine. And we assign it to an integer so it gets rounded off. So V2 is going to be one and then we're going to print out V2 and we'll print out 1
3316,4745,4965,Unsure,"Um, so this is uh, I think it's called slicing or uh, that's what I would call it, at least where you assign a float value to an integer and then the remainder is dropped off essentially when it, when it's gets assigned."
3316,4745,4965,Non-standard terminology,"Um, so this is uh, I think it's called slicing or uh, that's what I would call it, at least where you assign a float value to an integer and then the remainder is dropped off essentially when it, when it's gets assigned."
3316,5104,5156,Non-standard terminology," I'll assign three variables, zero, four and nothing"
3316,5162,5316,Correct Semantics,"if first variable is equal to two, which it's not, we'll set, we'll set V3 equal to five. So V3 will be five as V1's not equal to two then print out five,"
3316,5548,5629,Simple,it's pretty easy to tell what that integer is because it doesn't get manipulated.
3316,5805,5843,Correct Semantics,"zero and one. Okay, so that's not true"
3316,5845,6016,Questioning Program Validity,"And then, or two, which that's interesting. I'm not sure if two evaluate because in a lot of the languages I work with can't use, you can't use two, to evaluate like that."
3316,5889,6016,Unsure,"I'm not sure if two evaluate because in a lot of the languages I work with can't use, you can't use two, to evaluate like that."
3316,6017,6241,Incorrect Semantics,"So I'm going to go with, I'm gonna go with false on this one that you cannot evaluate two to true, but you usually can evaluate zero and one in these kinds of languages to other boolean types which the zero and one is false."
3316,5845,6242,Boolean Value of Integer,"And then, or two, which that's interesting. I'm not sure if two evaluate because in a lot of the languages I work with can't use, you can't use two, to evaluate like that. So I'm going to go with, I'm gonna go with false on this one that you cannot evaluate two to true, but you usually can evaluate zero and one in these kinds of languages to other boolean types which the zero and one is false. "
3316,5845,6242,Inferring semantics from other language,"And then, or two, which that's interesting. I'm not sure if two evaluate because in a lot of the languages I work with can't use, you can't use two, to evaluate like that. So I'm going to go with, I'm gonna go with false on this one that you cannot evaluate two to true, but you usually can evaluate zero and one in these kinds of languages to other boolean types which the zero and one is false. "
3316,6378,6442,Unsure,I'm not sure how this language evaluates two as a boolean value.
3316,6378,6442,Boolean Value of Integer,I'm not sure how this language evaluates two as a boolean value.
3316,6625,6752,Golang,"Uh, I work in go so go doesn't do integer, um conditionals. They have predefined boolean types and they don't like to mix them."
3316,6628,6752,Contrasting different languages," I work in go so go doesn't do integer, um conditionals. They have predefined boolean types and they don't like to mix them."
3316,6628,6752,Boolean Value of Integer," I work in go so go doesn't do integer, um conditionals. They have predefined boolean types and they don't like to mix them."
3316,6909,7088,Surprising comment,"there's a leading zero there. So I assume the int is going to be 13, um, because it doesn't have to represent that zero in memory. Um, otherwise there would be an error, I assume."
3316,6879,7110,Incorrect Semantics,"Int equals zero one three. Um there's a leading zero there. So I assume the int is going to be 13, um, because it doesn't have to represent that zero in memory. Um, otherwise there would be an error, I assume. So it'll print out 13"
3316,6856,7379,Relying on Correctness of Example,"[Snippet 105] Alright. Int equals zero one three. Um there's a leading zero there. So I assume the int is going to be 13, um, because it doesn't have to represent that zero in memory. Um, otherwise there would be an error, I assume. So it'll print out 13, 11:11. Um, confidence five, let's say. It seems like the best. What I would assume is the behavior is that it would, it would slice up that zero when you try to assign it and then the five is because it could be just that they they wouldn't let you compile that zero."
3316,6856,7379,Guessing,"[Snippet 105] Alright. Int equals zero one three. Um there's a leading zero there. So I assume the int is going to be 13, um, because it doesn't have to represent that zero in memory. Um, otherwise there would be an error, I assume. So it'll print out 13, 11:11. Um, confidence five, let's say. It seems like the best. What I would assume is the behavior is that it would, it would slice up that zero when you try to assign it and then the five is because it could be just that they they wouldn't let you compile that zero."
3316,7464,7487,Non-standard terminology,Trailing zero like that
3316,7757,7798,Unsure,"while that element... is there, I assume?"
3316,7757,7798,Value Exists,"while that element... is there, I assume?"
3316,7757,7798,Incorrect Semantics,"while that element... is there, I assume?"
3316,8019,8088,Top-down comprehension,So we'll do that couple times until the last element is equal to zero
3316,8176,8239,Caught Own Mistake Before Prompted,"No I've made a mistake hold on, the it's actually indexing them"
3316,8483,8546,Author Intention,So we're trying to print out the second value in the last value
3316,8701,8808,Trick Question,"it tries to trick you with the, using the last element as the, the conditional that controls the while loop"
3316,8677,9021,Top-down comprehension,"Um, it's, it, you know, it tries to trick you with the, using the last element as the, the conditional that controls the while loop. But, uh, I think it just, it proceeds through an array from the left side, storing the, the index variable its using for the while loop and then it breaks off and then you can print it out this specific element."
3316,10412,10539,Non-standard terminology,"Uh, I guess what happens when you evaluate, is this an array or a slice? Uh do? Does C have slices or does it only have arrays?"
3316,10492,10539,Question about Semantics,Does C have slices or does it only have arrays?
3316,11172,11356,Inferring semantics from other language,"Um, so this is how you would do something like that in go and I know go's based a lot on C, so I was wondering if there's something like that, but I've never done C programming itself."
3316,11172,11356,Golang,"Um, so this is how you would do something like that in go and I know go's based a lot on C, so I was wondering if there's something like that, but I've never done C programming itself."
3316,11319,11472,C Experience,"I've never done C programming itself. I've done well. I did a little C programming in my operating systems class, but mostly done C plus plus programming"
3316,11319,11554,C vs C++,"I've never done C programming itself. I've done well. I did a little C programming in my operating systems class, but mostly done C plus plus programming. And I'm familiar with arrays in c plus plus, but not how they're, they are in c."
3316,11555,11575,Question about Semantics,So is this an array?
3316,11580,11669,Non-standard terminology,"I'm assuming it's assuming that it's a size four array or size three, I guess is whatever"
3316,11555,11671,Correct Semantics,"So is this an array? And I'm assuming it's assuming that it's a size four array or size three, I guess is whatever. "
3316,11671,11785,Incorrect Semantics,"Um, and then what happens when you, when you add one to an array, does it append or does it in increment the size?"
3316,11671,11785,Question about Semantics,"Um, and then what happens when you, when you add one to an array, does it append or does it in increment the size?"
3316,11671,11785,Multiple Possible Semantics,"Um, and then what happens when you, when you add one to an array, does it append or does it in increment the size?"
3316,11555,11785,Unsure,"So is this an array? And I'm assuming it's assuming that it's a size four array or size three, I guess is whatever. Um, and then what happens when you, when you add one to an array, does it append or does it in increment the size?"
3316,11137,11785,C Experience,"Subject:            22:41          Um, so this is how you would do something like that in go and I know go's based a lot on C, so I was wondering if there's something like that, but I've never done C programming itself. I've done well. I did a little C programming in my operating systems class, but mostly done C plus plus programming. And I'm familiar with arrays in c plus plus, but not how they're, they are in c. So is this an array? And I'm assuming it's assuming that it's a size four array or size three, I guess is whatever. Um, and then what happens when you, when you add one to an array, does it append or does it in increment the size?"
3316,10377,11785,Discussion Question,"Subject:            22:00          Uh, I guess what happens when you evaluate, is this an array or a slice? Uh do? Does C have slices or does it only have arrays?

Interviewer:        22:08          Uh, when you say slice, what do you mean?

Subject:            22:10          I mean, um like a dynamically allocated a sort of array type construct that references an underlying array but is kind of, this is something in go that, uh,

Interviewer:        22:22          Yeah I was going to ask

Subject:            22:24          that they um, in go it points to a, uh, an underlying array that go controls and um, it, it keeps, it keeps the space dynamically allocated for you based on what you append to the slice.

Interviewer:        22:40          Sure.

Subject:            22:41          Um, so this is how you would do something like that in go and I know go's based a lot on C, so I was wondering if there's something like that, but I've never done C programming itself. I've done well. I did a little C programming in my operating systems class, but mostly done C plus plus programming. And I'm familiar with arrays in c plus plus, but not how they're, they are in c. So is this an array? And I'm assuming it's assuming that it's a size four array or size three, I guess is whatever. Um, and then what happens when you, when you add one to an array, does it append or does it in increment the size?"
3316,12905,12930,Correct Semantics,It's a pointer to an int.
3316,13045,13177,Unsure,"Uh, that's where, so that's where I was confused. I guess it's an int array that would be the type of it, what I would assume it is."
3316,13045,13177,Correct Semantics,"Uh, that's where, so that's where I was confused. I guess it's an int array that would be the type of it, what I would assume it is."
3316,13259,13345,Attribution of Confusion,"and then you try to add an int to that int array, which is I think what tripped me up."
3316,14015,14092,Incorrect Semantics,"so then this would be, it would be a pointer to two then is what I'm assuming"
3316,14094,14137,Correct Semantics,"or ah no, I guess, is it a pointer to four?"
3316,14387,14602,Mental Model,"I was thinking something along the lines of like incrementing, like a, like a stack I guess, and one being like a, like an increment of that stack is such that you could go to the next element in the array that way."
3316,16155,16231,Sure, This is something I'm more familiar with where you access it by the element
3316,16155,16231,Previously Seen, This is something I'm more familiar with where you access it by the element
3316,16240,16341,Apparent Contradiction, the pointers don't really trip me up because pointers are I've been working with them for awhile now
3316,16240,16341,Previously Used, the pointers don't really trip me up because pointers are I've been working with them for awhile now
3316,16240,16341,Sure, the pointers don't really trip me up because pointers are I've been working with them for awhile now
3316,16746,16761,Non-standard terminology,operation order
3316,16762,16790,Apparent Contradiction,I evaluated it left to right
3316,16804,16857,Inferring Semantics from Reasoning,"I guess that you can't, you can't do it any other way"
3316,17071,17159,Counterfactual Semantics,I would be curious if it could do something like this [puts parentheses around (V1 - 2)]
3316,17071,17159,Precedence,I would be curious if it could do something like this [puts parentheses around (V1 - 2)]
3316,17059,17372,Visual Reference,"Um, I guess I would be curious if it could do something like this [puts parentheses around (V1 - 2)]. Uh, um, but based on how it is written, I would, I would say that first the increment operator acts on V1 and then we subtract two. And that's how I would read it. And that's what I assume is the correct answer."
3316,17059,17372,Inferring Semantics from Reasoning,"Um, I guess I would be curious if it could do something like this [puts parentheses around (V1 - 2)]. Uh, um, but based on how it is written, I would, I would say that first the increment operator acts on V1 and then we subtract two. And that's how I would read it. And that's what I assume is the correct answer."
3316,16621,17372,Discussion Question,"Subject:            27:57          Um, other than did I get it right? I don't think so. Um, I, I guess I'm interested in the operation order I evaluated it left to right. But I know, I guess that you can't, you can't do it any other way. So it would be, it would be what, I assume it's one at the end of the XXX evaluation.

Interviewer:        28:20          But what do you mean by evaluation order?

Subject:            28:23          Um, I guess I would be curious if it could do something like this [puts parentheses around (V1 - 2)]. Uh, um, but based on how it is written, I would, I would say that first the increment operator acts on V1 and then we subtract two. And that's how I would read it. And that's what I assume is the correct answer."
3316,18076,18314,Unsure,"so in that case, I guess it would evaluate V1, it would, V2 would evaluate to, um, let's see it's two, V2 would evaluate to zero and then V1 would be equal to three in that example? Is that how that would work? Or am I getting that wrong?"
3316,18076,18314,Counterfactual Semantics,"so in that case, I guess it would evaluate V1, it would, V2 would evaluate to, um, let's see it's two, V2 would evaluate to zero and then V1 would be equal to three in that example? Is that how that would work? Or am I getting that wrong?"
3316,17886,18314,Discussion Question,"Subject:            29:21          Yes, a pre incremented and post increment, right?

Interviewer:        29:24          Exactly

Subject:            29:24          Is what it's called? Um, so in that case, I guess it would evaluate V1, it would, V2 would evaluate to, um, let's see it's two, V2 would evaluate to zero and then V1 would be equal to three in that example? Is that how that would work? Or am I getting that wrong?"
3316,18709,18739,Surprising comment,you got this one totally right
3316,19157,19455,C Experience,"No, I don't think so. Uh, I did. The only behavior I'd be interested in is if for some reason C rounds when you, when you slice something, um, which I wouldn't expect to happen based on my experience with C plus plus. So that's, I, I just assumed that it's one that just slices off the the decimal."
3316,19157,19455,C vs C++,"No, I don't think so. Uh, I did. The only behavior I'd be interested in is if for some reason C rounds when you, when you slice something, um, which I wouldn't expect to happen based on my experience with C plus plus. So that's, I, I just assumed that it's one that just slices off the the decimal."
3316,19157,19455,Unsure,"No, I don't think so. Uh, I did. The only behavior I'd be interested in is if for some reason C rounds when you, when you slice something, um, which I wouldn't expect to happen based on my experience with C plus plus. So that's, I, I just assumed that it's one that just slices off the the decimal."
3316,19157,19455,Counterfactual Semantics,"No, I don't think so. Uh, I did. The only behavior I'd be interested in is if for some reason C rounds when you, when you slice something, um, which I wouldn't expect to happen based on my experience with C plus plus. So that's, I, I just assumed that it's one that just slices off the the decimal."
3316,19122,19455,Discussion Question,"Subject:            30:28          No, I don't think so. Uh, I did. The only behavior I'd be interested in is if for some reason C rounds when you, when you slice something, um, which I wouldn't expect to happen based on my experience with C plus plus. So that's, I, I just assumed that it's one that just slices off the the decimal."
3316,20083,20170,Matlab,"that doesn't really happen in uh, I started programming my programming career in Matlab"
3316,20083,20170,Contrasting different languages,"that doesn't really happen in uh, I started programming my programming career in Matlab"
3316,19855,20170,Learned from Class," I was taught that in the class, I think first, um, it's the, I think my first experience with C plus plus was the data structures course [at university]. Um, and I think that was one of the things they drove home because that, that doesn't really happen in uh, I started programming my programming career in Matlab"
3316,20241,20282,Long ago,I haven't programmed in Matlab since then
3316,20241,20282,Matlab,I haven't programmed in Matlab since then
3316,20241,20461,Static vs Dynamic type-checking,"I haven't programmed in Matlab since then and I'm not sure if that language is statically typed or not, but I know in python you could do something like this and it would be, I think, fine because it's dynamically typed."
3316,20478,20655,Correct Semantics,"when I, when I learned it, a professor made sure to tell us that if you try and assign it a float to an an int, you're gonna drop the decimal part. Yeah, you're going to lose it"
3316,20478,20655,Learned from Class,"when I, when I learned it, a professor made sure to tell us that if you try and assign it a float to an an int, you're gonna drop the decimal part. Yeah, you're going to lose it"
3316,21591,21644,Question about Semantics,can you evaluate an integer greater than zero as true
3316,21788,21831,Correct Semantics,"zero would be false in my, in my assumption"
3316,21788,21831,Unsure,"zero would be false in my, in my assumption"
3316,21842,21853,Correct Semantics,one is true
3316,21870,21962,Question about Semantics, I'm curious is if they treat numbers greater than one also as true because they're not zero
3316,21870,21962,Correct Semantics, I'm curious is if they treat numbers greater than one also as true because they're not zero
3316,21520,21962,Discussion Question,"Subject:            32:47          Um, my question on this one, is it, can you evaluate an integer greater than zero as true I guess.

Interviewer:        32:57          Okay. Um, is there something special about zero or?

Subject:            33:02          Uh, well, zero would be false in my, in my assumption. And then one is true and then I will, I'm curious is if they treat numbers greater than one also as true because they're not zero"
3316,22354,22489,Incorrect Semantics,"I was curious if, if, if negative numbers would be like a falsehood or a, again, it would be another behavior you'd have to account for"
3316,22354,22489,Unsure,"I was curious if, if, if negative numbers would be like a falsehood or a, again, it would be another behavior you'd have to account for"
3316,22500,22553,Relying on Correctness of Example,"based on this example, I assume you can evaluate this"
3316,22581,22953,Incorrect Semantics,"I would guess two is false because it's not zero or one, it doesn't have an assigned value and that's how I think I would approach it as somebody designing a language where if I was going to reserve some numbers for conditionals, I wouldn't want to have a huge range of them because you could just arbitrarily assign them and I think that would be kind of a waste, I guess"
3316,22290,22954,Design Concerns,"Subject:            33:30          I had while I was saying it, I was curious if, if, if negative numbers would be like a falsehood or a, again, it would be another behavior you'd have to account for. I, I, I, based on this example, I assume you can evaluate this, so I, I'm guessing two is I would guess two is false because it's not zero or one, it doesn't have an assigned value and that's how I think I would approach it as somebody designing a language where if I was going to reserve some numbers for conditionals, I wouldn't want to have a huge range of them because you could just arbitrarily assign them and I think that would be kind of a waste, I guess."
3316,23060,23205,Inferring Semantics from Reasoning,"if two was, two was true and the rest of the natural numbers were true, then I would, I guess negative numbers, I will probably say they're false"
3316,23060,23205,Incorrect Semantics,"if two was, two was true and the rest of the natural numbers were true, then I would, I guess negative numbers, I will probably say they're false"
3316,23060,23205,Unsure,"if two was, two was true and the rest of the natural numbers were true, then I would, I guess negative numbers, I will probably say they're false"
3316,23397,23547,Incorrect Semantics,"that would make sense if they, if we have a range of natural numbers that are positive and then we have a range of numbers that are negative and false"
3316,21555,23548,Boolean Value of Integer,"Um, my question on this one, is it, can you evaluate an integer greater than zero as true I guess.

Interviewer:        32:57          Okay. Um, is there something special about zero or?

Subject:            33:02          Uh, well, zero would be false in my, in my assumption. And then one is true and then I will, I'm curious is if they treat numbers greater than one also as true because they're not zero

Interviewer:        33:17          or one, which would be true.

Subject:            33:18          Yeah.

Interviewer:        33:18          Yeah, yeah, yeah. Um, out of curiosity, before we talk about it, um, have you ever thought about, uh, if, if that would be different from like negative numbers or anything like that?

Subject:            33:30          I had while I was saying it, I was curious if, if, if negative numbers would be like a falsehood or a, again, it would be another behavior you'd have to account for. I, I, I, based on this example, I assume you can evaluate this, so I, I'm guessing two is I would guess two is false because it's not zero or one, it doesn't have an assigned value and that's how I think I would approach it as somebody designing a language where if I was going to reserve some numbers for conditionals, I wouldn't want to have a huge range of them because you could just arbitrarily assign them and I think that would be kind of a waste, I guess.

Interviewer:        34:10          Sure. Yeah.

Subject:            34:11          Um, but, uh, if, if, if two was, two was true and the rest of the natural numbers were true, then I would, I guess negative numbers, I will probably say they're false. Maybe that's a, maybe I'm labeling the negative numbers harshly there, but

Interviewer:        34:34          Discriminating against them

Subject:            34:35          but, uh, that, that would make sense if they, if we have a range of natural numbers that are positive and then we have a range of numbers that are negative and false."
3316,22071,23548,Inferring Semantics from Reasoning,"Interviewer:        33:18          Yeah, yeah, yeah. Um, out of curiosity, before we talk about it, um, have you ever thought about, uh, if, if that would be different from like negative numbers or anything like that?

Subject:            33:30          I had while I was saying it, I was curious if, if, if negative numbers would be like a falsehood or a, again, it would be another behavior you'd have to account for. I, I, I, based on this example, I assume you can evaluate this, so I, I'm guessing two is I would guess two is false because it's not zero or one, it doesn't have an assigned value and that's how I think I would approach it as somebody designing a language where if I was going to reserve some numbers for conditionals, I wouldn't want to have a huge range of them because you could just arbitrarily assign them and I think that would be kind of a waste, I guess.

Interviewer:        34:10          Sure. Yeah.

Subject:            34:11          Um, but, uh, if, if, if two was, two was true and the rest of the natural numbers were true, then I would, I guess negative numbers, I will probably say they're false. Maybe that's a, maybe I'm labeling the negative numbers harshly there, but

Interviewer:        34:34          Discriminating against them

Subject:            34:35          but, uh, that, that would make sense if they, if we have a range of natural numbers that are positive and then we have a range of numbers that are negative and false."
3316,25323,25381,Caught Own Mistake After Prompted,"This is true. So I would, I would change my answer to six."
3316,25640,26131,Caught Own Mistake After Prompted,"I would do this operation first where we're comparing a false and a true value. Um, so for that, for that comparison or for that, and to be true, they both have to be true. So then the result of that would be false. So now we're a doing a logical or between a false and a true value. So there just has to be one true value there. So that would return true. Therefore, this conditional would be true and that V1 would be equal to six because that's where the true part of that conditional is."
3316,25640,26131,Correct Semantics,"I would do this operation first where we're comparing a false and a true value. Um, so for that, for that comparison or for that, and to be true, they both have to be true. So then the result of that would be false. So now we're a doing a logical or between a false and a true value. So there just has to be one true value there. So that would return true. Therefore, this conditional would be true and that V1 would be equal to six because that's where the true part of that conditional is."
3316,26364,26873,Unsure,"Uh, I don't. I guess it's uh, it's something that I just assumed intuitively uh and maybe maybe I was wrong, but um, generally when I'm evaluating, uh, when I think about it, I start to get iffy I guess, um, but I, I guess I like to evaluate from the left to the right. Um, and that's, that's, I don't think I can explain why I do that and I may or may not have learned that at some point or learned it falsely or assumed it falsely. But, um, that's, that's how I would approach something like that. Um, yeah."
3316,26364,26873,Correct for Wrong Reasons,"Uh, I don't. I guess it's uh, it's something that I just assumed intuitively uh and maybe maybe I was wrong, but um, generally when I'm evaluating, uh, when I think about it, I start to get iffy I guess, um, but I, I guess I like to evaluate from the left to the right. Um, and that's, that's, I don't think I can explain why I do that and I may or may not have learned that at some point or learned it falsely or assumed it falsely. But, um, that's, that's how I would approach something like that. Um, yeah."
3316,28155,28250,Inferring Semantics from Reasoning,if it's an integer then it doesn't need to really represent that leading zero when it stores it
3316,27986,28587,Multiple Possible Semantics,"Uh, is it, is it a valid assigning zero. One, three there. Um, I, I, I assumed that it just, it chopped off the, the, the leading zero when it prints it out because it, if it's an integer then it doesn't need to really represent that leading zero when it stores it. So, um, the, the two options I'm thinking is either that it's an error, they wouldn't want you to do something like that for whatever reason. They don't want you to leave leading zeros in. But I could also see them, like if you're, if you're taking from a, like a larger thing and you want to make it equal to an integer, I don't know."
3316,27986,28587,Unsure,"Uh, is it, is it a valid assigning zero. One, three there. Um, I, I, I assumed that it just, it chopped off the, the, the leading zero when it prints it out because it, if it's an integer then it doesn't need to really represent that leading zero when it stores it. So, um, the, the two options I'm thinking is either that it's an error, they wouldn't want you to do something like that for whatever reason. They don't want you to leave leading zeros in. But I could also see them, like if you're, if you're taking from a, like a larger thing and you want to make it equal to an integer, I don't know."
3316,27986,28587,Questioning Program Validity,"Uh, is it, is it a valid assigning zero. One, three there. Um, I, I, I assumed that it just, it chopped off the, the, the leading zero when it prints it out because it, if it's an integer then it doesn't need to really represent that leading zero when it stores it. So, um, the, the two options I'm thinking is either that it's an error, they wouldn't want you to do something like that for whatever reason. They don't want you to leave leading zeros in. But I could also see them, like if you're, if you're taking from a, like a larger thing and you want to make it equal to an integer, I don't know."
3316,27986,28587,Incorrect Semantics,"Uh, is it, is it a valid assigning zero. One, three there. Um, I, I, I assumed that it just, it chopped off the, the, the leading zero when it prints it out because it, if it's an integer then it doesn't need to really represent that leading zero when it stores it. So, um, the, the two options I'm thinking is either that it's an error, they wouldn't want you to do something like that for whatever reason. They don't want you to leave leading zeros in. But I could also see them, like if you're, if you're taking from a, like a larger thing and you want to make it equal to an integer, I don't know."
3316,28719,29218,Inferring Semantics from Reasoning,"Like if you were, if you programmatically like taking some texts maybe, and it's, and it's represented like they, they, they represented as like eight, eight numbers no matter what it is.

Interviewer:        40:23          Oh, I see. Like a fixed width.

Subject:            40:25          Yeah, fixed width. And if you're reading something like that and you wanted that to be an int and sure I would, I would expect them to allow you to do that. And I guess it's more I'm curious as to what it is."
3316,28975,29218,Language Expectations,"Subject:            40:25          Yeah, fixed width. And if you're reading something like that and you wanted that to be an int and sure I would, I would expect them to allow you to do that. And I guess it's more I'm curious as to what it is."
3316,27950,29218,Discussion Question,"
Subject:            39:26          Uh, is it, is it a valid assigning zero. One, three there. Um, I, I, I assumed that it just, it chopped off the, the, the leading zero when it prints it out because it, if it's an integer then it doesn't need to really represent that leading zero when it stores it. So, um, the, the two options I'm thinking is either that it's an error, they wouldn't want you to do something like that for whatever reason. They don't want you to leave leading zeros in. But I could also see them, like if you're, if you're taking from a, like a larger thing and you want to make it equal to an integer, I don't know.

Interviewer:        40:08          Um, what do you mean if you're taking from a larger thing?

Subject:            40:11          Like if you were, if you programmatically like taking some texts maybe, and it's, and it's represented like they, they, they represented as like eight, eight numbers no matter what it is.

Interviewer:        40:23          Oh, I see. Like a fixed width.

Subject:            40:25          Yeah, fixed width. And if you're reading something like that and you wanted that to be an int and sure I would, I would expect them to allow you to do that. And I guess it's more I'm curious as to what it is."
3316,29814,29849,Did Not Catch Own Mistake After Prompted,So it would still print 13 or zero?
3316,30012,30029,Correct Semantics,Would it print 11
3316,30012,30029,Unsure,Would it print 11
3316,29808,30030,Multiple Possible Semantics,"Okay. So it would still print 13 or zero? One three then would been zero one three or would it print the would, would it be the octal conversion? So would it be something like a three plus eight? Now 11. Would it print 11?"
3316,29850,30030,Caught Own Mistake After Prompted,"One three then would been zero one three or would it print the would, would it be the octal conversion? So would it be something like a three plus eight? Now 11. Would it print 11?"
3316,29773,30030,Discussion Question,"Subject:            41:07          Okay. So it would still print 13 or zero? One three then would been zero one three or would it print the would, would it be the octal conversion? So would it be something like a three plus eight? Now 11. Would it print 11?"
3316,31446,31492,Sure," I, I feel confident about this, this problem."
3316,31497,31736,Top-down comprehension,"I think I almost got tripped up when I, when I forgot that it was, it was using the value of the last element as the index of the, the element that you're kind of assigning to a or a or a or I assumed it, it wasn't changing but it was. So."
3316,31497,31736,Attribution of Confusion,"I think I almost got tripped up when I, when I forgot that it was, it was using the value of the last element as the index of the, the element that you're kind of assigning to a or a or a or I assumed it, it wasn't changing but it was. So."
3316,31356,31736,Cognitive Load,"Okay. Sure. Um, let's see. Uh, I don't, I don't think I really noticed any maybes on this. I, I feel confident about this, this problem. Um, I think I almost got tripped up when I, when I forgot that it was, it was using the value of the last element as the index of the, the element that you're kind of assigning to a or a or a or I assumed it, it wasn't changing but it was. So."
3316,32252,32346,Snippet Value Judgement,I would just decrement normally as opposed to using the last element of the array as an index.
3316,31879,32447,Attribution of Confusion,"Um, I think I just kinda, I, while I evaluated it, I kind of just forgot about it. Um, I think I, I don't, I don't think I normally use, like, if I were, if I was to do something like that, I think I would, I would go V, uh, like, use an index variable itself. And then, um, if I wanted to, I would assign it to, to the last, use the last element here, and then the index, I would just decrement normally as opposed to using the last element of the array as an index. I think that's where the confusing part is for me or where the, where it tripped me up a little bit."
3316,31879,32447,Alternative Idioms,"Um, I think I just kinda, I, while I evaluated it, I kind of just forgot about it. Um, I think I, I don't, I don't think I normally use, like, if I were, if I was to do something like that, I think I would, I would go V, uh, like, use an index variable itself. And then, um, if I wanted to, I would assign it to, to the last, use the last element here, and then the index, I would just decrement normally as opposed to using the last element of the array as an index. I think that's where the confusing part is for me or where the, where it tripped me up a little bit."
3316,31879,32447,Would Have Written it Differently,"Um, I think I just kinda, I, while I evaluated it, I kind of just forgot about it. Um, I think I, I don't, I don't think I normally use, like, if I were, if I was to do something like that, I think I would, I would go V, uh, like, use an index variable itself. And then, um, if I wanted to, I would assign it to, to the last, use the last element here, and then the index, I would just decrement normally as opposed to using the last element of the array as an index. I think that's where the confusing part is for me or where the, where it tripped me up a little bit."
3316,32924,32951,Cognitive Load,It's a lot to keep track of
3316,32664,33349,Ambiguous Readability,"
Subject:            44:15          I think it would be more readable. Um, and that that's mostly it. I think, uh, um, it's, it's easier to predict the, you don't have to think about whether, like three minus this last element that's also getting decremented. It's a lot to keep track of, um, that a computer doesn't really have a problem with. But if you're, if you're just looking at a couple of lines of code, my, my, um, intuition when I'm writing is that it should be at, you could understand it if it's not really complicated and you should be able to understand it, like at a glance, I'm at least given the general structure of it. So that's why I, I think I would use an index."
3316,33255,33349,Top-down comprehension,"I'm at least given the general structure of it. So that's why I, I think I would use an index."
4304,589,815,Simple,"Okay. This is pretty straight forward. There is just a variable that's being initialized and then print it out. It doesn't look like there's anything unexpected here. Uh, so I'm going to say that the output should just be one."
4304,999,1080,Amusement,Still three Oh six. [laughter]. So it's a little difficult to get precision there
4304,1502,1559,History Lesson, this would have been true back in the earliest days of C
4304,1647,1887,Boundary Testing,"I mean, there could be conditions where they wouldn't be, they wouldn't do this, you know, printf is a standard library function, but I think within the constraints that you've set forward, it's like unlikely printf will behave unexpectedly"
4304,1424,1898,printf,"Subject:            00:58          Okay, Uh, because this is, uh, this is, um, this would have been true back in the earliest days of C. It's, uh, um, this kind of, this, there's no behaviors here that would be unexpected. I mean, there could be conditions where they wouldn't be, they wouldn't do this, you know, printf is a standard library function, but I think within the constraints that you've set forward, it's like unlikely printf will behave unexpectedly. So, yeah."
4304,2556,2977,Paranoia,"Uh, so, um, just because there's a conditional, I might, I might, although this one seems pretty clear that it's not going to be evaluated, I guess that if that was an [letter] Oh, uh, well that was a global variable, but like, if this is the entire scope of the code, there's nothing else before, after, it's hard to say that there's anything that I can't think of any situation where it wouldn't be come out with three."
4304,2556,2977,Boundary Testing,"Uh, so, um, just because there's a conditional, I might, I might, although this one seems pretty clear that it's not going to be evaluated, I guess that if that was an [letter] Oh, uh, well that was a global variable, but like, if this is the entire scope of the code, there's nothing else before, after, it's hard to say that there's anything that I can't think of any situation where it wouldn't be come out with three."
4304,3286,3771,Compiler Optimizations," Okay, okay. Ah, but in general, like, you know when give advice to people, um, I tell them to avoid branches if like you know. If you can write codes, that's like, uh, like, because you end up having to test those branches and, uh, this would be, this is code that's a little harder to test. I don't know if you could test it even because you can't inject anything. So there's no way to, there's no way for this code to ever evaluate this. Maybe the compiler would even get rid of it."
4304,3286,3771,Branch testing," Okay, okay. Ah, but in general, like, you know when give advice to people, um, I tell them to avoid branches if like you know. If you can write codes, that's like, uh, like, because you end up having to test those branches and, uh, this would be, this is code that's a little harder to test. I don't know if you could test it even because you can't inject anything. So there's no way to, there's no way for this code to ever evaluate this. Maybe the compiler would even get rid of it."
4304,3287,3771,Would Have Written it Differently,"Okay, okay. Ah, but in general, like, you know when give advice to people, um, I tell them to avoid branches if like you know. If you can write codes, that's like, uh, like, because you end up having to test those branches and, uh, this would be, this is code that's a little harder to test. I don't know if you could test it even because you can't inject anything. So there's no way to, there's no way for this code to ever evaluate this. Maybe the compiler would even get rid of it."
4304,4457,4545,Correct Semantics,"V1 is going, so V2 is going to equal 1 and V1 is going to equal 2 after that expression."
4304,4546,4585,Incorrect Semantics,"And so it's going to print out one, two"
4304,4782,4904,Uncommon pattern,"so just because the comma operator is not used very often, and I, I'm pretty sure I have it right, but it's in parentheses"
4304,4906,5070,Paranoia,"Uh, I sup[...pose], Maybe I could make a mistake here. I don't think I did. Um, uh, yeah, I'm still pretty comfortable. Who knows. I could be making a mistake, but,"
4304,5282,5373,Not Previously Written,"I think she, I don't think, I can't think of a time when I've ever used the comma operator."
4304,5468,5530,Functional Programming,Maybe like in some functional program you might want to use it
4304,5585,5638,Ambiguous Readability,this is like deliberately obfuscated in some sentence
4304,5674,5805,Potential Confusing Constructs,maybe people would not know that that assignment returns the value that the assignment operator returns to value that it's assigned
4304,6771,6782,Non-standard terminology,evaluations
4304,6241,6807,Lisp,"I just, I think that like back when I first started learning, C, I remember like the, um, I always came up in like the precedence, like the list of operators and I think it was, to me it was salient because it seems so un-, not useful. Um, I'm sure that actually probably I like, I just can't think of it. I'm sure there are cases where the operator comma is really important. It does seem, it feels more like the kind of thing you'd see in lisp or something or you can just, you want to basically chain a whole bunch of, uh, um, evaluations into the same statement."
4304,6241,6807,Learned by Reading Book,"I just, I think that like back when I first started learning, C, I remember like the, um, I always came up in like the precedence, like the list of operators and I think it was, to me it was salient because it seems so un-, not useful. Um, I'm sure that actually probably I like, I just can't think of it. I'm sure there are cases where the operator comma is really important. It does seem, it feels more like the kind of thing you'd see in lisp or something or you can just, you want to basically chain a whole bunch of, uh, um, evaluations into the same statement."
4304,6241,6807,Remember,"I just, I think that like back when I first started learning, C, I remember like the, um, I always came up in like the precedence, like the list of operators and I think it was, to me it was salient because it seems so un-, not useful. Um, I'm sure that actually probably I like, I just can't think of it. I'm sure there are cases where the operator comma is really important. It does seem, it feels more like the kind of thing you'd see in lisp or something or you can just, you want to basically chain a whole bunch of, uh, um, evaluations into the same statement."
4304,7351,7405,Notices Transformation Incorrectly,"This, this is virtually identical to the second sample"
4304,7667,7754,Trick Question,"I feel like there's a progression and this seems to be a step backwards, so, [laughter]"
4304,7667,7754,Amusement,"I feel like there's a progression and this seems to be a step backwards, so, [laughter]"
4304,8023,8038,Non-standard terminology,two assignments
4304,8212,8263,Incorrect Semantics," So we will do the plus plus V2, which will be four"
4304,8852,8996,Complex,"the complexity is growing here. I'm uh, um, and I, I um, I guess maybe I'm a little, a little less sure than five. Maybe I should have said four"
4304,9413,9475,Math is easy or hard,I'm doing more math steps and it's very easy to make a mistake
4304,9413,9621,Surprising comment,"I'm doing more math steps and it's very easy to make a mistake. Uh, even, even if I have like the, um, just like a computer, I could have like the operator, right. But like get the wrong value in a place. So."
4304,10079,10245,Complex,"Okay. This one's a little bit more tricky because, uh, we have v one is equal to two, V2 is equal to three plus V1 plus plus. V1 plus plus returns the original value."
4304,10312,10448,Double Check," So v one is going to be three and so we're going to print out, um, three and five, uh, double check to make sure that makes sense to me"
4304,10688,10904,Surprising comment,"Uh, I guess one of the thing I noticed here is that like the um, the uh, um, the order, I have to get the order right here and like the, um, I could have confused which one, like whether the five or three comes first"
4304,10688,10904,Potential Confusing Constructs,"Uh, I guess one of the thing I noticed here is that like the um, the uh, um, the order, I have to get the order right here and like the, um, I could have confused which one, like whether the five or three comes first"
4304,11584,11689,Double Check,"Um double checking to see that it makes sense because uh, this is double equals sorts and equality tests."
4304,11992,12205,Sure," These, uh, these tests are all very, there's only, there's only two possible paths through here and, uh, it's either three or five. And I see no, don't, I don't see any way for it to be come up to come out three."
4304,11992,12205,Simple," These, uh, these tests are all very, there's only, there's only two possible paths through here and, uh, it's either three or five. And I see no, don't, I don't see any way for it to be come up to come out three."
4304,13115,13181,Simple," It's, it's, there's only one path. There's only two choices here."
4304,13081,13378,Notices Transformation Correctly,"Because it's essentially the same. It's, it's, there's only one path. There's only two choices here. It's either going to be two or four and in order for it to be two, this would have to evaluate to true. And we just set it equal to zero. So it seems, it seems very isomorphic to the previous one."
4304,13378,13529,Potential Confusing Constructs," I guess the, the question mark operator. Yeah. Um, uh, syntactically it's equivalent to an if statement... Just a little bit. A little more confusing."
4304,16477,16514,Simple,It seemed perfectly straight forward.
4304,16755,16981,Potential Confusing Constructs," I guess, uh, maybe if people aren't familiar with the way that, while actually here, it doesn't really matter whether you take the, you don't take the result of the increments. So you just need to know that it does increment."
4304,17174,18227,Pre vs Post-increment,"Yeah, like, like, at [company], we often like they used to be a preference for plus plus, pre-increment over post-increment. And actually that, that's like a, I mean, I mean from my assembly language years I know that like there was like those, uh, this is actually kind of an odd thing to worry about at a language level and it comes from the hardware, like the, there in, uh, many processors, there was a read on increment and it also is an atomic operation, so this was like, like c plus plus has this weird. I still has like a very strong history of, it's like association with the, with the um, like low level program. It's meant for implementing operating systems. Yeah, for sure. And so a lot of the code has like, you know, the operators are all like things that are one-to-one with what's in the ALU and this whole pre-increment post-increment, which is like, uh many languages copied it. But it really comes from the hardware would do this. And other than that, the only other thing was like the possibility of having the if execute, but yeah."
4304,17174,18227,History Lesson,"Yeah, like, like, at [company], we often like they used to be a preference for plus plus, pre-increment over post-increment. And actually that, that's like a, I mean, I mean from my assembly language years I know that like there was like those, uh, this is actually kind of an odd thing to worry about at a language level and it comes from the hardware, like the, there in, uh, many processors, there was a read on increment and it also is an atomic operation, so this was like, like c plus plus has this weird. I still has like a very strong history of, it's like association with the, with the um, like low level program. It's meant for implementing operating systems. Yeah, for sure. And so a lot of the code has like, you know, the operators are all like things that are one-to-one with what's in the ALU and this whole pre-increment post-increment, which is like, uh many languages copied it. But it really comes from the hardware would do this. And other than that, the only other thing was like the possibility of having the if execute, but yeah."
4304,19142,20295,History Lesson,"I guess the first thing I like, you know, I was like, oh, these are not initialized. And it's, is it possible you would get to the point here where like that you are asking to print out a value that isn't initialized and whether or not an uninitialized value is defined is depends on them. Like a, it depends on the C, the, uh, the flavor of C that you're actually working in. Um, actually I don't know for even today, I'm not sure if like the default, initiali... I think that since um in c plus plus 11, they, uh, made sure that like, um, these are default initialized, so they'd be zero. But that's not guaranteed in the early, like early versions of C this is a frequent cause of errors is like people didn't initialize their variables, so they get, or they might either be assigned something by, it's implemation, implementation defined. And so you could have like, um, random values. Um, but here it seems like every code path does do an assignment to both of the variables. And so these are all kind of all kind of the same flavor at this point. Where you like and here, um, the assignment of this, it can only be either this value of that value."
4304,19142,20295,Uninitialized,"I guess the first thing I like, you know, I was like, oh, these are not initialized. And it's, is it possible you would get to the point here where like that you are asking to print out a value that isn't initialized and whether or not an uninitialized value is defined is depends on them. Like a, it depends on the C, the, uh, the flavor of C that you're actually working in. Um, actually I don't know for even today, I'm not sure if like the default, initiali... I think that since um in c plus plus 11, they, uh, made sure that like, um, these are default initialized, so they'd be zero. But that's not guaranteed in the early, like early versions of C this is a frequent cause of errors is like people didn't initialize their variables, so they get, or they might either be assigned something by, it's implemation, implementation defined. And so you could have like, um, random values. Um, but here it seems like every code path does do an assignment to both of the variables. And so these are all kind of all kind of the same flavor at this point. Where you like and here, um, the assignment of this, it can only be either this value of that value."
4304,20339,20420,Correct Semantics,"Well the comma operator's almost, it's definitely going to return the last value."
4304,20339,20472,Inferring Semantics from Reasoning,"Well the comma operator's almost, it's definitely going to return the last value. It wouldn't make sense to return something earlier."
4304,20339,20660,Contrasting different languages,"Well the comma operator's almost, it's definitely going to return the last value. It wouldn't make sense to return something earlier. I think that like is perhaps to related to like the association with lisp where you had like you can chain together a whole bunch of evaluations. And then return the last one, same thing."
4304,20339,20660,Lisp,"Well the comma operator's almost, it's definitely going to return the last value. It wouldn't make sense to return something earlier. I think that like is perhaps to related to like the association with lisp where you had like you can chain together a whole bunch of evaluations. And then return the last one, same thing."
4304,20661,20822,History Lesson,"Um, before the, um, uh, uh, it used to be that C functions would return the last evaluated expression. And maybe you could do something in one line or something."
4304,20661,20822,Design Concerns,"Um, before the, um, uh, uh, it used to be that C functions would return the last evaluated expression. And maybe you could do something in one line or something."
4304,23613,23909,Potential Confusing Constructs,"Although it's interesting. If you, the case here where if they took the parentheses off and you said V1 equals V2 equals one, comma two.

Interviewer:        27:45          Yeah.

Subject:            27:45          Uh, yeah. Okay. That would probably make me take pause for a second and say what?"
4304,24782,24815,Potential Confusing Constructs,I was expecting lots of pointers.
4304,24928,25100,Common Pattern,"Okay. But if you're doing, if you're doing two pointers and you were having them both run in parallel, it'd be very typical to use to comma operator to join the increments."
4304,25533,25667,Potential Confusing Constructs,"\I would, yeah. If you told me like if you did plus plus I comma and then something involving I, I would not know the answer to that.\"
4304,26243,26472,Potential Confusing Constructs," I wouldn't have known that. If you had an example that had that interaction between um, increment and comma, especially post increment, I would not have gotten that or at least you would've gotten a nice like one or two from me."
4304,26824,27135,Notices Transformation Incorrectly,"No. This one is almost exactly the same thing other than using the curly. It's, it's the same as the, one of the only ones without, and it was no increments. This one's pretty simple.

Interviewer:        30:33          Um, yeah.

Subject:            30:33          Curly braces are the only thing that's added."
4304,27366,27659,Simple,"Uh, I guess that they uh, the tricks here or like knowing that like, um, the semantics of the Or operator and a logical Or operator, uh, and the fact that, how, like what, what, what constitutes true and false in these contexts. Um, other than that it's pretty straight forward I guess the, um"
4304,27366,27659,Boolean Value of Integer,"Uh, I guess that they uh, the tricks here or like knowing that like, um, the semantics of the Or operator and a logical Or operator, uh, and the fact that, how, like what, what, what constitutes true and false in these contexts. Um, other than that it's pretty straight forward I guess the, um"
4304,27366,27659,Trick Question,"Uh, I guess that they uh, the tricks here or like knowing that like, um, the semantics of the Or operator and a logical Or operator, uh, and the fact that, how, like what, what, what constitutes true and false in these contexts. Um, other than that it's pretty straight forward I guess the, um"
4304,27972,28122,Potential Confusing Constructs,"what's an example of something that's not logical? And they said incrementing booleans. Cause you know, like here basically your incrementing booleans"
4304,27696,28122,Anecdote,"I guess if, if, if one of these values were like potentially be zero or either both cases here. I mean, are we always talking about like, like, um, I remember very early on in my career someone was saying like, uh, um, that C plus plus seems very logical to them and be like, what's an example of something that's not logical? And they said incrementing booleans. Cause you know, like here basically your incrementing booleans"
4304,27696,28122,Boolean Value of Integer,"I guess if, if, if one of these values were like potentially be zero or either both cases here. I mean, are we always talking about like, like, um, I remember very early on in my career someone was saying like, uh, um, that C plus plus seems very logical to them and be like, what's an example of something that's not logical? And they said incrementing booleans. Cause you know, like here basically your incrementing booleans"
4304,28206,28355,Contrasting different languages,"Like in, in most strongly typed languages. Yeah. You can't, you can't, you can assign them true or false. There's no such thing as plus plus booleans"
4304,28498,28959,Boolean Value of Integer,"Actually, I don't know if you like in like logically if you do, if you have a variable, a boolean x and you plus plus x and you do so until it overflows. Uh, is that, is that even defined behavior. I think that like, I don't know what the boolean and the storage of a boolean is typically either a, uh, int or a byte its, you know, think it's implementation defined. But if you keep incrementing is it actually store the value of that when you increment it. And"
4304,28498,28959,Multiple Possible Semantics,"Actually, I don't know if you like in like logically if you do, if you have a variable, a boolean x and you plus plus x and you do so until it overflows. Uh, is that, is that even defined behavior. I think that like, I don't know what the boolean and the storage of a boolean is typically either a, uh, int or a byte its, you know, think it's implementation defined. But if you keep incrementing is it actually store the value of that when you increment it. And"
4304,29057,29116,Multiple Possible Semantics,"So it's possible that plus, plus boolean could return false"
4304,29057,29116,Incorrect Semantics,"So it's possible that plus, plus boolean could return false"
4304,29057,29116,Surprising comment,"So it's possible that plus, plus boolean could return false"
4304,29372,30127,Java,"Yeah, I don't know if this is like requiring somebody who like, yeah, it's like what's one of those things where you just like, don't do that. And actually one thing I in a lot of ways, like, I did a lot of programming in Java and in fact, um, like, uh, when I was at [Former Company] working on translation software, we ported a very large library from C plus plus to Java. And, um, like you know Java was, was like, it was much slower and required us to think about everything much more carefully. And we ended up developing much better algorithms in Java, but then we'd back port them all to c plus plus and then we ended up with like, we could never, like we the Java would win for a short time and then people would be like, oh, that's a clever idea."
4304,29372,30127,Contrasting different languages,"Yeah, I don't know if this is like requiring somebody who like, yeah, it's like what's one of those things where you just like, don't do that. And actually one thing I in a lot of ways, like, I did a lot of programming in Java and in fact, um, like, uh, when I was at [Former Company] working on translation software, we ported a very large library from C plus plus to Java. And, um, like you know Java was, was like, it was much slower and required us to think about everything much more carefully. And we ended up developing much better algorithms in Java, but then we'd back port them all to c plus plus and then we ended up with like, we could never, like we the Java would win for a short time and then people would be like, oh, that's a clever idea."
4304,29372,30127,Anecdote,"Yeah, I don't know if this is like requiring somebody who like, yeah, it's like what's one of those things where you just like, don't do that. And actually one thing I in a lot of ways, like, I did a lot of programming in Java and in fact, um, like, uh, when I was at [Former Company] working on translation software, we ported a very large library from C plus plus to Java. And, um, like you know Java was, was like, it was much slower and required us to think about everything much more carefully. And we ended up developing much better algorithms in Java, but then we'd back port them all to c plus plus and then we ended up with like, we could never, like we the Java would win for a short time and then people would be like, oh, that's a clever idea."
4304,30164,31124,Anecdote,"That's put that in C and like the thing about Java, I was like, it was fast if you never did a new

Interviewer:        33:29          Oh right, yeah, it's the allocations.

Subject:            33:31          Uh, and it's very hard in, well basically you have to, you can use primitives, you can like there are ways in Java to like, you kind of do all your news up front and we would like develop object pools so that we would like reuse the things we, objects we've created, but then the problem is there's only, you're only allowed to have 2 billion objects in Java in the, in the JVM it's this hard coded number. And it's like, oh, that's a prob, like, I don't know why we had like, we actually did stuff that required more than 2 billion objects. Um, and so, but like in, uh, they fixed a lot of the language problems. Uh, it's a much cleaner, like the, you know, there's no point, there's a lot of things, but also that's a little bit more strongly typed."
4304,30164,31124,Contrasting different languages,"That's put that in C and like the thing about Java, I was like, it was fast if you never did a new

Interviewer:        33:29          Oh right, yeah, it's the allocations.

Subject:            33:31          Uh, and it's very hard in, well basically you have to, you can use primitives, you can like there are ways in Java to like, you kind of do all your news up front and we would like develop object pools so that we would like reuse the things we, objects we've created, but then the problem is there's only, you're only allowed to have 2 billion objects in Java in the, in the JVM it's this hard coded number. And it's like, oh, that's a prob, like, I don't know why we had like, we actually did stuff that required more than 2 billion objects. Um, and so, but like in, uh, they fixed a lot of the language problems. Uh, it's a much cleaner, like the, you know, there's no point, there's a lot of things, but also that's a little bit more strongly typed."
4304,30164,31124,Java,"That's put that in C and like the thing about Java, I was like, it was fast if you never did a new

Interviewer:        33:29          Oh right, yeah, it's the allocations.

Subject:            33:31          Uh, and it's very hard in, well basically you have to, you can use primitives, you can like there are ways in Java to like, you kind of do all your news up front and we would like develop object pools so that we would like reuse the things we, objects we've created, but then the problem is there's only, you're only allowed to have 2 billion objects in Java in the, in the JVM it's this hard coded number. And it's like, oh, that's a prob, like, I don't know why we had like, we actually did stuff that required more than 2 billion objects. Um, and so, but like in, uh, they fixed a lot of the language problems. Uh, it's a much cleaner, like the, you know, there's no point, there's a lot of things, but also that's a little bit more strongly typed."
4304,31161,32182,Experienced vs Inexperienced,"Uh, and uh, I felt like from a, you know somebody who like sees like, you know, like kind of like many programmers have this experience where you see like people who uh, like how much rope you give someone to hang themselves kind of problems. And like I felt like Java like was a much better place for somebody who's developing skills. It's safer, you can't do the same kinds of mistakes. And that's true. I mean like the, um, I still, I strongly, strongly more strongly typed languages. I think result in like, especially for people that are like developing the skills, like the, you know, working out what, we do a lot of python here. Um, and we know from our own, like this is kind of famous studies internally that like python has a much higher cost of support for like a large, we've studied like, you don't really know, like they, they never able to get to the bottom of why like a very large project in python has like is so much more difficult to, to maintain and, and uh, but they think it's something they have."
4304,31161,32182,Python,"Uh, and uh, I felt like from a, you know somebody who like sees like, you know, like kind of like many programmers have this experience where you see like people who uh, like how much rope you give someone to hang themselves kind of problems. And like I felt like Java like was a much better place for somebody who's developing skills. It's safer, you can't do the same kinds of mistakes. And that's true. I mean like the, um, I still, I strongly, strongly more strongly typed languages. I think result in like, especially for people that are like developing the skills, like the, you know, working out what, we do a lot of python here. Um, and we know from our own, like this is kind of famous studies internally that like python has a much higher cost of support for like a large, we've studied like, you don't really know, like they, they never able to get to the bottom of why like a very large project in python has like is so much more difficult to, to maintain and, and uh, but they think it's something they have."
4304,31161,32182,Java,"Uh, and uh, I felt like from a, you know somebody who like sees like, you know, like kind of like many programmers have this experience where you see like people who uh, like how much rope you give someone to hang themselves kind of problems. And like I felt like Java like was a much better place for somebody who's developing skills. It's safer, you can't do the same kinds of mistakes. And that's true. I mean like the, um, I still, I strongly, strongly more strongly typed languages. I think result in like, especially for people that are like developing the skills, like the, you know, working out what, we do a lot of python here. Um, and we know from our own, like this is kind of famous studies internally that like python has a much higher cost of support for like a large, we've studied like, you don't really know, like they, they never able to get to the bottom of why like a very large project in python has like is so much more difficult to, to maintain and, and uh, but they think it's something they have."
4304,31161,32182,Contrasting different languages,"Uh, and uh, I felt like from a, you know somebody who like sees like, you know, like kind of like many programmers have this experience where you see like people who uh, like how much rope you give someone to hang themselves kind of problems. And like I felt like Java like was a much better place for somebody who's developing skills. It's safer, you can't do the same kinds of mistakes. And that's true. I mean like the, um, I still, I strongly, strongly more strongly typed languages. I think result in like, especially for people that are like developing the skills, like the, you know, working out what, we do a lot of python here. Um, and we know from our own, like this is kind of famous studies internally that like python has a much higher cost of support for like a large, we've studied like, you don't really know, like they, they never able to get to the bottom of why like a very large project in python has like is so much more difficult to, to maintain and, and uh, but they think it's something they have."
4304,31161,32182,Anecdote,"Uh, and uh, I felt like from a, you know somebody who like sees like, you know, like kind of like many programmers have this experience where you see like people who uh, like how much rope you give someone to hang themselves kind of problems. And like I felt like Java like was a much better place for somebody who's developing skills. It's safer, you can't do the same kinds of mistakes. And that's true. I mean like the, um, I still, I strongly, strongly more strongly typed languages. I think result in like, especially for people that are like developing the skills, like the, you know, working out what, we do a lot of python here. Um, and we know from our own, like this is kind of famous studies internally that like python has a much higher cost of support for like a large, we've studied like, you don't really know, like they, they never able to get to the bottom of why like a very large project in python has like is so much more difficult to, to maintain and, and uh, but they think it's something they have."
4304,32219,32777,Static vs Dynamic type-checking,"Like there's a, there's apparently a large amount of documentation internally where they studied extensively some of the projects that were developed in python with a large team. And um, I think that like the, the um, yeah, the lack of, you don't, you don't have any static analysis you don't have, like, there's a lot of things that like you don't get when you have a, and it's true, like, you know, it kind of lowers the bar for people who are just starting out. You don't have to worry about and all of these things. But then, yeah, that price comes back."
4304,32219,32777,Experienced vs Inexperienced,"Like there's a, there's apparently a large amount of documentation internally where they studied extensively some of the projects that were developed in python with a large team. And um, I think that like the, the um, yeah, the lack of, you don't, you don't have any static analysis you don't have, like, there's a lot of things that like you don't get when you have a, and it's true, like, you know, it kind of lowers the bar for people who are just starting out. You don't have to worry about and all of these things. But then, yeah, that price comes back."
4304,32219,32777,Python,"Like there's a, there's apparently a large amount of documentation internally where they studied extensively some of the projects that were developed in python with a large team. And um, I think that like the, the um, yeah, the lack of, you don't, you don't have any static analysis you don't have, like, there's a lot of things that like you don't get when you have a, and it's true, like, you know, it kind of lowers the bar for people who are just starting out. You don't have to worry about and all of these things. But then, yeah, that price comes back."
4304,32219,32777,Anecdote,"Like there's a, there's apparently a large amount of documentation internally where they studied extensively some of the projects that were developed in python with a large team. And um, I think that like the, the um, yeah, the lack of, you don't, you don't have any static analysis you don't have, like, there's a lot of things that like you don't get when you have a, and it's true, like, you know, it kind of lowers the bar for people who are just starting out. You don't have to worry about and all of these things. But then, yeah, that price comes back."
4304,32974,35495,Java,"I think they actually, like there's been internal, I don't work on this. I know there's like the, um, there's, there's teams who have like really dig, dug in on this and there's been entire code bases that were ported from python to other languages.

Subject:            36:05          And we still have, I mean, you know, it's interesting cause I, you know, um, we still have a substantial install base set Java, of Java and we have, um, like I talked to like I think I know more languages and typ, I think maybe we'll just work on my language. I'm like kind of crossing back and forth. And I'm also like doing a lot of like the bridging between like a cliff to call. Like I end up calling c libraries from a python and we, uh, with SWIG for like, and I've been involved in some of that like, uh, in various projects. Sure. Um, and so yeah, I know the internals and I kind of like see like what, um, um, the different, the different kinds of probably I like the structure of language only takes you so far and like kind of tells you a little bit about what the problems are going to have.

Subject:            36:54          Um, and actually it's one of the things about c plus, but you'll hear people like say, Oh, I'm going to introduce another abstraction and to create a wrapper. And like that seems like it'd be the first thing that everybody wants to do for anything is to like introduce a new abstraction. And that's Kinda like a c plus plus chimerical nature is like you. Like it seems like that's it. It's odd that that seems like the thing to do. Uh, like in the or languages that are more formalized, you know, like, like in, in Java, uh, I think like I look at like cryptography or something like that. Like these, well it's very much depends on the developer teams too, but the, but um, Java has this whole like service provi, like you have like the very clean abstractions for what interfaces and the idea is that like, oh, this component will be provided.

Subject:            37:38          But that kind of leads all of these things kind of coalesced together because like the entire, you know, Java's class loader is very rich and the idea that like somebody is going to provide you a library, it's going to do the job that works. You know, at most projects at [company] are these fat binaries that we compile like, you know, millions of lines of code. Like every, like even like a simple, if you write the simple c plus plus program at [company], it's still almost a gigabyte because it's like we have"
4304,32974,35495,Contrasting different languages,"I think they actually, like there's been internal, I don't work on this. I know there's like the, um, there's, there's teams who have like really dig, dug in on this and there's been entire code bases that were ported from python to other languages.

Subject:            36:05          And we still have, I mean, you know, it's interesting cause I, you know, um, we still have a substantial install base set Java, of Java and we have, um, like I talked to like I think I know more languages and typ, I think maybe we'll just work on my language. I'm like kind of crossing back and forth. And I'm also like doing a lot of like the bridging between like a cliff to call. Like I end up calling c libraries from a python and we, uh, with SWIG for like, and I've been involved in some of that like, uh, in various projects. Sure. Um, and so yeah, I know the internals and I kind of like see like what, um, um, the different, the different kinds of probably I like the structure of language only takes you so far and like kind of tells you a little bit about what the problems are going to have.

Subject:            36:54          Um, and actually it's one of the things about c plus, but you'll hear people like say, Oh, I'm going to introduce another abstraction and to create a wrapper. And like that seems like it'd be the first thing that everybody wants to do for anything is to like introduce a new abstraction. And that's Kinda like a c plus plus chimerical nature is like you. Like it seems like that's it. It's odd that that seems like the thing to do. Uh, like in the or languages that are more formalized, you know, like, like in, in Java, uh, I think like I look at like cryptography or something like that. Like these, well it's very much depends on the developer teams too, but the, but um, Java has this whole like service provi, like you have like the very clean abstractions for what interfaces and the idea is that like, oh, this component will be provided.

Subject:            37:38          But that kind of leads all of these things kind of coalesced together because like the entire, you know, Java's class loader is very rich and the idea that like somebody is going to provide you a library, it's going to do the job that works. You know, at most projects at [company] are these fat binaries that we compile like, you know, millions of lines of code. Like every, like even like a simple, if you write the simple c plus plus program at [company], it's still almost a gigabyte because it's like we have"
4304,32974,35495,Anecdote,"I think they actually, like there's been internal, I don't work on this. I know there's like the, um, there's, there's teams who have like really dig, dug in on this and there's been entire code bases that were ported from python to other languages.

Subject:            36:05          And we still have, I mean, you know, it's interesting cause I, you know, um, we still have a substantial install base set Java, of Java and we have, um, like I talked to like I think I know more languages and typ, I think maybe we'll just work on my language. I'm like kind of crossing back and forth. And I'm also like doing a lot of like the bridging between like a cliff to call. Like I end up calling c libraries from a python and we, uh, with SWIG for like, and I've been involved in some of that like, uh, in various projects. Sure. Um, and so yeah, I know the internals and I kind of like see like what, um, um, the different, the different kinds of probably I like the structure of language only takes you so far and like kind of tells you a little bit about what the problems are going to have.

Subject:            36:54          Um, and actually it's one of the things about c plus, but you'll hear people like say, Oh, I'm going to introduce another abstraction and to create a wrapper. And like that seems like it'd be the first thing that everybody wants to do for anything is to like introduce a new abstraction. And that's Kinda like a c plus plus chimerical nature is like you. Like it seems like that's it. It's odd that that seems like the thing to do. Uh, like in the or languages that are more formalized, you know, like, like in, in Java, uh, I think like I look at like cryptography or something like that. Like these, well it's very much depends on the developer teams too, but the, but um, Java has this whole like service provi, like you have like the very clean abstractions for what interfaces and the idea is that like, oh, this component will be provided.

Subject:            37:38          But that kind of leads all of these things kind of coalesced together because like the entire, you know, Java's class loader is very rich and the idea that like somebody is going to provide you a library, it's going to do the job that works. You know, at most projects at [company] are these fat binaries that we compile like, you know, millions of lines of code. Like every, like even like a simple, if you write the simple c plus plus program at [company], it's still almost a gigabyte because it's like we have"
4304,32974,35495,Python,"I think they actually, like there's been internal, I don't work on this. I know there's like the, um, there's, there's teams who have like really dig, dug in on this and there's been entire code bases that were ported from python to other languages.

Subject:            36:05          And we still have, I mean, you know, it's interesting cause I, you know, um, we still have a substantial install base set Java, of Java and we have, um, like I talked to like I think I know more languages and typ, I think maybe we'll just work on my language. I'm like kind of crossing back and forth. And I'm also like doing a lot of like the bridging between like a cliff to call. Like I end up calling c libraries from a python and we, uh, with SWIG for like, and I've been involved in some of that like, uh, in various projects. Sure. Um, and so yeah, I know the internals and I kind of like see like what, um, um, the different, the different kinds of probably I like the structure of language only takes you so far and like kind of tells you a little bit about what the problems are going to have.

Subject:            36:54          Um, and actually it's one of the things about c plus, but you'll hear people like say, Oh, I'm going to introduce another abstraction and to create a wrapper. And like that seems like it'd be the first thing that everybody wants to do for anything is to like introduce a new abstraction. And that's Kinda like a c plus plus chimerical nature is like you. Like it seems like that's it. It's odd that that seems like the thing to do. Uh, like in the or languages that are more formalized, you know, like, like in, in Java, uh, I think like I look at like cryptography or something like that. Like these, well it's very much depends on the developer teams too, but the, but um, Java has this whole like service provi, like you have like the very clean abstractions for what interfaces and the idea is that like, oh, this component will be provided.

Subject:            37:38          But that kind of leads all of these things kind of coalesced together because like the entire, you know, Java's class loader is very rich and the idea that like somebody is going to provide you a library, it's going to do the job that works. You know, at most projects at [company] are these fat binaries that we compile like, you know, millions of lines of code. Like every, like even like a simple, if you write the simple c plus plus program at [company], it's still almost a gigabyte because it's like we have"
4304,35611,37325,Anecdote," Right, we build everything statically because uh, um, we don't have like C++ doesn't have, it doesn't even have language support for, um, the class loader, like verif like verifying your like using a particular object. I guess you're, if, if, uh, your advisor works on this, like there's a huge effort here to like have like verifiable builds, that's a fascinating area and like I think that

Interviewer:        38:29          that's actually might be exactly what he's doing.

Subject:            38:31          Okay. So, um, because they're, you know, Java has kind of built that into the language, but it also came with the whole philosophy, and, uh, so and, uh, when does, it makes me really like python where people just create a virtual environment and then packages, they just downloaded it over the internet. I like, oh my God, wait, what are you doing? But uh, yeah, so different types of problems. I hope that people aren't doing that for security packages.

Interviewer:        38:57          Well, so, okay, I'll write this down so we can talk about this later because this is actually exactly what he's looking at.

Subject:            39:06          Well cus you talk about like, can you trust like, like as a, I have some work in cryptography and like, do you like, like doing things like interacting with even simple like in c plus plus almost everything can be over written in the standard library. Yeah. If you can inject your own standard library,

Interviewer:        39:22          Actually yeah, let's, let's earmark this and come back to it later. Um, because I actually have a lot of things to say on that, but let's just get through this and then we can just sort of chat about whatever."
4304,37911,38065,Math is easy or hard,"I could have screwed up. The two, two times two is four and a plus plus three was I think, I still think I'm right, but yeah, I could have made a mistake."
4304,38527,38572,Non-standard terminology,"this is nest, this is a nested condition here"
4304,38215,38729,Short-circuiting,"Uh, um, that, because, uh, um, if this fell, if this expression, this is the same thing in Lisp right, that if this value is false, this won't be executed. You need to know like what, what's going to be executed? And so, uh, it's really, I mean this is like an if statement and have that, but you know this, but this is nest, this is a nested condition here because it's only if this is true, does this even get evaluated? Okay. And so whether or not 2 is incremented depends crucially on what the value of V1 was."
4304,38215,38729,Lisp,"Uh, um, that, because, uh, um, if this fell, if this expression, this is the same thing in Lisp right, that if this value is false, this won't be executed. You need to know like what, what's going to be executed? And so, uh, it's really, I mean this is like an if statement and have that, but you know this, but this is nest, this is a nested condition here because it's only if this is true, does this even get evaluated? Okay. And so whether or not 2 is incremented depends crucially on what the value of V1 was."
4304,38573,38729,False Operand Causes Short-Circuit,"because it's only if this is true, does this even get evaluated? Okay. And so whether or not 2 is incremented depends crucially on what the value of V1 was."
4304,38573,38729,Incorrect Semantics,"because it's only if this is true, does this even get evaluated? Okay. And so whether or not 2 is incremented depends crucially on what the value of V1 was."
4304,39019,39251,Discussion Question,"Subject:            40:58          I, I, I think that's right because I, well is that a compiler optimization or is that a defined property of the Or operator? Because actually an operator or, oh, in c plus plus, uh maybe I'm wrong."
4304,38903,39252,Unsure,"This is the, well it was the, uh, umm,

Subject:            40:52          Oh, is that not true? Let me think, umm

Subject:            40:58          I, I, I think that's right because I, well is that a compiler optimization or is that a defined property of the Or operator? Because actually an operator or, oh, in c plus plus, uh maybe I'm wrong.
"
4304,38903,39252,Compiler Optimizations,"This is the, well it was the, uh, umm,

Subject:            40:52          Oh, is that not true? Let me think, umm

Subject:            40:58          I, I, I think that's right because I, well is that a compiler optimization or is that a defined property of the Or operator? Because actually an operator or, oh, in c plus plus, uh maybe I'm wrong.
"
4304,39395,39636,Inferring Semantics from Reasoning,"And then you have like the, I'm suddenly like not, I'm not totally confident because um, in, in C++ typically the, the arguments are evaluated and then pushed onto the stack to call the operator and, but yeah, if you like it okay. In, in, uh"
4304,39395,39636,Unsure,"And then you have like the, I'm suddenly like not, I'm not totally confident because um, in, in C++ typically the, the arguments are evaluated and then pushed onto the stack to call the operator and, but yeah, if you like it okay. In, in, uh"
4304,39743,40232,Contrasting different languages,"Okay, in in Lisp you would have like, you know, Or x, y, z. You could do like a arbitrary number and it will just, it'll keep evaluating until it comes to a false and all the ones after that won't be evaluated. And, um, there's no reason to evaluate this expression if this expression is, is false. So I, yeah, I guess it's, it's, it's unusual I guess. Like if there's place for ambiguity, why would you use like a, uh, um, plus plus? I actually have no idea now, I'm totally I'm mystified"
4304,39743,40232,Lisp,"Okay, in in Lisp you would have like, you know, Or x, y, z. You could do like a arbitrary number and it will just, it'll keep evaluating until it comes to a false and all the ones after that won't be evaluated. And, um, there's no reason to evaluate this expression if this expression is, is false. So I, yeah, I guess it's, it's, it's unusual I guess. Like if there's place for ambiguity, why would you use like a, uh, um, plus plus? I actually have no idea now, I'm totally I'm mystified"
4304,40324,40605,Incorrect Semantics,"I don't know whether or not V2 will be incremented in this. Uh, if, uh, here, here it's not a question cause it's like the, the, there's no case where, um. This, this is true, this is going to happen. But if this was false, would this be incremented or not? And that, I don't know."
4304,40324,40605,False Operand Causes Short-Circuit,"I don't know whether or not V2 will be incremented in this. Uh, if, uh, here, here it's not a question cause it's like the, the, there's no case where, um. This, this is true, this is going to happen. But if this was false, would this be incremented or not? And that, I don't know."
4304,40772,41358,Alternative Idioms,"Okay, so in one case, I'm thinking that this could have this, this would be looked like this. If we can pull the, the um, plus plus V1 out here and then say if V1, then we say, uh, um, and then this one here is, uh, the question is, is it, um, if plus plus V2, uh, and then like, like the question is like, if, if this is false, would we ever reach this code versus a plus plus V1? Uh, uh, well I guess we could do the alternative would be plus plus V2 if V1, and then if V2 right. These are different because this one's going to unconditionally evaluate both of his expressions. And I,"
4304,40772,41358,Visual Reference,"Okay, so in one case, I'm thinking that this could have this, this would be looked like this. If we can pull the, the um, plus plus V1 out here and then say if V1, then we say, uh, um, and then this one here is, uh, the question is, is it, um, if plus plus V2, uh, and then like, like the question is like, if, if this is false, would we ever reach this code versus a plus plus V1? Uh, uh, well I guess we could do the alternative would be plus plus V2 if V1, and then if V2 right. These are different because this one's going to unconditionally evaluate both of his expressions. And I,"
4304,41542,41938,Evaluation Order,"Or I should say the operator Or I mean like in knowing how C plus plus like I'm now like a little confused because, uh, normally like is it, is this operator Or plus plus V1, comma plus plus V2. And if that's the case, these are both evaluated before you call this operator. Uh, and if that's not true, then I guess I'm a little vague on, uh, um, the definition of operator. Like, like, uh, yeah."
4304,41542,41938,Unsure,"Or I should say the operator Or I mean like in knowing how C plus plus like I'm now like a little confused because, uh, normally like is it, is this operator Or plus plus V1, comma plus plus V2. And if that's the case, these are both evaluated before you call this operator. Uh, and if that's not true, then I guess I'm a little vague on, uh, um, the definition of operator. Like, like, uh, yeah."
4304,42301,42667,C vs C++,"Okay. Um, it seems like hard to implement it in the original, like in the early days of c plus plus before they introduced operator overloading, it seems like that seems like it could make, it would make perfect sense, but with operator overloading, like what if like, uh, I could change like what if I overrode operator or to return true irrespective of the inputs."
4304,42301,42667,Design Concerns,"Okay. Um, it seems like hard to implement it in the original, like in the early days of c plus plus before they introduced operator overloading, it seems like that seems like it could make, it would make perfect sense, but with operator overloading, like what if like, uh, I could change like what if I overrode operator or to return true irrespective of the inputs."
4304,42301,42667,History Lesson,"Okay. Um, it seems like hard to implement it in the original, like in the early days of c plus plus before they introduced operator overloading, it seems like that seems like it could make, it would make perfect sense, but with operator overloading, like what if like, uh, I could change like what if I overrode operator or to return true irrespective of the inputs."
4304,42762,42886,Short-circuiting,"That seems like now the compiler needs to know that. Uh, and it can't, this is something that you don't know until run time."
4304,42762,42886,Incorrect Semantics,"That seems like now the compiler needs to know that. Uh, and it can't, this is something that you don't know until run time."
4304,44295,44351,Top-down comprehension,"I'm not thinking too carefully about the, the specifics."
4304,43857,44566,Did Not Catch Own Mistake After Prompted,"Correct? Um, but actually, uh, for an Or statement, um, if the first opera it is true, there's no need to evaluate the second operand, but if the first opera and is false,

Subject:            46:12          Yes...

Interviewer:        46:13          Then you do

Subject:            46:14          Right, you have to. Then you have to cause

Interviewer:        46:15          Right.

Subject:            46:17          Yes. Okay. Yeah. I'm not thinking too carefully about the, the specifics. I'm sort of thinking about the, and cause it would be similar with an And you have the same question or whether it, when it's true do you evaluate next? Like, Oh God, I'm, I'm glad that I don't implement compilers."
4304,44719,44892,Did Not Catch Own Mistake After Prompted,"Well, I, there was no, this wasn't in contention for him because they were both true. Right. So, oh, but then that's what issue. Right. So why did I evaluate the second one?"
4304,44972,45115,Did Not Catch Own Mistake After Prompted,"Oh, am I wrong here? I could be wrong because the first one's true. There's no reason to evaluate the second one. Oh. So I was, um, yeah, yeah."
4304,45344,45392,Causes of Confusion,"Uh, that's kind of the mistake that humans make."
4304,45715,46018,Side-effect,"Yeah. I don't have a good, good reason why I think that normally like in, in this kind of like, it's unusual to use, uh, like mutation with an Or. More typical would be to do a chain of Ands, and like, and so, uh, and I think this particular construct, um, because ya, so wait yeah. If you, if this, uh,"
4304,45715,46018,Uncommon pattern,"Yeah. I don't have a good, good reason why I think that normally like in, in this kind of like, it's unusual to use, uh, like mutation with an Or. More typical would be to do a chain of Ands, and like, and so, uh, and I think this particular construct, um, because ya, so wait yeah. If you, if this, uh,"
4304,45715,46018,Alternative Idioms,"Yeah. I don't have a good, good reason why I think that normally like in, in this kind of like, it's unusual to use, uh, like mutation with an Or. More typical would be to do a chain of Ands, and like, and so, uh, and I think this particular construct, um, because ya, so wait yeah. If you, if this, uh,"
4304,46055,46280,Surprising comment,"Yeah this, this seems like it's, it's almost deliberately trying to fool with you because I the the ummm.

Subject:            48:06          Cause you're going to keep evaluating until you get to a true expression basically."
4304,46055,46280,Short-circuiting,"Yeah this, this seems like it's, it's almost deliberately trying to fool with you because I the the ummm.

Subject:            48:06          Cause you're going to keep evaluating until you get to a true expression basically."
4304,46055,46280,Author Intention,"Yeah this, this seems like it's, it's almost deliberately trying to fool with you because I the the ummm.

Subject:            48:06          Cause you're going to keep evaluating until you get to a true expression basically."
4304,46551,46814,Simple,"Yes. It had been like, uh, almost, uh, well actually have De Morgan's law [chuckles]. Um, we could, like, if I saw somebody doing like a whole bunch of Ors, I, I'd be like, oh, think about doing this with Ands instead, because that's, that's easier to understand."
4304,46551,46814,Alternative Idioms,"Yes. It had been like, uh, almost, uh, well actually have De Morgan's law [chuckles]. Um, we could, like, if I saw somebody doing like a whole bunch of Ors, I, I'd be like, oh, think about doing this with Ands instead, because that's, that's easier to understand."
4304,46954,47166,Side-effect,"Subject:            48:41          No, I don't think you can either. Uh, but yeah, but like, um, uh, doing conditionals with side effects is kind of like, I wrinkle my nose at that to begin with anyway. Um, yeah."
4304,46989,47166,Snippet Value Judgement,"No, I don't think you can either. Uh, but yeah, but like, um, uh, doing conditionals with side effects is kind of like, I wrinkle my nose at that to begin with anyway. Um, yeah."
4304,47777,48810,Side-effect,"Subject:            49:39          So, yeah, I think I too, like in that situation that you would never want it typically are like trying to establish like the state before you enter an area that's like critical if that'd be all those things be satisfied. And so the idea that they would have side effects, is like kind of anathema to that. Um, but then the other, I mean the, the And'ing is much more typical I think for like, it's not that much different I guess. But the, I usually the control flow, if I see a whole bunch of Ors I expect to be the control flow to be like return or to don't do anything more. And I usually prefer like having like the declaring all the things you expect and then opening and the braces. Sometimes people, I mean like doing code reviews, people like I often will say like, oh, I prefer to seeing nesting for the, for the code and somebody will say, oh, uh, instead, just return or like escape the code. And keep everything from being indented too much. Because there's only 80 columns or whatever."
4304,47812,48810,Code Review,"So, yeah, I think I too, like in that situation that you would never want it typically are like trying to establish like the state before you enter an area that's like critical if that'd be all those things be satisfied. And so the idea that they would have side effects, is like kind of anathema to that. Um, but then the other, I mean the, the And'ing is much more typical I think for like, it's not that much different I guess. But the, I usually the control flow, if I see a whole bunch of Ors I expect to be the control flow to be like return or to don't do anything more. And I usually prefer like having like the declaring all the things you expect and then opening and the braces. Sometimes people, I mean like doing code reviews, people like I often will say like, oh, I prefer to seeing nesting for the, for the code and somebody will say, oh, uh, instead, just return or like escape the code. And keep everything from being indented too much. Because there's only 80 columns or whatever."
4304,47812,48810,Common Pattern,"So, yeah, I think I too, like in that situation that you would never want it typically are like trying to establish like the state before you enter an area that's like critical if that'd be all those things be satisfied. And so the idea that they would have side effects, is like kind of anathema to that. Um, but then the other, I mean the, the And'ing is much more typical I think for like, it's not that much different I guess. But the, I usually the control flow, if I see a whole bunch of Ors I expect to be the control flow to be like return or to don't do anything more. And I usually prefer like having like the declaring all the things you expect and then opening and the braces. Sometimes people, I mean like doing code reviews, people like I often will say like, oh, I prefer to seeing nesting for the, for the code and somebody will say, oh, uh, instead, just return or like escape the code. And keep everything from being indented too much. Because there's only 80 columns or whatever."
4304,47812,48810,Convention,"So, yeah, I think I too, like in that situation that you would never want it typically are like trying to establish like the state before you enter an area that's like critical if that'd be all those things be satisfied. And so the idea that they would have side effects, is like kind of anathema to that. Um, but then the other, I mean the, the And'ing is much more typical I think for like, it's not that much different I guess. But the, I usually the control flow, if I see a whole bunch of Ors I expect to be the control flow to be like return or to don't do anything more. And I usually prefer like having like the declaring all the things you expect and then opening and the braces. Sometimes people, I mean like doing code reviews, people like I often will say like, oh, I prefer to seeing nesting for the, for the code and somebody will say, oh, uh, instead, just return or like escape the code. And keep everything from being indented too much. Because there's only 80 columns or whatever."
4304,49328,49363,Simple,"No, that one seem straight forward."
4304,49478,49609,Quote,"post-increment like, uh, very often confuses people who are new to C plus plus and the fact that it returns the wrong value, right?"
4304,49446,49715,Causes of Confusion,"Yeah, I think this was like the post-increment like, uh, very often confuses people who are new to C plus plus and the fact that it returns the wrong value, right? Like there was a, um, I did when I joined [company] they had that, like I said, don't prefer plus plus to"
4304,49446,49715,Anecdote,"Yeah, I think this was like the post-increment like, uh, very often confuses people who are new to C plus plus and the fact that it returns the wrong value, right? Like there was a, um, I did when I joined [company] they had that, like I said, don't prefer plus plus to"
4304,49866,50273,Pre vs Post-increment,"We actually said they now say there's no reason to prefer one over the other. Like if it's clear from the context with your intent is, especially because actually the in for loops for example, people very often want to do I plus plus because that was in K&R original, I don't know why like post-increment. Um, it used to be also more expensive. Um, although that's no longer true or very unlikely to be true"
4304,49866,50273,Performance Optimization,"We actually said they now say there's no reason to prefer one over the other. Like if it's clear from the context with your intent is, especially because actually the in for loops for example, people very often want to do I plus plus because that was in K&R original, I don't know why like post-increment. Um, it used to be also more expensive. Um, although that's no longer true or very unlikely to be true"
4304,49866,50273,History Lesson,"We actually said they now say there's no reason to prefer one over the other. Like if it's clear from the context with your intent is, especially because actually the in for loops for example, people very often want to do I plus plus because that was in K&R original, I don't know why like post-increment. Um, it used to be also more expensive. Um, although that's no longer true or very unlikely to be true"
4304,50686,50724,Simple,That one seems super straight forward.
4304,50906,50939,Simple,That also seems straight forward.
4304,51198,52181,History Lesson,"Oh, that's a, there's a if you, I don't know how you search for it on the Internet. But there's, uh, uh, uh, d 2 c there was a poem that was ode to C. And there's a stanza in the poem that said the poem is very, it's very funny. It says like, Oh,

Subject:            53:04          um, uh, um, that's oh, if I remember. Some other parts of it. Uh, um, ""plus plus adds one and null is for none"". And like, I kind of like it's rhyming stanzas and it, um, uh, like towards the end it has a line that says ""Question Colon is confusing, use them a lot"". And then the last thing, which is kind of the joke is like that, um, it has this expression that's like void paren star. Like at the same is a, a pointer to an array of functions returning. It's like this for does it breaks the meter and it's just terrible. Like think about how you can like create, like you can kind of create, um, um, pointers to functions that have arbitrarily complex like nested structures. So it like a choice."
4304,52292,52475,Language Value Judgement,"Right, they said the it, it's like the phone works so well except for the last line is this terrible. And it's kind of like making fun of the intrinsic complexity that's possible in C"
4304,52574,52927,Surprising comment,"And so I always remember like that kind of like whatever like, ah, I have the urge to put a question mark operator in and I think that, yeah, they're confusing so use them a lot. Especially the nested ones, like where you have question mark question. And people do like mean you can do it like the whole, yeah, yeah, yeah. That's amazingly common. Yeah."
4304,52574,52927,Anecdote,"And so I always remember like that kind of like whatever like, ah, I have the urge to put a question mark operator in and I think that, yeah, they're confusing so use them a lot. Especially the nested ones, like where you have question mark question. And people do like mean you can do it like the whole, yeah, yeah, yeah. That's amazingly common. Yeah."
4304,52574,52927,Common Pattern,"And so I always remember like that kind of like whatever like, ah, I have the urge to put a question mark operator in and I think that, yeah, they're confusing so use them a lot. Especially the nested ones, like where you have question mark question. And people do like mean you can do it like the whole, yeah, yeah, yeah. That's amazingly common. Yeah."
4304,53038,53234,Code Review,"I mean like I review stuff on my like, Eh, well as a reviewer, like I kind of, especially when we have something called readability at [company] we like are criteria, you might've heard about this"
4304,53319,53722,Quote,"Yes. So, um, uh, but I oftentimes like feel like, uh, my role is to like tell them to add more of something or if they have too much or tell them to take some away. Just to say something, you know, you can't like, you know, just like not say anything. So like you say, ""Oh, you can put a question mark operator here."" and ""Oh, you used the question mark operator, why don't you not use that?"" [Laughter]"
4304,53319,53722,Social Context of Code,"Yes. So, um, uh, but I oftentimes like feel like, uh, my role is to like tell them to add more of something or if they have too much or tell them to take some away. Just to say something, you know, you can't like, you know, just like not say anything. So like you say, ""Oh, you can put a question mark operator here."" and ""Oh, you used the question mark operator, why don't you not use that?"" [Laughter]"
4304,53319,53722,Alternative Idioms,"Yes. So, um, uh, but I oftentimes like feel like, uh, my role is to like tell them to add more of something or if they have too much or tell them to take some away. Just to say something, you know, you can't like, you know, just like not say anything. So like you say, ""Oh, you can put a question mark operator here."" and ""Oh, you used the question mark operator, why don't you not use that?"" [Laughter]"
4304,53319,53722,Amusement,"Yes. So, um, uh, but I oftentimes like feel like, uh, my role is to like tell them to add more of something or if they have too much or tell them to take some away. Just to say something, you know, you can't like, you know, just like not say anything. So like you say, ""Oh, you can put a question mark operator here."" and ""Oh, you used the question mark operator, why don't you not use that?"" [Laughter]"
4304,53971,53990,Non-standard terminology,order of precedence
4304,53959,54466,Precedence,"I guess the order of precedence, it could be like, that's another thing that like, uh, the, uh, very often people get burned because of the like, uh, they would often say, do this. Sure. To make sure that you like, that's the if expression. Uh, and it's easy to get, like I think the question mark operators not that high. There are some operators that are like, um, that um, kinda associate higher as you get, you can get unexpected behavior if you, if it's the wrong, it's evaluating the wrong expression."
4304,53959,54466,Recurring Problem,"I guess the order of precedence, it could be like, that's another thing that like, uh, the, uh, very often people get burned because of the like, uh, they would often say, do this. Sure. To make sure that you like, that's the if expression. Uh, and it's easy to get, like I think the question mark operators not that high. There are some operators that are like, um, that um, kinda associate higher as you get, you can get unexpected behavior if you, if it's the wrong, it's evaluating the wrong expression."
4304,54867,55019,Short-circuiting,"And actually, so this one here, like I don't think, I think that if I remember the rule, the only one of these two expressions is going to be evaluated."
4304,55221,55302,Side-effect,"No, but if these had side effects, if you had like function one and function two."
4304,55395,55727,Potential Confusing Constructs,"And that's right, if you actually, for all these things, like if you had, like if you put it in function calls with print statements like I, that would be a much stronger challenge because you, you, you'd be basically saying, do you know what's going to be evaluated? Uh, and, and here with like this, like constants like who cares."
8888,696,943,Tooling,"So this I mean [laughter] compiles, but it would be picked up by the linter. Um, so we're going to reassign V two equals one. So at this point we have V one equals 0 and V two now equals one. This is one. So we will take the true branch of the if."
8888,696,943,Amusement,"So this I mean [laughter] compiles, but it would be picked up by the linter. Um, so we're going to reassign V two equals one. So at this point we have V one equals 0 and V two now equals one. This is one. So we will take the true branch of the if."
8888,1341,1661,Long ago,"cause I've screwed this up before [laughter] and uh, you know, and this is why I turned on lint options. So because compilers are really good at spotting things like this, but I'm not terrible at it, but you know, it's bad when you do that and it's like, ah, yeah, it's been a while since I've written one of those, but."
8888,1341,1661,Tooling,"cause I've screwed this up before [laughter] and uh, you know, and this is why I turned on lint options. So because compilers are really good at spotting things like this, but I'm not terrible at it, but you know, it's bad when you do that and it's like, ah, yeah, it's been a while since I've written one of those, but."
8888,1341,1661,Learned from Mistake,"cause I've screwed this up before [laughter] and uh, you know, and this is why I turned on lint options. So because compilers are really good at spotting things like this, but I'm not terrible at it, but you know, it's bad when you do that and it's like, ah, yeah, it's been a while since I've written one of those, but."
8888,1341,1661,Amusement,"cause I've screwed this up before [laughter] and uh, you know, and this is why I turned on lint options. So because compilers are really good at spotting things like this, but I'm not terrible at it, but you know, it's bad when you do that and it's like, ah, yeah, it's been a while since I've written one of those, but."
8888,1935,2106,Parenthesis," I mean honestly inside [Large Software Company], like the default compiler options will flag that and tell you you're full of bs unless you put the extra parens around it"
8888,1935,2106,Tooling," I mean honestly inside [Large Software Company], like the default compiler options will flag that and tell you you're full of bs unless you put the extra parens around it"
8888,1935,2106,Custom Environments," I mean honestly inside [Large Software Company], like the default compiler options will flag that and tell you you're full of bs unless you put the extra parens around it"
8888,2108,2313,Would Have Written it Differently,"So, um, yeah, I just, I never see it anymore when, when other people send me CLs to review and I don't, I mean I don't remember the last time I written it cause I'm pretty conscientious about not doing it."
8888,2108,2313,Code Review,"So, um, yeah, I just, I never see it anymore when, when other people send me CLs to review and I don't, I mean I don't remember the last time I written it cause I'm pretty conscientious about not doing it."
8888,2108,2313,Long ago,"So, um, yeah, I just, I never see it anymore when, when other people send me CLs to review and I don't, I mean I don't remember the last time I written it cause I'm pretty conscientious about not doing it."
8888,2219,2313,Remember,I don't remember the last time I written it cause I'm pretty conscientious about not doing it.
8888,2313,2382,Long ago," Like, I don't have any of the Pascal like crap in my head anymore, s"
8888,2313,2382,Pascal," Like, I don't have any of the Pascal like crap in my head anymore, s"
8888,2392,2416,Would Have Written it Differently,"Don't, don't write that."
8888,2392,2416,Snippet Value Judgement,"Don't, don't write that."
8888,2453,2638,Long ago,"So did you use to write Pascal?

Subject:            02:15          Long, long time ago when I was a kid, the program, but like I haven't used it in probably 20 years at this point. Um,"
8888,2453,2638,Pascal,"So did you use to write Pascal?

Subject:            02:15          Long, long time ago when I was a kid, the program, but like I haven't used it in probably 20 years at this point. Um,"
8888,2746,2884,BASIC,"It's somewhere, somewhere. I mean, there are other languages they use equals for that, but I think, I think it's kind of dying. Like basic"
8888,2746,2884,Contrasting different languages,"It's somewhere, somewhere. I mean, there are other languages they use equals for that, but I think, I think it's kind of dying. Like basic"
8888,3104,3194,Long ago,"Yeah. It's, yeah, it's, it's kind of receding and I don't think of that as equals anymore."
8888,3104,3194,Mental Model,"Yeah. It's, yeah, it's, it's kind of receding and I don't think of that as equals anymore."
8888,3393,3426,Amusement,"Here we go. Oh, Jesus. [Laughter]"
8888,3641,3760,Remember,"And the problem is that we have this, uh, uh, precedence, problem, which you would have to have memorized the operators"
8888,3845,4085,Inferring Semantics from Reasoning," I don't think anybody's ever been crazy enough to write a language in which And has lower precedence than Or. So I'm going to say that the And gets a weight. Does this not even matter? Yeah. So I'm gonna say that the And before Or I think,"
8888,3845,4085,Language Value Judgement," I don't think anybody's ever been crazy enough to write a language in which And has lower precedence than Or. So I'm going to say that the And gets a weight. Does this not even matter? Yeah. So I'm gonna say that the And before Or I think,"
8888,4122,4281,Remember,"cause I literally don't remember any examples where was the other way? Um, and so that means that this is really like this, sorry, I'm notating on the program,"
8888,4122,4281,Contrasting different languages,"cause I literally don't remember any examples where was the other way? Um, and so that means that this is really like this, sorry, I'm notating on the program,"
8888,4970,5197,Ambiguous Readability,"I'm not 100% sure because I do not have those precedences memorized because again, there's a warning and the by-default compiler options that will yell at me if I write things like that. Um, because they're not typically clear."
8888,4970,5197,Tooling,"I'm not 100% sure because I do not have those precedences memorized because again, there's a warning and the by-default compiler options that will yell at me if I write things like that. Um, because they're not typically clear."
8888,4970,5197,Remember,"I'm not 100% sure because I do not have those precedences memorized because again, there's a warning and the by-default compiler options that will yell at me if I write things like that. Um, because they're not typically clear."
8888,4970,5197,Precedence,"I'm not 100% sure because I do not have those precedences memorized because again, there's a warning and the by-default compiler options that will yell at me if I write things like that. Um, because they're not typically clear."
8888,4970,5197,Unsure,"I'm not 100% sure because I do not have those precedences memorized because again, there's a warning and the by-default compiler options that will yell at me if I write things like that. Um, because they're not typically clear."
8888,5277,5443,Mental Model,"if you're working over the ring of booleans then, And is sort of like multiplication Or is sort of like addition and multiplication is higher precedence than addition"
8888,5277,5770,Unsure,"if you're working over the ring of booleans then, And is sort of like multiplication Or is sort of like addition and multiplication is higher precedence than addition. So it's like, it would be very unusual I think, to like reverse to like to (a) define a precedence order, which I know C does, because this compiles and then (b) like reverse it like that, so that like, the multiplicative thing had lower precedence than the additive, but like, I'm not 100% sure. So I didn't want to put six."
8888,5277,5770,Inferring Semantics from Reasoning,"if you're working over the ring of booleans then, And is sort of like multiplication Or is sort of like addition and multiplication is higher precedence than addition. So it's like, it would be very unusual I think, to like reverse to like to (a) define a precedence order, which I know C does, because this compiles and then (b) like reverse it like that, so that like, the multiplicative thing had lower precedence than the additive, but like, I'm not 100% sure. So I didn't want to put six."
8888,6246,6507,Contrasting different languages," yeah, uh that's a good point. I don't think I've ever seen that either

Interviewer:        06:21          one minus two minus three?

Subject:            06:22          No, no, no, no. I mean, uh, like And and Or having exactly the same precedence without it."
8888,6246,6507,Not Previously Seen," yeah, uh that's a good point. I don't think I've ever seen that either

Interviewer:        06:21          one minus two minus three?

Subject:            06:22          No, no, no, no. I mean, uh, like And and Or having exactly the same precedence without it."
8888,6750,6867,Surprising comment,"let's see, if from a short circuiting perspective, does it matter? Yeah. It must matter. How would they associate, um"
8888,6750,6867,Design Concerns,"let's see, if from a short circuiting perspective, does it matter? Yeah. It must matter. How would they associate, um"
8888,6750,6867,Evaluation Order,"let's see, if from a short circuiting perspective, does it matter? Yeah. It must matter. How would they associate, um"
8888,6750,6867,Precedence,"let's see, if from a short circuiting perspective, does it matter? Yeah. It must matter. How would they associate, um"
8888,6750,6867,Short-circuiting,"let's see, if from a short circuiting perspective, does it matter? Yeah. It must matter. How would they associate, um"
8888,6952,7324,Inferring Semantics from Reasoning,"Yeah. I would, I tend to think of a left associativity as slightly more natural than right associativity. Um, except for like exponentials, but these are, I mean, plus and times are left associative and I would be, I'm I'm like 95% sure they're not the same precedence, but even if they were, I'm pretty sure they should be left associative. Like, if that makes any sense."
8888,7420,7555,Reasoning by Parts," I would be surprised if it, if it were both, uh, same precedence and right associative, which is the only way we would get three here."
8888,7420,7555,Inferring Semantics from Reasoning," I would be surprised if it, if it were both, uh, same precedence and right associative, which is the only way we would get three here."
8888,7421,7598,Language Expectations,"I would be surprised if it, if it were both, uh, same precedence and right associative, which is the only way we would get three here. So I'm reasonably confident that it's six."
8888,8201,8306,Functional Programming,", okay. So basically whenever so C evaluates things in order, it's not a functional programming language."
8888,8199,8682,Evaluation Order,"Um, okay. So basically whenever so C evaluates things in order, it's not a functional programming language. So like this V one is V one at the time that we were, that we were at this statement, it, um, we knew that the one was three before that. Um, so once V one gets incremented here, like we've already computed the value for V two because of the ordering that C places on things. Um, so yeah, I mean I think there's kind of no room for funny business here, so I'm very confident."
8888,8199,8682,Contrasting different languages,"Um, okay. So basically whenever so C evaluates things in order, it's not a functional programming language. So like this V one is V one at the time that we were, that we were at this statement, it, um, we knew that the one was three before that. Um, so once V one gets incremented here, like we've already computed the value for V two because of the ordering that C places on things. Um, so yeah, I mean I think there's kind of no room for funny business here, so I'm very confident."
8888,8199,8682,Sure,"Um, okay. So basically whenever so C evaluates things in order, it's not a functional programming language. So like this V one is V one at the time that we were, that we were at this statement, it, um, we knew that the one was three before that. Um, so once V one gets incremented here, like we've already computed the value for V two because of the ordering that C places on things. Um, so yeah, I mean I think there's kind of no room for funny business here, so I'm very confident."
8888,8929,9038,Haskell,"so like if you wrote, I mean, I mean there's no way to write plus plus in Haskell cause it's like mutating it"
8888,9134,9479,Non-standard terminology,"I mean maybe functional is a wrong term, but like if maybe lazy is the right word, um, where like this is three and this is a thunk. That's like V one plus four and then we actually increment V one here for some reason. Like, and then there's some, some weird ordering thing, but like C, C is not like that. That's not one of those languages. So"
8888,9134,9479,Contrasting different languages,"I mean maybe functional is a wrong term, but like if maybe lazy is the right word, um, where like this is three and this is a thunk. That's like V one plus four and then we actually increment V one here for some reason. Like, and then there's some, some weird ordering thing, but like C, C is not like that. That's not one of those languages. So"
8888,9134,9479,Counterfactual Semantics,"I mean maybe functional is a wrong term, but like if maybe lazy is the right word, um, where like this is three and this is a thunk. That's like V one plus four and then we actually increment V one here for some reason. Like, and then there's some, some weird ordering thing, but like C, C is not like that. That's not one of those languages. So"
8888,9134,9479,Evaluation Order,"I mean maybe functional is a wrong term, but like if maybe lazy is the right word, um, where like this is three and this is a thunk. That's like V one plus four and then we actually increment V one here for some reason. Like, and then there's some, some weird ordering thing, but like C, C is not like that. That's not one of those languages. So"
8888,9134,9479,Functional Programming,"I mean maybe functional is a wrong term, but like if maybe lazy is the right word, um, where like this is three and this is a thunk. That's like V one plus four and then we actually increment V one here for some reason. Like, and then there's some, some weird ordering thing, but like C, C is not like that. That's not one of those languages. So"
8888,9675,9899,Remember,"but like if this printf were evaluated left to right, then we force V one first and then we forced V two and um, no, if we, sorry if we went right to left, which is like, you know, is that how Java does it? I don't remember,"
8888,9675,9899,Java,"but like if this printf were evaluated left to right, then we force V one first and then we forced V two and um, no, if we, sorry if we went right to left, which is like, you know, is that how Java does it? I don't remember,"
8888,9675,9899,Incorrect Semantics,"but like if this printf were evaluated left to right, then we force V one first and then we forced V two and um, no, if we, sorry if we went right to left, which is like, you know, is that how Java does it? I don't remember,"
8888,9565,10083,Counterfactual Semantics,"Um, you know, and then we would like force V one, like hypothetically, like I'm making up some, some bs here, but like if this printf were evaluated left to right, then we force V one first and then we forced V two and um, no, if we, sorry if we went right to left, which is like, you know, is that how Java does it? I don't remember, but like we forced V two first. No, no. If we forced v one first, then do you want to gets incremented and then we forced V two and then this thunk like this is four now or something."
8888,9530,10083,printf,"Subject:            09:51          Um, you know, and then we would like force V one, like hypothetically, like I'm making up some, some bs here, but like if this printf were evaluated left to right, then we force V one first and then we forced V two and um, no, if we, sorry if we went right to left, which is like, you know, is that how Java does it? I don't remember, but like we forced V two first. No, no. If we forced v one first, then do you want to gets incremented and then we forced V two and then this thunk like this is four now or something."
8888,10452,10639,Functional Programming,"Sorry. My, Haskell's like my one example of a functional programming language, I have not explored the, because I mean, yeah, because you can't, I mean lazy and side effectful is kind of,"
8888,10452,10639,Haskell,"Sorry. My, Haskell's like my one example of a functional programming language, I have not explored the, because I mean, yeah, because you can't, I mean lazy and side effectful is kind of,"
8888,10417,10639,Side-effect,"Subject:            10:35          Sorry. My, Haskell's like my one example of a functional programming language, I have not explored the, because I mean, yeah, because you can't, I mean lazy and side effectful is kind of,"
8888,11115,11294,Modulus,Subject:            11:07          [Snippet 1] All right. V one is equal to zero again. All right. So if 10 mod three cool. That's going to be one. So if V one is going to be four
8888,11489,11668,Boundary Testing,"Um, so this I know this is the mod operator. I know what it does. Um, it's too positive numbers so there's no, yeah, all of those funny business edge cases are not in effect here."
8888,11489,11668,Sure,"Um, so this I know this is the mod operator. I know what it does. Um, it's too positive numbers so there's no, yeah, all of those funny business edge cases are not in effect here."
8888,11489,11668,Counterfactual Semantics,"Um, so this I know this is the mod operator. I know what it does. Um, it's too positive numbers so there's no, yeah, all of those funny business edge cases are not in effect here."
8888,11669,11827,Language Standard,"The standard says that, you know, well if I remember right it's basically it has to be Euclidean, well no, what, what does the C say? I read this [inaudible]."
8888,11448,12270,Correct Semantics,"Subject:            11:31          Okay. Um, so this I know this is the mod operator. I know what it does. Um, it's too positive numbers so there's no, yeah, all of those funny business edge cases are not in effect here. The standard says that, you know, well if I remember right it's basically it has to be Euclidean, well no, what, what does the C say? I read this [inaudible]. I mean it's truncating division and like, and then this is like the corresponding remainder operation. Um, I think its trunca..., well I know its trunca.... Okay. For positive, for positive, when both arguments are positive I know it truncates. Um, so 10 10 divided by three is what? Three and a third? Um, so it'll get like the remainder will be one for sure. I'm like, yeah, this, this is the case of the module operator I really understand"
8888,11448,12270,Modulus,"Subject:            11:31          Okay. Um, so this I know this is the mod operator. I know what it does. Um, it's too positive numbers so there's no, yeah, all of those funny business edge cases are not in effect here. The standard says that, you know, well if I remember right it's basically it has to be Euclidean, well no, what, what does the C say? I read this [inaudible]. I mean it's truncating division and like, and then this is like the corresponding remainder operation. Um, I think its trunca..., well I know its trunca.... Okay. For positive, for positive, when both arguments are positive I know it truncates. Um, so 10 10 divided by three is what? Three and a third? Um, so it'll get like the remainder will be one for sure. I'm like, yeah, this, this is the case of the module operator I really understand"
8888,12571,12634,Paranoia,Do I really know this? Is this secretly undefined behavior? No.
8888,13259,13462,Boundary Testing,"Yeah, so I guess I feel like this is sort of just math. The only thing that can go wrong here is if these are unsigned types and then all hell breaks loose, but they're not int is a sign type by default."
8888,13560,13618,Math is easy or hard,This works the same way in a lot of programming languages.
8888,13560,13618,Contrasting different languages,This works the same way in a lot of programming languages.
8888,13922,14496,Boundary Testing,"well I'm pretty sure the answer wouldn't be zero. So, um, but okay, so this five times, well, so this seven minus eight here would wrap to, um, whatever the maximum value was of the unsigned type it would be a power of two minus one. Um, and then we would multiply it by, let's say, I guess V two minus three, would still be, so it'd be five less than the power of two. That's the one plus the max. So it's, it would sorta be minus five, but as an unsigned number. Um, and that would definitely compare greater than zero. So we would take the other branch of the else. Yeah."
8888,14913,14970,Short-circuiting," Or V two is greater, I don't even need to evaluate that."
8888,15130,15144,Sure,Very positive.
8888,15297,15752,Short-circuiting,"Yeah. So if a one is less or equal to six, so, so v two is assigned to be six. Um, and then we look at the if, it one is less than or equal to six because that's V two's current value. Um, and that's true. And then we short circuit that or so I don't even care what this condition is. Um, I guess it's true as well cause v two, six is also greater than equal to five. Um, then we assign V one equal to two and then we come down here and then V one is two,"
8888,16302,16609,Parenthesis,"Um, cause I have used the, I mean, so I learned the hard, well I mean at some point in my distant education, I learned the hard way, uh, to put parentheses around, um, uh, constants that you define like that because um, it's uh, the, the macro preprocessor is literally just like doing textual substitutions"
8888,16302,16609,Long ago,"Um, cause I have used the, I mean, so I learned the hard, well I mean at some point in my distant education, I learned the hard way, uh, to put parentheses around, um, uh, constants that you define like that because um, it's uh, the, the macro preprocessor is literally just like doing textual substitutions"
8888,16302,16609,Learned from Mistake,"Um, cause I have used the, I mean, so I learned the hard, well I mean at some point in my distant education, I learned the hard way, uh, to put parentheses around, um, uh, constants that you define like that because um, it's uh, the, the macro preprocessor is literally just like doing textual substitutions"
8888,16902,17002,Language Value Judgement,I'm not really sure how it fits into the lexing and parsing. Like it's a mess. It's a complete mess.
8888,17565,17681,Quote,"You just do these things once the wrong way, you get cut and then you just kind of remember like, Oh that looks bad."
8888,17428,17709,Parenthesis,"I meant like a long time ago? Like I, I'm sure I made a bug like that where I just left off the parens and then it just broke something. You just do these things once the wrong way, you get cut and then you just kind of remember like, Oh that looks bad. Like I, yeah, I mean, yeah."
8888,17428,17709,Learned from Mistake,"I meant like a long time ago? Like I, I'm sure I made a bug like that where I just left off the parens and then it just broke something. You just do these things once the wrong way, you get cut and then you just kind of remember like, Oh that looks bad. Like I, yeah, I mean, yeah."
8888,17428,17709,Long ago,"I meant like a long time ago? Like I, I'm sure I made a bug like that where I just left off the parens and then it just broke something. You just do these things once the wrong way, you get cut and then you just kind of remember like, Oh that looks bad. Like I, yeah, I mean, yeah."
8888,17821,17915,Convention,"is I'm like if there's no parens, like I'm instantly like red alert like what's going on. Yeah"
8888,18083,18130,Snippet Value Judgement,"Oh, octal constants [disgusted tone], ugh, okay"
8888,18394,18440,Language Value Judgement,"Yeah, it's a particularly obnoxious octal form"
8888,18450,18501,Previously Used,"""why?"", I mean like, I used octal constants before,"
8888,18528,18712,Contrasting different languages," I I remember pointedly, that it's different in python because you'd write it as zero you know, like that [0x13 on paper], cause like you can write like a hex constantly with an X in C"
8888,18528,18712,Python," I I remember pointedly, that it's different in python because you'd write it as zero you know, like that [0x13 on paper], cause like you can write like a hex constantly with an X in C"
8888,18528,18712,Remember," I I remember pointedly, that it's different in python because you'd write it as zero you know, like that [0x13 on paper], cause like you can write like a hex constantly with an X in C"
8888,18728,19480,History Lesson,"they were big on octal man. Um, you know, you want to do like backslash oh one three is a character constant, you know, knock yourself out. But like if you want a Hex, then it would be, I don't know what, um, I guess [writes '\x0b' on paper], yeah, so, you know, shorter, I guess they were like, they really originally developed that thing on a machine with like 36 bit words or something. 18 I don't remember it was weird. It was not a power of two, which is the reason for a lot of the like the C standards saying we're not going to assume that the, that the word width is the power of two. And uh, yeah. So like, you know, 36 bits, man, you know, divide them into groups of three. It's very convenient. Um, yeah, I guess that they were big on octal."
8888,18728,19480,Design Concerns,"they were big on octal man. Um, you know, you want to do like backslash oh one three is a character constant, you know, knock yourself out. But like if you want a Hex, then it would be, I don't know what, um, I guess [writes '\x0b' on paper], yeah, so, you know, shorter, I guess they were like, they really originally developed that thing on a machine with like 36 bit words or something. 18 I don't remember it was weird. It was not a power of two, which is the reason for a lot of the like the C standards saying we're not going to assume that the, that the word width is the power of two. And uh, yeah. So like, you know, 36 bits, man, you know, divide them into groups of three. It's very convenient. Um, yeah, I guess that they were big on octal."
8888,18358,19480,Visual Reference,"Um, yeah, that's an octal constant. Yeah, it's a particularly obnoxious octal form. Um, um, ""why?"", I mean like, I used octal constants before, I don't know. I mean it's, I I remember pointedly, that it's different in python because you'd write it as zero you know, like that [0x13 on paper], cause like you can write like a hex constantly with an X in C, um, but yeah, they were big on octal man. Um, you know, you want to do like backslash oh one three is a character constant, you know, knock yourself out. But like if you want a Hex, then it would be, I don't know what, um, I guess [writes '\x0b' on paper], yeah, so, you know, shorter, I guess they were like, they really originally developed that thing on a machine with like 36 bit words or something. 18 I don't remember it was weird. It was not a power of two, which is the reason for a lot of the like the C standards saying we're not going to assume that the, that the word width is the power of two. And uh, yeah. So like, you know, 36 bits, man, you know, divide them into groups of three. It's very convenient. Um, yeah, I guess that they were big on octal."
8888,19516,19738,Amusement," Like EBCDIC was probably no, BCD was, was six bits I think, which is two octal.

Subject:            20:53          Yeah, yeah. Um, oh yeah, that's right. They ran on their shitty old character sets. Oh my God. [Laughter]"
8888,19844,20628,Amusement," Right. Yeah, hence, yeah. Cause they have trigraphs and I mean now we don't.

Interviewer:        21:06          Oh wait, trigraphs have been removed?

Subject:            21:08          Uh, well have they been removed? I don't know. I never see them. Like, they're sooo old. I think they finally did actually,

Interviewer:        21:17          I mean it's rare that you see non backwards compatible changes to the language. Right?

Subject:            21:21          Yeah. Well I think there was like a little bit of controversial and everybody was just like, really? It's trigraphs, what are you doing? [laughter] Um,

Interviewer:        21:29          I just, I assumed that was something that was popular, not in America because we don't see them here. cause our keyboards or,"
8888,19844,20628,History Lesson," Right. Yeah, hence, yeah. Cause they have trigraphs and I mean now we don't.

Interviewer:        21:06          Oh wait, trigraphs have been removed?

Subject:            21:08          Uh, well have they been removed? I don't know. I never see them. Like, they're sooo old. I think they finally did actually,

Interviewer:        21:17          I mean it's rare that you see non backwards compatible changes to the language. Right?

Subject:            21:21          Yeah. Well I think there was like a little bit of controversial and everybody was just like, really? It's trigraphs, what are you doing? [laughter] Um,

Interviewer:        21:29          I just, I assumed that was something that was popular, not in America because we don't see them here. cause our keyboards or,"
8888,20665,20979,History Lesson,"Yeah. Yeah. That make sense. I've never, I've never seen them in the wild except in like obfuscated C competitions. Everybody. But like even they got over them like 20 years ago. It was, wow, you can obfuscate everything with this technique. Okay. Let's find more clever ways to obfuscate things. So they got bored"
8888,20665,20979,IOCCC,"Yeah. Yeah. That make sense. I've never, I've never seen them in the wild except in like obfuscated C competitions. Everybody. But like even they got over them like 20 years ago. It was, wow, you can obfuscate everything with this technique. Okay. Let's find more clever ways to obfuscate things. So they got bored"
8888,20981,21123,Sure,"Um, yeah, no, I mean I really hate this feature, but like, yeah, I'm sure that this is how the works. Yeah. And uh, so yeah. Just do the math."
8888,20981,21123,Math is easy or hard,"Um, yeah, no, I mean I really hate this feature, but like, yeah, I'm sure that this is how the works. Yeah. And uh, so yeah. Just do the math."
8888,20981,21123,Language Value Judgement,"Um, yeah, no, I mean I really hate this feature, but like, yeah, I'm sure that this is how the works. Yeah. And uh, so yeah. Just do the math."
8888,23327,23613,Learned from Parents,
8888,23327,23613,Learned by Reading Book,
8888,25454,26138,Amusement,
8888,25454,26138,Criticism of Study Design,
8888,34563,34662,Questioning Program Validity,
8888,34564,34662,Questioning Program Validity (correctly),
8888,35149,35202,Snippet Value Judgement,"Yeah, it seems like a pretty straightforward screwup."
8888,35466,35714,Tooling,"No, just like Clang warnings. So crank it up high enough, they'll find it. GCC will find, Clang will find it, you know, my shitty compiler that I wrote as a joke, won't find it, but you know, that's why I don't use that in production. So [Laughter]"
8888,35466,35714,Amusement,"No, just like Clang warnings. So crank it up high enough, they'll find it. GCC will find, Clang will find it, you know, my shitty compiler that I wrote as a joke, won't find it, but you know, that's why I don't use that in production. So [Laughter]"
8888,35841,35945,Surprising comment,"Actually I might've programmed that out of the grammar, I don't remember. Um, yeah, so, so yeah, like I,"
8888,35841,35945,Language Value Judgement,"Actually I might've programmed that out of the grammar, I don't remember. Um, yeah, so, so yeah, like I,"
8888,35983,36837,Language Value Judgement,"Snippet 11] I remember the, And and Or in, in c are goofy specifically because, um, it used to be overloaded for the logical and the boolean version of the operators, um, way back and maybe you don't like B, and then they later split them, but they didn't update the precedence because it was deemed too much work to fix like the, I dunno, thousand lines or whatever, several thousand lines of code that existed at the time. So we're stuck with all this terrible, uh, precedents ordering on bitwise And and Or, which is why those need a ton of parentheses, but this is the logical version as the operators, and this is a more, yeah. So, yeah. So it would have to be like right associative with the same precedence or, Or over or, Or more tightly than And, and those, I, I, I literally could not name a language where either of those things would be true."
8888,35983,36837,History Lesson,"Snippet 11] I remember the, And and Or in, in c are goofy specifically because, um, it used to be overloaded for the logical and the boolean version of the operators, um, way back and maybe you don't like B, and then they later split them, but they didn't update the precedence because it was deemed too much work to fix like the, I dunno, thousand lines or whatever, several thousand lines of code that existed at the time. So we're stuck with all this terrible, uh, precedents ordering on bitwise And and Or, which is why those need a ton of parentheses, but this is the logical version as the operators, and this is a more, yeah. So, yeah. So it would have to be like right associative with the same precedence or, Or over or, Or more tightly than And, and those, I, I, I literally could not name a language where either of those things would be true."
8888,37380,37634,Language Value Judgement,"Definitely. I mean, I, I think I just want to make that like either, I mean, I'm sure, well, I'm not sure. I'm pretty sure it's a warning. Um, and it may, yeah, I think it should be an error. But of course they're never going to make it one, so whatever."
8888,38549,38699,Potential Confusing Constructs,Subject:            44:46          It's the mod operator. Could have gotten interesting if there were negative or events that I had to think about it.
8888,38549,38699,Modulus,Subject:            44:46          It's the mod operator. Could have gotten interesting if there were negative or events that I had to think about it.
8888,38829,38909,Boundary Testing,like specifically a negative devisor would like I'd never think about that case.
8888,39052,39212,Design Concerns,"
Subject:            45:17          And I guess they design it so that like if you flip the sign at both of them, it should do the same thing I think was there,"
8888,39088,39317,Remember,"And I guess they design it so that like if you flip the sign at both of them, it should do the same thing I think was there,

Subject:            45:26          uh, I don't remember. There's a couple of logical ways to do it. And"
8888,39088,39317,Mental Model,"And I guess they design it so that like if you flip the sign at both of them, it should do the same thing I think was there,

Subject:            45:26          uh, I don't remember. There's a couple of logical ways to do it. And"
8888,39579,40372,Remember,"Well truncating division, there's floor division and there's Euclidean division and Euclidean always wants a, a positive remainder. And then floor division is literally just do the division and take the floor. And truncating I think is literally do the division and then get them get, get whatever the integer part of the result is. The one closest to zero and then, yeah. And then the remainder should always satisfy the equation. You know, the, the numbers equal to the, um, the quotient times the divisor plus the remainder. Yeah. And I, I'm pretty sure that C's operators obey that, although maybe they don't, I don't, I know they do it in python because pythons like floor division, um, anyway, I don't even remember. I like Euclidean division, but I don't think anybody's implemented it."
8888,39579,40372,Counterfactual Semantics,"Well truncating division, there's floor division and there's Euclidean division and Euclidean always wants a, a positive remainder. And then floor division is literally just do the division and take the floor. And truncating I think is literally do the division and then get them get, get whatever the integer part of the result is. The one closest to zero and then, yeah. And then the remainder should always satisfy the equation. You know, the, the numbers equal to the, um, the quotient times the divisor plus the remainder. Yeah. And I, I'm pretty sure that C's operators obey that, although maybe they don't, I don't, I know they do it in python because pythons like floor division, um, anyway, I don't even remember. I like Euclidean division, but I don't think anybody's implemented it."
8888,39579,40372,Contrasting different languages,"Well truncating division, there's floor division and there's Euclidean division and Euclidean always wants a, a positive remainder. And then floor division is literally just do the division and take the floor. And truncating I think is literally do the division and then get them get, get whatever the integer part of the result is. The one closest to zero and then, yeah. And then the remainder should always satisfy the equation. You know, the, the numbers equal to the, um, the quotient times the divisor plus the remainder. Yeah. And I, I'm pretty sure that C's operators obey that, although maybe they don't, I don't, I know they do it in python because pythons like floor division, um, anyway, I don't even remember. I like Euclidean division, but I don't think anybody's implemented it."
8888,39053,40372,Inferring Semantics from Reasoning,"Subject:            45:17          And I guess they design it so that like if you flip the sign at both of them, it should do the same thing I think was there,

Subject:            45:26          uh, I don't remember. There's a couple of logical ways to do it. And

Interviewer:        45:31          Because they're also, there's also the remainder operation, which a lot of languages implement, which is different from mod. But those are the only two I've ever seen. So I don't know how,

Subject:            45:42          Well truncating division, there's floor division and there's Euclidean division and Euclidean always wants a, a positive remainder. And then floor division is literally just do the division and take the floor. And truncating I think is literally do the division and then get them get, get whatever the integer part of the result is. The one closest to zero and then, yeah. And then the remainder should always satisfy the equation. You know, the, the numbers equal to the, um, the quotient times the divisor plus the remainder. Yeah. And I, I'm pretty sure that C's operators obey that, although maybe they don't, I don't, I know they do it in python because pythons like floor division, um, anyway, I don't even remember. I like Euclidean division, but I don't think anybody's implemented it."
8888,40520,40590,Performance Optimization,"and then you have to have like an extra, you know, predictable branch."
8888,40626,41360,Performance Optimization," But yeah, like they don't want to slow it down and they just want to give you whatever [inaudible] does. Although, um I guess C plus plus like recently went to truncating only, right? So there was some change in I think in c plus plus 11 or are they just kind of went, they said, no, it's going to be this way. You know, I mean, maybe they got tired of like a couple of, I don't know. I feel like as the compiler writers like exploit this undefined behavior more and then people complain about it and they just lock down the standards because like, if it's, you know, like if the weird behaviors off on some shitty little DSP thing, then whatever, who cares? Like, you know, they'll deal with it and it will be nominally C plus plus."
8888,40626,41360,History Lesson," But yeah, like they don't want to slow it down and they just want to give you whatever [inaudible] does. Although, um I guess C plus plus like recently went to truncating only, right? So there was some change in I think in c plus plus 11 or are they just kind of went, they said, no, it's going to be this way. You know, I mean, maybe they got tired of like a couple of, I don't know. I feel like as the compiler writers like exploit this undefined behavior more and then people complain about it and they just lock down the standards because like, if it's, you know, like if the weird behaviors off on some shitty little DSP thing, then whatever, who cares? Like, you know, they'll deal with it and it will be nominally C plus plus."
8888,40626,41360,Design Concerns," But yeah, like they don't want to slow it down and they just want to give you whatever [inaudible] does. Although, um I guess C plus plus like recently went to truncating only, right? So there was some change in I think in c plus plus 11 or are they just kind of went, they said, no, it's going to be this way. You know, I mean, maybe they got tired of like a couple of, I don't know. I feel like as the compiler writers like exploit this undefined behavior more and then people complain about it and they just lock down the standards because like, if it's, you know, like if the weird behaviors off on some shitty little DSP thing, then whatever, who cares? Like, you know, they'll deal with it and it will be nominally C plus plus."
8888,41361,41504,Design Concerns,"But like, you know, once the compiler writers start making everybody deal with it they like revolt and then the change standard, so. [Laughter]"
8888,41361,41504,Language Standard,"But like, you know, once the compiler writers start making everybody deal with it they like revolt and then the change standard, so. [Laughter]"
8888,41361,41504,Amusement,"But like, you know, once the compiler writers start making everybody deal with it they like revolt and then the change standard, so. [Laughter]"
8888,41639,41730,Boundary Testing,"Yes. Um, yeah. So this, this is pretty straight forward, no unsigned types, no big numbers."
8888,41639,41730,Simple,"Yes. Um, yeah. So this, this is pretty straight forward, no unsigned types, no big numbers."
8888,41952,41981,Simple,Pretty straightforward. Yeah.
8888,42387,42471,Language Value Judgement,"[Long sigh] Yeah, octal. It's a terrible notation for it, but yeah, what can you do."
1157,551,836,Correct Semantics,"Subject:            00:18          Sure. All right. So V is equal to zero. 10 Mod three is one, one is not zero. So one evaluates to true and uh, integral to bool context making V one now four where it was zero and then we're going to print 4, so it's going to output 4 and a new line."
1157,551,836,Modulus,"Subject:            00:18          Sure. All right. So V is equal to zero. 10 Mod three is one, one is not zero. So one evaluates to true and uh, integral to bool context making V one now four where it was zero and then we're going to print 4, so it's going to output 4 and a new line."
1157,1143,1232,Language Value Judgement,anything equivalent to zero is false and anything else is true cause C is a steaming pile
1157,1143,1232,Quote,anything equivalent to zero is false and anything else is true cause C is a steaming pile
1157,1077,1291,Boolean Value of Integer,"Oh, because I know in int to bool conversion, anything with zero, anything equivalent to zero is false and anything else is true cause C is a steaming pile. Um, and so 10 mod three is one which is going to be true."
1157,1077,1291,Correct Semantics,"Oh, because I know in int to bool conversion, anything with zero, anything equivalent to zero is false and anything else is true cause C is a steaming pile. Um, and so 10 mod three is one which is going to be true."
1157,1042,1291,Modulus,"Subject:            00:57          Oh, because I know in int to bool conversion, anything with zero, anything equivalent to zero is false and anything else is true cause C is a steaming pile. Um, and so 10 mod three is one which is going to be true."
1157,1456,1757,Boolean Value of Integer,"C, like you really shouldn't do int to bool conversions in a language and C, just has this long history of like, uh yeah, if it kind of maybe kind of squawks like a bool. Like if I can represent it as a bit pattern. Oh, I can kind of suss out it's bool-y-ness, it's fine. It does it with pointers too."
1157,1456,1757,Language Value Judgement,"C, like you really shouldn't do int to bool conversions in a language and C, just has this long history of like, uh yeah, if it kind of maybe kind of squawks like a bool. Like if I can represent it as a bit pattern. Oh, I can kind of suss out it's bool-y-ness, it's fine. It does it with pointers too."
1157,1898,1927,Recurring Problem, It's too easy to write bugs.
1157,1899,1927,Boolean Value of Integer,It's too easy to write bugs.
1157,2115,2502,Surprising comment,"Um, so there is a specific bug I'm thinking about. It's not one I wrote, but if you have a pointer to bool, it's very easy to check the pointer for nullness when you thought you were checking the bool value of the pointer, um, that that particular bug caused a major outage for [company] that very nearly lost customer data in [product]. We had to go to tape backup to get the data back."
1157,2115,2502,Anecdote,"Um, so there is a specific bug I'm thinking about. It's not one I wrote, but if you have a pointer to bool, it's very easy to check the pointer for nullness when you thought you were checking the bool value of the pointer, um, that that particular bug caused a major outage for [company] that very nearly lost customer data in [product]. We had to go to tape backup to get the data back."
1157,2115,2502,Boolean Value of Integer,"Um, so there is a specific bug I'm thinking about. It's not one I wrote, but if you have a pointer to bool, it's very easy to check the pointer for nullness when you thought you were checking the bool value of the pointer, um, that that particular bug caused a major outage for [company] that very nearly lost customer data in [product]. We had to go to tape backup to get the data back."
1157,3659,3842,Surprising comment,"Uh, the others are actually in an indeterminate state at the moment because we have no guarantee of like in Java they'd be zero initialized, but this is, C you go to hell and you die."
1157,3659,3842,Contrasting different languages,"Uh, the others are actually in an indeterminate state at the moment because we have no guarantee of like in Java they'd be zero initialized, but this is, C you go to hell and you die."
1157,3659,3842,Java,"Uh, the others are actually in an indeterminate state at the moment because we have no guarantee of like in Java they'd be zero initialized, but this is, C you go to hell and you die."
1157,3659,3842,Language Value Judgement,"Uh, the others are actually in an indeterminate state at the moment because we have no guarantee of like in Java they'd be zero initialized, but this is, C you go to hell and you die."
1157,3659,3842,Uninitialized,"Uh, the others are actually in an indeterminate state at the moment because we have no guarantee of like in Java they'd be zero initialized, but this is, C you go to hell and you die."
1157,5374,5547,Simple,"Uh, I mean it's a poorly written just descending loop, but it's structure is relatively obvious once you go through it once. So it's just not that interesting. It's not hard"
1157,5374,5547,Bottom-up comprehension,"Uh, I mean it's a poorly written just descending loop, but it's structure is relatively obvious once you go through it once. So it's just not that interesting. It's not hard"
1157,5374,5547,Snippet Value Judgement,"Uh, I mean it's a poorly written just descending loop, but it's structure is relatively obvious once you go through it once. So it's just not that interesting. It's not hard"
1157,5794,5916,Anecdote," I used to write a compiler that targeted the JVM. Um, I'm also just a languages nerd. So I know a lot of corner languages"
1157,5794,5916,Java," I used to write a compiler that targeted the JVM. Um, I'm also just a languages nerd. So I know a lot of corner languages"
1157,5918,6354,Uninitialized,"so like an interesting observation in this is this guy at slot three here is never actually initialized to anything. Um, and so it's value is still in determinate. And like had, I didn't know at the time when we got down to it that we were never going to read from anything other than V Bracket 4. But had we read from any of the others, I would have had to start thinking about like, oh, this is undefined behavior or things like that."
1157,6929,7110,Simple,"Because zero comparing to three is obvious is definitely false. And then you just have a ternary operator, which is fun for the dictation, but other than that, not that interesting."
1157,7213,7618,Precedence,"Yeah. Oh I suppose there is a tiny question of operator precedence, but I'm pretty sure the operator precedence works this way. If question mark had a tighter binding, the double equals you would evaluate three, which would be false and then go to four here, which would then say it's v one four which is false, which would put a zero in here. Um, but I'm pretty sure I know the operator precedence rules."
1157,7213,7618,Counterfactual Semantics,"Yeah. Oh I suppose there is a tiny question of operator precedence, but I'm pretty sure the operator precedence works this way. If question mark had a tighter binding, the double equals you would evaluate three, which would be false and then go to four here, which would then say it's v one four which is false, which would put a zero in here. Um, but I'm pretty sure I know the operator precedence rules."
1157,7714,8002,Correct Semantics,"[Snippet 46] 3:12. Alright, so we have our happy array. All right. Okay. So we take the address of V, V bracket one, so we basically have a pointer stored there. And then we dereference the pointer. Okay. Yeah, there's really nothing much more clever going on. So it's going to print one."
1157,7714,8002,Simple,"[Snippet 46] 3:12. Alright, so we have our happy array. All right. Okay. So we take the address of V, V bracket one, so we basically have a pointer stored there. And then we dereference the pointer. Okay. Yeah, there's really nothing much more clever going on. So it's going to print one."
1157,8150,8355,Comprehension Technique,"Uh, because the pointer arithmetic isn't that clever, right? Like this is just saying like, I want to put a finger here and I want to look at my, where my finger is and I don't have to do any mental jumps."
1157,8150,8355,Mental Model,"Uh, because the pointer arithmetic isn't that clever, right? Like this is just saying like, I want to put a finger here and I want to look at my, where my finger is and I don't have to do any mental jumps."
1157,8150,8355,Simple,"Uh, because the pointer arithmetic isn't that clever, right? Like this is just saying like, I want to put a finger here and I want to look at my, where my finger is and I don't have to do any mental jumps."
1157,8150,8355,Pointer Arithmetic (Not The Atom),"Uh, because the pointer arithmetic isn't that clever, right? Like this is just saying like, I want to put a finger here and I want to look at my, where my finger is and I don't have to do any mental jumps."
1157,8537,8875,Potential Confusing Constructs,"I mean if there was a loop where like we were saying like, okay, I'm going to grab, like I'm gonna take the reference from v one to v two and then I'm going to have a loop that does some math and that says V2 plus equals, you know, some bit of math and you're like, okay, now I'm offsetting from here further, deeper and things like that."
1157,9064,9109,Snippet Value Judgement,"Ooh, the comma operator. We're feeling spicy."
1157,9818,9849,Non-standard terminology,initializers are a special form
1157,9053,9850,Inferring Semantics from Reasoning,"All right. Ooh, the comma operator. We're feeling spicy. All right. So, uh, V2 gets one and then the comma operator throws away everything else, So V1 gets two. And then we are going to print two one. Okay. 3:14. Oh, what is the precedence of Comma? That's an interesting question. Oh No, no, no.

Subject:            09:37          Yeah, no, I'm sticking with it. 3:14. I am less certain if this, um, so there's a tiny chance that comma binds less tightly than single equals in which case the result would have been two two. Um, but I don't think it does because that would have made that make, that would make initializers of the form. int i equals one comma j equals two really painful for the parser. So I don't think they did that, but it's also possible that initializers are a special form."
1157,9053,9850,Unsure,"All right. Ooh, the comma operator. We're feeling spicy. All right. So, uh, V2 gets one and then the comma operator throws away everything else, So V1 gets two. And then we are going to print two one. Okay. 3:14. Oh, what is the precedence of Comma? That's an interesting question. Oh No, no, no.

Subject:            09:37          Yeah, no, I'm sticking with it. 3:14. I am less certain if this, um, so there's a tiny chance that comma binds less tightly than single equals in which case the result would have been two two. Um, but I don't think it does because that would have made that make, that would make initializers of the form. int i equals one comma j equals two really painful for the parser. So I don't think they did that, but it's also possible that initializers are a special form."
1157,9053,9850,Precedence,"All right. Ooh, the comma operator. We're feeling spicy. All right. So, uh, V2 gets one and then the comma operator throws away everything else, So V1 gets two. And then we are going to print two one. Okay. 3:14. Oh, what is the precedence of Comma? That's an interesting question. Oh No, no, no.

Subject:            09:37          Yeah, no, I'm sticking with it. 3:14. I am less certain if this, um, so there's a tiny chance that comma binds less tightly than single equals in which case the result would have been two two. Um, but I don't think it does because that would have made that make, that would make initializers of the form. int i equals one comma j equals two really painful for the parser. So I don't think they did that, but it's also possible that initializers are a special form."
1157,10149,10802,Would Have Written it Differently,"All right. Ooh, let's see. See here, we're starting to get to a pointer arithmetic again. Hmm. All right. So we have our little slots of this is just V1 one plus one. Okay. So we stuck a finger here and then we indexed it. Great. Yup. Okay. So it prints two, right? The only, yeah, it's 3:15 still and I'm completely confident. So the only bit of clever thing here is it this, when you do this plus right here, uh, this is decaying from array to pointer and then you're doing the plus one to get the next pointer. And then we dereference it. It is equivalent to the other form. But mildly more clever, I try not to do implicit decay of array to pointer."
1157,10149,10802,Sure,"All right. Ooh, let's see. See here, we're starting to get to a pointer arithmetic again. Hmm. All right. So we have our little slots of this is just V1 one plus one. Okay. So we stuck a finger here and then we indexed it. Great. Yup. Okay. So it prints two, right? The only, yeah, it's 3:15 still and I'm completely confident. So the only bit of clever thing here is it this, when you do this plus right here, uh, this is decaying from array to pointer and then you're doing the plus one to get the next pointer. And then we dereference it. It is equivalent to the other form. But mildly more clever, I try not to do implicit decay of array to pointer."
1157,10149,10802,Clever,"All right. Ooh, let's see. See here, we're starting to get to a pointer arithmetic again. Hmm. All right. So we have our little slots of this is just V1 one plus one. Okay. So we stuck a finger here and then we indexed it. Great. Yup. Okay. So it prints two, right? The only, yeah, it's 3:15 still and I'm completely confident. So the only bit of clever thing here is it this, when you do this plus right here, uh, this is decaying from array to pointer and then you're doing the plus one to get the next pointer. And then we dereference it. It is equivalent to the other form. But mildly more clever, I try not to do implicit decay of array to pointer."
1157,10149,10802,Pointer Arithmetic (Not The Atom),"All right. Ooh, let's see. See here, we're starting to get to a pointer arithmetic again. Hmm. All right. So we have our little slots of this is just V1 one plus one. Okay. So we stuck a finger here and then we indexed it. Great. Yup. Okay. So it prints two, right? The only, yeah, it's 3:15 still and I'm completely confident. So the only bit of clever thing here is it this, when you do this plus right here, uh, this is decaying from array to pointer and then you're doing the plus one to get the next pointer. And then we dereference it. It is equivalent to the other form. But mildly more clever, I try not to do implicit decay of array to pointer."
1157,10927,11021,Alternative Idioms,"Um, I would probably have used a vector or something. Just like some other data type entirely."
1157,11221,11268,Boolean Value of Integer,So zero is false already and false and anything
1157,11270,11497,Mental Model,"Oh crap-monkies. All right. Now you want me to remember what has higher precedence And and Or, but we all know that And is equivalent to multiplication and Or is equivalent to plus and as a result And binds more tightly than Or"
1157,11270,11497,Precedence,"Oh crap-monkies. All right. Now you want me to remember what has higher precedence And and Or, but we all know that And is equivalent to multiplication and Or is equivalent to plus and as a result And binds more tightly than Or"
1157,11270,11497,Quote,"Oh crap-monkies. All right. Now you want me to remember what has higher precedence And and Or, but we all know that And is equivalent to multiplication and Or is equivalent to plus and as a result And binds more tightly than Or"
1157,11828,11982,Math is easy or hard,"Uh, so, um, as we've all been doing arithmetic since we were children, we all know that A times B plus C binds the A times B more tightly than the plus C."
1157,11828,12500,Precedence,"Uh, so, um, as we've all been doing arithmetic since we were children, we all know that A times B plus C binds the A times B more tightly than the plus C. Um, and if you look at sort of the rules of logic as conveyed from multiple, from the ring of operations of plus and times, uh, plus is equivalent to Or and times is equivalent to And and thus, And binds more tightly then Or, yeah. And this is just how I remember this. Um, and as a mnemonic I've been using for decades. And so that's how I know that this Or is going to bind more loosely and then I have something some that turns out to be false, but I don't care Or'd with something true. So the end result is true."
1157,11828,12500,Mental Model,"Uh, so, um, as we've all been doing arithmetic since we were children, we all know that A times B plus C binds the A times B more tightly than the plus C. Um, and if you look at sort of the rules of logic as conveyed from multiple, from the ring of operations of plus and times, uh, plus is equivalent to Or and times is equivalent to And and thus, And binds more tightly then Or, yeah. And this is just how I remember this. Um, and as a mnemonic I've been using for decades. And so that's how I know that this Or is going to bind more loosely and then I have something some that turns out to be false, but I don't care Or'd with something true. So the end result is true."
1157,12979,13061,Simple,So why am I positive? Because it's just like straight forward linear control flow.
1157,13316,13762,Evaluation Order,"Um, because you don't have like. The only mistake feasible for someone to make in this is like, ""Ah, well here it's four. And so this should be four plus four, but like there's nothing clever happening like nothing and C allows for that kind of lazy backpropagation like that's much more of a functional reactive programming thing, which C just like does not do. And so you just have to evaluate it from top to bottom and make the obvious things."
1157,13316,13762,Contrasting different languages,"Um, because you don't have like. The only mistake feasible for someone to make in this is like, ""Ah, well here it's four. And so this should be four plus four, but like there's nothing clever happening like nothing and C allows for that kind of lazy backpropagation like that's much more of a functional reactive programming thing, which C just like does not do. And so you just have to evaluate it from top to bottom and make the obvious things."
1157,13316,13762,Simple,"Um, because you don't have like. The only mistake feasible for someone to make in this is like, ""Ah, well here it's four. And so this should be four plus four, but like there's nothing clever happening like nothing and C allows for that kind of lazy backpropagation like that's much more of a functional reactive programming thing, which C just like does not do. And so you just have to evaluate it from top to bottom and make the obvious things."
1157,13316,13762,Counterfactual Semantics,"Um, because you don't have like. The only mistake feasible for someone to make in this is like, ""Ah, well here it's four. And so this should be four plus four, but like there's nothing clever happening like nothing and C allows for that kind of lazy backpropagation like that's much more of a functional reactive programming thing, which C just like does not do. And so you just have to evaluate it from top to bottom and make the obvious things."
1157,15152,15222,Learned by Reading Book,
1157,15152,15222,Learned by Programming,
1157,16225,16561,Learned by Programming,
1157,16225,16561,Anecdote,
1157,19437,19680,Experienced vs Inexperienced,
1157,19437,19680,Quote,
1157,22147,22715,Anecdote,
1157,22147,22715,C vs C++,
1157,22147,22715,Learned by Reading Book,
1157,25664,25734,Sure,
1157,26219,26318,Sure,"This one has an operator precedence that would be very slightly likely to be wrong, but not really."
1157,26417,26596,Unsure,"Uh, this one had the comma operator, which was the, so this is the one that was least confident on. I guess I would like to double check that comma binds more loosely than equals."
1157,26417,26596,Precedence,"Uh, this one had the comma operator, which was the, so this is the one that was least confident on. I guess I would like to double check that comma binds more loosely than equals."
1157,26369,26596,Discussion Question,"Subject             27:58          [Snippet 61] Uh, this one had the comma operator, which was the, so this is the one that was least confident on. I guess I would like to double check that comma binds more loosely than equals."
1157,26986,27267,Mental Model,"They're a special form. This is especially true. So I know this is true in c plus plus where the initializer list is actually a call to an implicit constructor, well not the initializer list, the equal sign in the declaration. Initializer lists being their own special ball of wax."
1157,27682,27751,Precedence,This one I'm pretty sure equality has tighter assignment than ternary
1157,27682,27751,Sure,This one I'm pretty sure equality has tighter assignment than ternary
1157,28099,28663,History Lesson,
1157,30061,30501,Haskell,
1157,31288,31507,SQL,
1157,31692,32012,Java,
1157,31692,32012,SQL,
1867,476,697,Correct Semantics,Snippet 109] Cool. Alright. Sample one oh nine. All right. So we've got this int we set to two and this like empty if statement that doesn't do anything and then we increment the thing once. So the output should be three.
1867,1212,1245,Sure,Yeah the confidence is very high.
1867,1572,1629,Non-standard terminology,this if without braces. So like it doesn't guard that one
1867,1480,1776,Code Review,"it's pretty straight forward program. Um, there's like, the only thing that's weird is like this if without braces. So like it doesn't guard that one, but it's nothing I haven't seen before. I would probably ask someone to like write it differently if they were going to write that, but you know."
1867,1480,1776,Would Have Written it Differently,"it's pretty straight forward program. Um, there's like, the only thing that's weird is like this if without braces. So like it doesn't guard that one, but it's nothing I haven't seen before. I would probably ask someone to like write it differently if they were going to write that, but you know."
1867,1480,1776,Previously Seen,"it's pretty straight forward program. Um, there's like, the only thing that's weird is like this if without braces. So like it doesn't guard that one, but it's nothing I haven't seen before. I would probably ask someone to like write it differently if they were going to write that, but you know."
1867,1480,1776,Uncommon pattern,"it's pretty straight forward program. Um, there's like, the only thing that's weird is like this if without braces. So like it doesn't guard that one, but it's nothing I haven't seen before. I would probably ask someone to like write it differently if they were going to write that, but you know."
1867,1480,1776,Simple,"it's pretty straight forward program. Um, there's like, the only thing that's weird is like this if without braces. So like it doesn't guard that one, but it's nothing I haven't seen before. I would probably ask someone to like write it differently if they were going to write that, but you know."
1867,1922,2485,Professional vs Academic," I mean, just, I always like having braces around the If because you never know if like you're going to want to do something later and start something later. Like it, you have to think about it a little bit. Also, you have this like if zero which you know, and why would you ever have that in, you know, real code, but um [laughs], that, yeah, I would, I always prefer to have braces even on one line Ifs just that you can keep them on the same line if you want to save the space, you know? But at least, you know, like, all right and you don't run into that bug."
1867,1922,2485,Amusement," I mean, just, I always like having braces around the If because you never know if like you're going to want to do something later and start something later. Like it, you have to think about it a little bit. Also, you have this like if zero which you know, and why would you ever have that in, you know, real code, but um [laughs], that, yeah, I would, I always prefer to have braces even on one line Ifs just that you can keep them on the same line if you want to save the space, you know? But at least, you know, like, all right and you don't run into that bug."
1867,1922,2485,Ambiguous Readability," I mean, just, I always like having braces around the If because you never know if like you're going to want to do something later and start something later. Like it, you have to think about it a little bit. Also, you have this like if zero which you know, and why would you ever have that in, you know, real code, but um [laughs], that, yeah, I would, I always prefer to have braces even on one line Ifs just that you can keep them on the same line if you want to save the space, you know? But at least, you know, like, all right and you don't run into that bug."
1867,1922,2485,Maintainability," I mean, just, I always like having braces around the If because you never know if like you're going to want to do something later and start something later. Like it, you have to think about it a little bit. Also, you have this like if zero which you know, and why would you ever have that in, you know, real code, but um [laughs], that, yeah, I would, I always prefer to have braces even on one line Ifs just that you can keep them on the same line if you want to save the space, you know? But at least, you know, like, all right and you don't run into that bug."
1867,1922,2485,Parenthesis," I mean, just, I always like having braces around the If because you never know if like you're going to want to do something later and start something later. Like it, you have to think about it a little bit. Also, you have this like if zero which you know, and why would you ever have that in, you know, real code, but um [laughs], that, yeah, I would, I always prefer to have braces even on one line Ifs just that you can keep them on the same line if you want to save the space, you know? But at least, you know, like, all right and you don't run into that bug."
1867,2588,2779,Example Problem,"The bug of like, oh, I wrote, you know, an If without the braces and then something else that was supposed to be guarded by the If afterwards, but it's not because I didn't put the braces in."
1867,2588,2779,Non-standard terminology,"The bug of like, oh, I wrote, you know, an If without the braces and then something else that was supposed to be guarded by the If afterwards, but it's not because I didn't put the braces in."
1867,2977,3182,Correct Semantics,"All right. All right. A couple ints. We've got this nice [chuckles] undeclared mis-declared int, um, eh if V1 equals two, which it doesn't. So we set V3 equal to five. Um, and I'm very positive about this."
1867,2977,3182,Sure,"All right. All right. A couple ints. We've got this nice [chuckles] undeclared mis-declared int, um, eh if V1 equals two, which it doesn't. So we set V3 equal to five. Um, and I'm very positive about this."
1867,2977,3182,Uninitialized,"All right. All right. A couple ints. We've got this nice [chuckles] undeclared mis-declared int, um, eh if V1 equals two, which it doesn't. So we set V3 equal to five. Um, and I'm very positive about this."
1867,2977,3182,Amusement,"All right. All right. A couple ints. We've got this nice [chuckles] undeclared mis-declared int, um, eh if V1 equals two, which it doesn't. So we set V3 equal to five. Um, and I'm very positive about this."
1867,3461,3973,Would Have Written it Differently,"Um, it's also, you know, pretty straightforward, just like reading a, an if statement and then an else statement, um, the, the un, the int declared like without anything is weird, just like, because C is weird with that and I can never remember the rules of like what exactly that does with the int and then I'd always have to look it up. And you know, um, I, if I was writing this, I would probably use like a ternary operator. If I was writing something like this and actual code. But you know, taste. [Laughs]"
1867,3461,3973,Alternative Idioms,"Um, it's also, you know, pretty straightforward, just like reading a, an if statement and then an else statement, um, the, the un, the int declared like without anything is weird, just like, because C is weird with that and I can never remember the rules of like what exactly that does with the int and then I'd always have to look it up. And you know, um, I, if I was writing this, I would probably use like a ternary operator. If I was writing something like this and actual code. But you know, taste. [Laughs]"
1867,3461,3973,Professional vs Academic,"Um, it's also, you know, pretty straightforward, just like reading a, an if statement and then an else statement, um, the, the un, the int declared like without anything is weird, just like, because C is weird with that and I can never remember the rules of like what exactly that does with the int and then I'd always have to look it up. And you know, um, I, if I was writing this, I would probably use like a ternary operator. If I was writing something like this and actual code. But you know, taste. [Laughs]"
1867,3461,3973,Would RTFM,"Um, it's also, you know, pretty straightforward, just like reading a, an if statement and then an else statement, um, the, the un, the int declared like without anything is weird, just like, because C is weird with that and I can never remember the rules of like what exactly that does with the int and then I'd always have to look it up. And you know, um, I, if I was writing this, I would probably use like a ternary operator. If I was writing something like this and actual code. But you know, taste. [Laughs]"
1867,3461,3973,Language Value Judgement,"Um, it's also, you know, pretty straightforward, just like reading a, an if statement and then an else statement, um, the, the un, the int declared like without anything is weird, just like, because C is weird with that and I can never remember the rules of like what exactly that does with the int and then I'd always have to look it up. And you know, um, I, if I was writing this, I would probably use like a ternary operator. If I was writing something like this and actual code. But you know, taste. [Laughs]"
1867,3461,3973,Uninitialized,"Um, it's also, you know, pretty straightforward, just like reading a, an if statement and then an else statement, um, the, the un, the int declared like without anything is weird, just like, because C is weird with that and I can never remember the rules of like what exactly that does with the int and then I'd always have to look it up. And you know, um, I, if I was writing this, I would probably use like a ternary operator. If I was writing something like this and actual code. But you know, taste. [Laughs]"
1867,3461,3973,Few things,"Um, it's also, you know, pretty straightforward, just like reading a, an if statement and then an else statement, um, the, the un, the int declared like without anything is weird, just like, because C is weird with that and I can never remember the rules of like what exactly that does with the int and then I'd always have to look it up. And you know, um, I, if I was writing this, I would probably use like a ternary operator. If I was writing something like this and actual code. But you know, taste. [Laughs]"
1867,3461,3973,Simple,"Um, it's also, you know, pretty straightforward, just like reading a, an if statement and then an else statement, um, the, the un, the int declared like without anything is weird, just like, because C is weird with that and I can never remember the rules of like what exactly that does with the int and then I'd always have to look it up. And you know, um, I, if I was writing this, I would probably use like a ternary operator. If I was writing something like this and actual code. But you know, taste. [Laughs]"
1867,3461,3973,Amusement,"Um, it's also, you know, pretty straightforward, just like reading a, an if statement and then an else statement, um, the, the un, the int declared like without anything is weird, just like, because C is weird with that and I can never remember the rules of like what exactly that does with the int and then I'd always have to look it up. And you know, um, I, if I was writing this, I would probably use like a ternary operator. If I was writing something like this and actual code. But you know, taste. [Laughs]"
1867,2977,3973,Non-standard terminology,"All right. All right. A couple ints. We've got this nice [chuckles] undeclared mis-declared int, um, eh if V1 equals two, which it doesn't. So we set V3 equal to five. Um, and I'm very positive about this.

Interviewer:        02:40          Okay. So why, why, well hold on, so let's put the time, 2:22.

Subject:            02:44          2:21, 2:22, okay, great.

Interviewer:        02:46          But why are you very confident about this one?

Subject:            02:49          Um, it's also, you know, pretty straightforward, just like reading a, an if statement and then an else statement, um, the, the un, the int declared like without anything is weird, just like, because C is weird with that and I can never remember the rules of like what exactly that does with the int and then I'd always have to look it up. And you know, um, I, if I was writing this, I would probably use like a ternary operator. If I was writing something like this and actual code. But you know, taste. [Laughs]"
1867,3799,3973,Quote," And you know, um, I, if I was writing this, I would probably use like a ternary operator. If I was writing something like this and actual code. But you know, taste. [Laughs]"
1867,4207,4408,Uninitialized,"Yeah, I mean in this case like where we were setting it, so it's pretty clear, but I always like have to double check, like, ""Oh, what happens?"" Because when you declare an int but you don't define it."
1867,4207,4408,Would RTFM,"Yeah, I mean in this case like where we were setting it, so it's pretty clear, but I always like have to double check, like, ""Oh, what happens?"" Because when you declare an int but you don't define it."
1867,4580,4995,C vs C++,"Well, so it's, it's, it's, I'm pretty sure it's not zeroed, but, and, and it's left at just like, like is it undefined behavior to access it or is it just set to whatever it happens to be set to? Um, like I'm pretty sure it's not, it's not zero. Um, when you declare it like this as opposed to like default. And then there's all like the different constructors and stuff, but that's c plus plus, and this is c code."
1867,4580,4995,Unsure,"Well, so it's, it's, it's, I'm pretty sure it's not zeroed, but, and, and it's left at just like, like is it undefined behavior to access it or is it just set to whatever it happens to be set to? Um, like I'm pretty sure it's not, it's not zero. Um, when you declare it like this as opposed to like default. And then there's all like the different constructors and stuff, but that's c plus plus, and this is c code."
1867,4580,4995,Correct Semantics,"Well, so it's, it's, it's, I'm pretty sure it's not zeroed, but, and, and it's left at just like, like is it undefined behavior to access it or is it just set to whatever it happens to be set to? Um, like I'm pretty sure it's not, it's not zero. Um, when you declare it like this as opposed to like default. And then there's all like the different constructors and stuff, but that's c plus plus, and this is c code."
1867,5032,5410,Design Concerns,"Um, cool. Awesome. Um, and then the other thing I wanted to ask about is, um, you mentioned you'd probably use a ternary operator here in practice. Um, why?

Subject:            04:26          Um, honestly to avoid having a separate declarations and definitions. I would just, you know, int V3 equals, you know, is V1 2? 3, otherwise 5, and then have it all in one the statement"
1867,5032,5410,Alternative Idioms,"Um, cool. Awesome. Um, and then the other thing I wanted to ask about is, um, you mentioned you'd probably use a ternary operator here in practice. Um, why?

Subject:            04:26          Um, honestly to avoid having a separate declarations and definitions. I would just, you know, int V3 equals, you know, is V1 2? 3, otherwise 5, and then have it all in one the statement"
1867,5488,5689,Incorrect Semantics,"Or otherwise. I would just do the declaration that definition inside here if I couldn't do that for whatever, like inside the If or the Else so you don't have this hanging declaration without anything."
1867,5488,5689,Alternative Idioms,"Or otherwise. I would just do the declaration that definition inside here if I couldn't do that for whatever, like inside the If or the Else so you don't have this hanging declaration without anything."
1867,6487,6672,printf,"All right. Oh, we've got a float and we're printf'ing it with a percent d I never know about printf syntax, I never use it [nervous laughter]. Um, oh we're setting int to V2 to V1. Umm."
1867,6487,6672,Unsure,"All right. Oh, we've got a float and we're printf'ing it with a percent d I never know about printf syntax, I never use it [nervous laughter]. Um, oh we're setting int to V2 to V1. Umm."
1867,6487,6672,Amusement,"All right. Oh, we've got a float and we're printf'ing it with a percent d I never know about printf syntax, I never use it [nervous laughter]. Um, oh we're setting int to V2 to V1. Umm."
1867,6709,6995,Author Intention,"Yeah, I mean in a, in a, if this was a code review I'd tell someone why are you doing that in the first place? But um, I'm pretty sure that the behavior here is that the output is one, but I'm like, I'm like a five, maybe a four actually. I'm gonna put four. I'm like 50 50 on it, yeah."
1867,6709,6995,Would Have Written it Differently,"Yeah, I mean in a, in a, if this was a code review I'd tell someone why are you doing that in the first place? But um, I'm pretty sure that the behavior here is that the output is one, but I'm like, I'm like a five, maybe a four actually. I'm gonna put four. I'm like 50 50 on it, yeah."
1867,6709,6995,Code Review,"Yeah, I mean in a, in a, if this was a code review I'd tell someone why are you doing that in the first place? But um, I'm pretty sure that the behavior here is that the output is one, but I'm like, I'm like a five, maybe a four actually. I'm gonna put four. I'm like 50 50 on it, yeah."
1867,7175,7687,Author Intention,"Um, just cause I, I, I'm like fairly sure I remember that when you do this, it rounds down, but like I'm not, I'm not sure what the exact like that it does that it will truncate off the, the fractional part, but I haven't done something like that in a while. And I'd probably like write a little test program to double check it. And in general I would ask the person why they have to assign an into a float. And if they want to round, they should like explicitly round, like use a, a floor function or something."
1867,7175,7687,Double Check,"Um, just cause I, I, I'm like fairly sure I remember that when you do this, it rounds down, but like I'm not, I'm not sure what the exact like that it does that it will truncate off the, the fractional part, but I haven't done something like that in a while. And I'd probably like write a little test program to double check it. And in general I would ask the person why they have to assign an into a float. And if they want to round, they should like explicitly round, like use a, a floor function or something."
1867,7175,7687,Long ago,"Um, just cause I, I, I'm like fairly sure I remember that when you do this, it rounds down, but like I'm not, I'm not sure what the exact like that it does that it will truncate off the, the fractional part, but I haven't done something like that in a while. And I'd probably like write a little test program to double check it. And in general I would ask the person why they have to assign an into a float. And if they want to round, they should like explicitly round, like use a, a floor function or something."
1867,7175,7687,Correct Semantics,"Um, just cause I, I, I'm like fairly sure I remember that when you do this, it rounds down, but like I'm not, I'm not sure what the exact like that it does that it will truncate off the, the fractional part, but I haven't done something like that in a while. And I'd probably like write a little test program to double check it. And in general I would ask the person why they have to assign an into a float. And if they want to round, they should like explicitly round, like use a, a floor function or something."
1867,7175,7687,Sure,"Um, just cause I, I, I'm like fairly sure I remember that when you do this, it rounds down, but like I'm not, I'm not sure what the exact like that it does that it will truncate off the, the fractional part, but I haven't done something like that in a while. And I'd probably like write a little test program to double check it. And in general I would ask the person why they have to assign an into a float. And if they want to round, they should like explicitly round, like use a, a floor function or something."
1867,8109,8148,Incorrect Semantics,"and we're, and we're printing it twice."
1867,8149,8631,Correct Semantics,"Okay. With uh, with the space and a new line and stuff and this plus V-eye plus plus, so or V1 plus plus and that post increments. So you have like three and then it'll be three plus two and then increment it afterwards. So then afterwards V1 will be three and V2 will be five cause you added it to the old one. So now I'm like, yeah, V1 equals three V2 equals five. And so then the output is a V... Is three space five. Um, and then I'm like a five on that one I'm pretty confident"
1867,8757,9010,Complex,"Um, I, I'm pretty confident of it but a little bit down because it's like, you know, a slightly like convoluted you know statement with the post increment but also adding to it and it's like a bunch of stuff happening all in one statement. And um, yeah."
1867,9165,9384,Sure,"Um, if it was wrong, it would be in like what the value of of V two is, is like, I'm pretty sure that it's five. Um, but that's, I'm like, I'm like 99% certain of this. I've, you know, like, but I'm not like 100%. Yeah."
1867,9165,9384,Paranoia,"Um, if it was wrong, it would be in like what the value of of V two is, is like, I'm pretty sure that it's five. Um, but that's, I'm like, I'm like 99% certain of this. I've, you know, like, but I'm not like 100%. Yeah."
1867,9501,9577,Quote,[Snippet 73] I'm always surprised that programs ever work at all [laughter].
1867,9501,9577,Paranoia,[Snippet 73] I'm always surprised that programs ever work at all [laughter].
1867,9501,9577,Amusement,[Snippet 73] I'm always surprised that programs ever work at all [laughter].
1867,9500,9638,Complex," [Snippet 73] I'm always surprised that programs ever work at all [laughter]. Like this, how many things had to go right for this to work?"
1867,9638,9967,Correct Semantics," Um, all right. So we have these two ints and we do the v two equals, but with only one equal sign in it. So it's not actually checking that there's a equals equals and it, I believe that gets if one, because that's the value that we set V2 so it will go into the first block and set v one equals three and like that equal sign. "
1867,9967,10092,Sure,"So then v one is going to be three and that's what we're printing out. Yeah. Um, and I'm pretty confident about that one too."
1867,10131,10575,Would Have Written it Differently,"With my only like unsure of is like, I'm pretty sure that this this expression, the V2 equals one will like have a value of one within the if statement. Um, but yeah, like another one of those things that is just like avoid doing because you have to think about it and there's easier ways that are less, less like you know, if you can do it in a way that is like, doesn't make you have to ask questions and does the same thing, then like, yeah."
1867,10131,10575,Unsure,"With my only like unsure of is like, I'm pretty sure that this this expression, the V2 equals one will like have a value of one within the if statement. Um, but yeah, like another one of those things that is just like avoid doing because you have to think about it and there's easier ways that are less, less like you know, if you can do it in a way that is like, doesn't make you have to ask questions and does the same thing, then like, yeah."
1867,10284,10575,Ambiguous Readability,"Um, but yeah, like another one of those things that is just like avoid doing because you have to think about it and there's easier ways that are less, less like you know, if you can do it in a way that is like, doesn't make you have to ask questions and does the same thing, then like, yeah."
1867,10761,11004,Correct Semantics,"Alright, [inaudible] an int and another one where we pre increment V1. So now V1 one is three and then subtract two. So v two is one and v one is three, so it should be three and one. That's our outputs. That's um, yeah. And, end time is 2:30."
1867,11300,11599,Sure," Uh, it's this the same like it's a, you know, it's, it's a complex statement and like, you know, I'm pretty sure I understand it, but you know, there's a chance it might be, you know, like just putting together the pieces wrong today or something, you know, like, and it's like slightly convoluted."
1867,11300,11599,Paranoia," Uh, it's this the same like it's a, you know, it's, it's a complex statement and like, you know, I'm pretty sure I understand it, but you know, there's a chance it might be, you know, like just putting together the pieces wrong today or something, you know, like, and it's like slightly convoluted."
1867,11300,11599,Complex," Uh, it's this the same like it's a, you know, it's, it's a complex statement and like, you know, I'm pretty sure I understand it, but you know, there's a chance it might be, you know, like just putting together the pieces wrong today or something, you know, like, and it's like slightly convoluted."
1867,11300,11599,Similar To," Uh, it's this the same like it's a, you know, it's, it's a complex statement and like, you know, I'm pretty sure I understand it, but you know, there's a chance it might be, you know, like just putting together the pieces wrong today or something, you know, like, and it's like slightly convoluted."
1867,11791,12242,Simple,"Uh, just that there's so many ways, like weird corner cases in c and c plus plus. And I think I've just, I've run into enough of them over the last few years that I just don't trust any. Like if I see that, I'm always have to, like I have my guard up when I'm reading like C and c plus plus code because there's so many and like no one has it all memorized. No one knows everything that can bite you. Yeah. Like even for a simple code like this? Yeah."
1867,11791,12242,Complex,"Uh, just that there's so many ways, like weird corner cases in c and c plus plus. And I think I've just, I've run into enough of them over the last few years that I just don't trust any. Like if I see that, I'm always have to, like I have my guard up when I'm reading like C and c plus plus code because there's so many and like no one has it all memorized. No one knows everything that can bite you. Yeah. Like even for a simple code like this? Yeah."
1867,11791,12242,Remember,"Uh, just that there's so many ways, like weird corner cases in c and c plus plus. And I think I've just, I've run into enough of them over the last few years that I just don't trust any. Like if I see that, I'm always have to, like I have my guard up when I'm reading like C and c plus plus code because there's so many and like no one has it all memorized. No one knows everything that can bite you. Yeah. Like even for a simple code like this? Yeah."
1867,11791,12242,Paranoia,"Uh, just that there's so many ways, like weird corner cases in c and c plus plus. And I think I've just, I've run into enough of them over the last few years that I just don't trust any. Like if I see that, I'm always have to, like I have my guard up when I'm reading like C and c plus plus code because there's so many and like no one has it all memorized. No one knows everything that can bite you. Yeah. Like even for a simple code like this? Yeah."
1867,11791,12242,Learned from Mistake,"Uh, just that there's so many ways, like weird corner cases in c and c plus plus. And I think I've just, I've run into enough of them over the last few years that I just don't trust any. Like if I see that, I'm always have to, like I have my guard up when I'm reading like C and c plus plus code because there's so many and like no one has it all memorized. No one knows everything that can bite you. Yeah. Like even for a simple code like this? Yeah."
1867,11791,12242,Language Value Judgement,"Uh, just that there's so many ways, like weird corner cases in c and c plus plus. And I think I've just, I've run into enough of them over the last few years that I just don't trust any. Like if I see that, I'm always have to, like I have my guard up when I'm reading like C and c plus plus code because there's so many and like no one has it all memorized. No one knows everything that can bite you. Yeah. Like even for a simple code like this? Yeah."
1867,11791,12242,Boundary Testing,"Uh, just that there's so many ways, like weird corner cases in c and c plus plus. And I think I've just, I've run into enough of them over the last few years that I just don't trust any. Like if I see that, I'm always have to, like I have my guard up when I'm reading like C and c plus plus code because there's so many and like no one has it all memorized. No one knows everything that can bite you. Yeah. Like even for a simple code like this? Yeah."
1867,12569,12596,Mental Model,because arrays are pointers
1867,12406,12732,Correct Semantics,"all right, we've got an array. Um, okay. So we've got an array of ints and then v one plus one is going to be a pointer that points at the second element in v one because arrays are pointers. And so then if we dereference that we should get 2, and then I'll, I'll give, I'll give a six on that. I'm pretty sure about that one."
1867,12921,12985,Mental Model,"like cus pointers in arrays are kind of the same basically, in C"
1867,12769,13012,Correct Semantics,"Um, I'll put a five on it, actually, I'm not sure about any these. I'm like 90% sure about all of these. But yeah. Um, this is, you know, like a weird, like cus pointers in arrays are kind of the same basically, in C, so that's how that works."
1867,13435,13780,Quote,"I think all of these have the similar thing, which is they're all, it's all code, which is correct and I can see why it's doing what it's doing, but maybe there would be a better way to express it that I would be more, more likely to see and that I'm more used to seeing, whereas these are written in a style that I'm not used to seeing so much."
1867,13218,13837,Uncommon pattern," I, I really, I think I'm probably never going to put a six on any of these. I just, I don't know why. Maybe it's just my own psychology about myself or my reading code, but like, um, yeah, it's just, it's the thing. I think all of these have the similar thing, which is they're all, it's all code, which is correct and I can see why it's doing what it's doing, but maybe there would be a better way to express it that I would be more, more likely to see and that I'm more used to seeing, whereas these are written in a style that I'm not used to seeing so much. So like, and like leaving a little wiggle room for that."
1867,13218,13837,Would Have Written it Differently," I, I really, I think I'm probably never going to put a six on any of these. I just, I don't know why. Maybe it's just my own psychology about myself or my reading code, but like, um, yeah, it's just, it's the thing. I think all of these have the similar thing, which is they're all, it's all code, which is correct and I can see why it's doing what it's doing, but maybe there would be a better way to express it that I would be more, more likely to see and that I'm more used to seeing, whereas these are written in a style that I'm not used to seeing so much. So like, and like leaving a little wiggle room for that."
1867,13218,13837,Similar To," I, I really, I think I'm probably never going to put a six on any of these. I just, I don't know why. Maybe it's just my own psychology about myself or my reading code, but like, um, yeah, it's just, it's the thing. I think all of these have the similar thing, which is they're all, it's all code, which is correct and I can see why it's doing what it's doing, but maybe there would be a better way to express it that I would be more, more likely to see and that I'm more used to seeing, whereas these are written in a style that I'm not used to seeing so much. So like, and like leaving a little wiggle room for that."
1867,13218,13837,Paranoia," I, I really, I think I'm probably never going to put a six on any of these. I just, I don't know why. Maybe it's just my own psychology about myself or my reading code, but like, um, yeah, it's just, it's the thing. I think all of these have the similar thing, which is they're all, it's all code, which is correct and I can see why it's doing what it's doing, but maybe there would be a better way to express it that I would be more, more likely to see and that I'm more used to seeing, whereas these are written in a style that I'm not used to seeing so much. So like, and like leaving a little wiggle room for that."
1867,14028,14537,Would Have Written it Differently,"I mean, if I, instead of saying v one plus one, I probably would have done something like, you know, um, if I wanted to have this point to I, you know, like, int you know, star v two and I'd probably just straight up put like address of v one or I'd probably do like specifically I want the address of the second thing in V1. Yeah. As opposed to like doing it with pointer arithmetic on array, which is like now you have the array to pointer to k and remembering that the arrays are just syntactic sugar in C."
1867,14028,14537,Alternative Idioms,"I mean, if I, instead of saying v one plus one, I probably would have done something like, you know, um, if I wanted to have this point to I, you know, like, int you know, star v two and I'd probably just straight up put like address of v one or I'd probably do like specifically I want the address of the second thing in V1. Yeah. As opposed to like doing it with pointer arithmetic on array, which is like now you have the array to pointer to k and remembering that the arrays are just syntactic sugar in C."
1867,14554,14640,Amusement,I think I meant to draw an ampersand and I accidentally drew a treble clef [laughter].
1867,15111,15183,Amusement,We've got another array and so it's the thing that I just said [laughs].
1867,15273,15575,Sure,"Sure, yeah, no. So then it's the and we're going to get one, unless I'm like, I should probably read it carefully just in case, but yeah, the address of the second thing, which is right there. And then we dereference it. So it's one and, nice I have to put my money where my mouth is and give it a six."
1867,15273,15575,Double Check,"Sure, yeah, no. So then it's the and we're going to get one, unless I'm like, I should probably read it carefully just in case, but yeah, the address of the second thing, which is right there. And then we dereference it. So it's one and, nice I have to put my money where my mouth is and give it a six."
1867,15059,15575,Notices Transformation Correctly,"Subject:            14:38          2:34. All right. We've got another array and so it's the thing that I just said [laughs].

Interviewer:        14:41          Yeah, I noticed.

Subject:            14:42          Sure, yeah, no. So then it's the and we're going to get one, unless I'm like, I should probably read it carefully just in case, but yeah, the address of the second thing, which is right there. And then we dereference it. So it's one and, nice I have to put my money where my mouth is and give it a six."
1867,19271,20681,Non-standard terminology,"[Snippet 109] Okay. Do I have any questions about this one? Umm. I mostly, yeah. Mostly understood everything you were saying. You, um, kept using the word guard.

Subject:            22:41          Oh yeah. Like, cause the, uh, the ifs, like, you know, it guards I at my, that might only be my own personal vocabulary of like, If and then what's ever in the brackets is like guarded by the if statement because the, if let's, it's like a guard. Let's say let's some, sometimes it lets you in, sometimes it doesn't.

Interviewer:        22:58          Gotcha. Um, it, have you heard anybody else use that terminology?

Subject:            23:04          I might. I probably picked it up from somewhere. It's not something that I consciously do.

Interviewer:        23:08          Okay. Um, one like there's only like one other place that I've sort of heard that terminology. Well, I guess a couple of places, but in both like Haskell and in Python, um, when they do like for comprehensions or something, you can have like a guard. Um, I think that's the only other context in programming we have that. And I think it's even like a little related cause you can have like an if guard like in python when you have the for comprehension. Um, but that's, that's not what you were getting at.

Subject:            23:41          I mean, yeah, I mean it's whatever's inside the if statement is what I meant by guard."
1867,21236,21543,C vs C++,"It might, it might not. I could be wrong, but I'm pretty sure it would. I it might depend on the, the version of C also. I know like old versions of C are weird, but like, I'm pretty sure if this is c plus plus, it would compile. I could be wrong. Um, you know, I could go check it on, [compiler] right now."
1867,21236,21543,Incorrect Semantics,"It might, it might not. I could be wrong, but I'm pretty sure it would. I it might depend on the, the version of C also. I know like old versions of C are weird, but like, I'm pretty sure if this is c plus plus, it would compile. I could be wrong. Um, you know, I could go check it on, [compiler] right now."
1867,21236,21543,Language Value Judgement,"It might, it might not. I could be wrong, but I'm pretty sure it would. I it might depend on the, the version of C also. I know like old versions of C are weird, but like, I'm pretty sure if this is c plus plus, it would compile. I could be wrong. Um, you know, I could go check it on, [compiler] right now."
1867,21689,21813,Caught Own Mistake After Prompted,"Hmm, yeah, it probably would be local to the if statement now that I think about it. And so there you go [nervous laughter]."
1867,21689,21813,Amusement,"Hmm, yeah, it probably would be local to the if statement now that I think about it. And so there you go [nervous laughter]."
1867,21892,21931,Alternative Idioms,And that's why I would use the ternary.
1867,22050,22196,Uninitialized,"The intention is to, to not have the, the like declared, declaration of an int that's not defined because it's just a, uh, it's a vector for bugs."
1867,22050,22196,Potential Confusing Constructs,"The intention is to, to not have the, the like declared, declaration of an int that's not defined because it's just a, uh, it's a vector for bugs."
1867,22279,22653,Uninitialized,"Yeah. Um, and you know, if you're like accidentally using an undefined or just like you have to kind of go back and forth. So like normally I would say like if I was reviewing someone else's code, I would say put it in a ternary or like if it's more complicated than that and maybe you want to think about having a little function that does the initialization of it for you."
1867,22279,22653,Alternative Idioms,"Yeah. Um, and you know, if you're like accidentally using an undefined or just like you have to kind of go back and forth. So like normally I would say like if I was reviewing someone else's code, I would say put it in a ternary or like if it's more complicated than that and maybe you want to think about having a little function that does the initialization of it for you."
1867,22279,22653,Code Review,"Yeah. Um, and you know, if you're like accidentally using an undefined or just like you have to kind of go back and forth. So like normally I would say like if I was reviewing someone else's code, I would say put it in a ternary or like if it's more complicated than that and maybe you want to think about having a little function that does the initialization of it for you."
1867,23536,23633,Discussion Question,"Subject:            25:58          Uh, no, not really. Oh, why'd you use float instead of double?"
1867,23924,24451,printf,"Subject:            26:23          Using printf?

Interviewer:        26:24          Yeah. Did you have any concerns about that at all going through?

Subject:            26:31          Uh, no. I mean these were pretty self explanatory cause it was all just like printing an int, you know, maybe there a space in it. So it's not like it was, you know pretty easy to reason how... It's not like I've never used printf before. It's just, I never, I don't have the, I couldn't write out like a format string without looking it up."
1867,24110,24451,Inferring Semantics from Reasoning,"Uh, no. I mean these were pretty self explanatory cause it was all just like printing an int, you know, maybe there a space in it. So it's not like it was, you know pretty easy to reason how... It's not like I've never used printf before. It's just, I never, I don't have the, I couldn't write out like a format string without looking it up."
1867,24110,24451,Would RTFM,"Uh, no. I mean these were pretty self explanatory cause it was all just like printing an int, you know, maybe there a space in it. So it's not like it was, you know pretty easy to reason how... It's not like I've never used printf before. It's just, I never, I don't have the, I couldn't write out like a format string without looking it up."
1867,24531,24674,Alternative Idioms,"I know I'll use like, you know IO streams or something if I want a quick, quick print. Yeah. Cause I normally will write C plus plus and not C."
1867,24531,24674,printf,"I know I'll use like, you know IO streams or something if I want a quick, quick print. Yeah. Cause I normally will write C plus plus and not C."
1867,24531,24674,C vs C++,"I know I'll use like, you know IO streams or something if I want a quick, quick print. Yeah. Cause I normally will write C plus plus and not C."
1867,25106,25177,Trick Question,"Uh, that, that, that evil single equals sign trick [nervous laughter] ."
1867,25311,25620,Author Intention,"Well, I mean it's, I guess that's my, I'm putting, putting that onto you guys as seeing as like my guess is to see, like part of this is to see if somebody notices that, like, I guess my own guess as to why it's there. Because it's like people call that out as an example of like gotchas in C and c plus plus."
1867,25530,25620,Recurring Problem,Because it's like people call that out as an example of like gotchas in C and c plus plus.
1867,25912,26048,Quote,people talk about it all the time cause it's hard to talk about writing C without talking about all the ways that you can make mistakes.
1867,26226,26529,Learned by Programming,"Well yeah, while I'm learning it while I'm just absorbing it and while I'm debugging like, you know, and of course, like sometimes people will post articles about this, this thing, you know, I was like, okay, I'll check that out. So it's a little bit of everything, you know, just organically over time."
1867,26226,26529,Learned by Reading Book,"Well yeah, while I'm learning it while I'm just absorbing it and while I'm debugging like, you know, and of course, like sometimes people will post articles about this, this thing, you know, I was like, okay, I'll check that out. So it's a little bit of everything, you know, just organically over time."
1867,26226,26529,Learned by Internet Search,"Well yeah, while I'm learning it while I'm just absorbing it and while I'm debugging like, you know, and of course, like sometimes people will post articles about this, this thing, you know, I was like, okay, I'll check that out. So it's a little bit of everything, you know, just organically over time."
6061,1949,1981,Snippet Value Judgement,I would not have liked this code
6061,1949,1981,Emotional Aspect,I would not have liked this code
6061,1949,1998,Code Review,I would not have liked this code in a code review
6061,2004,2064,Simple,V one is initialized to zero. That's one is straight forward
6061,2065,2181,Clever,"V two is trying to be clever and uh, uses a ternary operator to determine the value of V two based on value of V one"
6061,2322,2367,Correct Semantics,My intuition is that parentheses go like this
6061,2322,2367,Visual Reference,My intuition is that parentheses go like this
6061,2322,2367,Guessing,My intuition is that parentheses go like this
6061,2322,2367,Parenthesis,My intuition is that parentheses go like this
6061,3092,3184,Not Previously Written,"I do not have hands on experience. With trying to do a construct, like the second line here."
6061,3264,3300,Ambiguous Readability,it's something I avoid and therefore
6061,3264,3300,Would Have Written it Differently,it's something I avoid and therefore
6061,3364,3505,Reasoning by Parts,"m, I go back to reasoning that it's a ternary operator treat it as such, but I could imagine different interpretations of what this would do."
6061,3364,3505,Unsure,"m, I go back to reasoning that it's a ternary operator treat it as such, but I could imagine different interpretations of what this would do."
6061,3506,3652,Counterfactual Semantics,"For example, like V two equals V one equals equals three that can be bought it because it would turn into a boolean and then turn into an integer."
6061,3740,3910,Paranoia,"I could imagine something fishy, however, uh, looking at what is looking at a structure of the expression, it seems like this is the only one that would actually compile."
6061,3739,4129,Inferring Semantics from Reasoning," I could imagine something fishy, however, uh, looking at what is looking at a structure of the expression, it seems like this is the only one that would actually compile. Uh, like if I tried to be explicit about parentheses in various other setups, I cannot think of a set up from the my head. That's would actually still compile. And so this interpretation is the one that is left for me."
6061,4130,4239,Not Previously Written,"However, I am not super confident because I don't have hands on experience of doing exactly such a construct."
6061,4130,4239,Unsure,"However, I am not super confident because I don't have hands on experience of doing exactly such a construct."
6061,4432,4530,Would Have Written it Differently,"Both, in that this is a construct that I would never write and I would not accept in a code review"
6061,4432,4530,Code Review,"Both, in that this is a construct that I would never write and I would not accept in a code review"
6061,4432,4530,Not Previously Written,"Both, in that this is a construct that I would never write and I would not accept in a code review"
6061,4432,4530,Not Previously Seen,"Both, in that this is a construct that I would never write and I would not accept in a code review"
6061,4532,4702,Would Have Written it Differently,"And so, um, like not even trying to interpret it, I would say this is confusing and please, please make it more explicit. So, so it is a construct I would actively avoid."
6061,4532,4702,Snippet Value Judgement,"And so, um, like not even trying to interpret it, I would say this is confusing and please, please make it more explicit. So, so it is a construct I would actively avoid."
6061,4532,4702,Style,"And so, um, like not even trying to interpret it, I would say this is confusing and please, please make it more explicit. So, so it is a construct I would actively avoid."
6061,5016,5060,Simple,This seems suspicious. It's straight forward
6061,5016,5060,Trick Question,This seems suspicious. It's straight forward
6061,5016,5060,Paranoia,This seems suspicious. It's straight forward
6061,5144,5229,Visual Reference,"that an easy visual cues, which I guess I should repeat for the benefit of recording."
6061,5588,5661,Common Pattern," because one and two are so many times here and there, they are confusing"
6061,5718,5771,Simple,So I can plainly see that it will be two and then one
6061,5663,5772,Comprehension Technique,I drew arrows from the value assignment to the printf. So I can plainly see that it will be two and then one.
6061,5450,5772,Complex,"okay. Um, were you and V two or the variables and they are assigned two and one respectively and then printed in order of V one, V two and because one and two are so many times here and there, they are confusing. I drew arrows from the value assignment to the printf. So I can plainly see that it will be two and then one."
6061,5450,5772,Argument Order,"okay. Um, were you and V two or the variables and they are assigned two and one respectively and then printed in order of V one, V two and because one and two are so many times here and there, they are confusing. I drew arrows from the value assignment to the printf. So I can plainly see that it will be two and then one."
6061,5415,5772,printf,"Subject:            05:54          okay. Um, were you and V two or the variables and they are assigned two and one respectively and then printed in order of V one, V two and because one and two are so many times here and there, they are confusing. I drew arrows from the value assignment to the printf. So I can plainly see that it will be two and then one."
6061,6068,6254,Simple,"no, it seems like it seems so self evident, uh, that the only thing that is nibbling at my confidence is the metagame of uh, Oh gee, this is a research study. Um, am I being messed with."
6061,6068,6254,Trick Question,"no, it seems like it seems so self evident, uh, that the only thing that is nibbling at my confidence is the metagame of uh, Oh gee, this is a research study. Um, am I being messed with."
6061,6371,6465,Reasoning by Parts,"Um, it seems all like extremely basic constructs and so I have no concrete reason to doubt it."
6061,6879,6926,Professional vs Academic,this is a snippet that is completely artificial
6061,6827,7353,Variable Name,"the variable name is not descriptive and now again, this is a snippet that is completely artificial. So what function would they describe? But in the real code, I would have probably preferred a more descriptive variable name so that it is something slightly better than V one and V two, you know, like numerator denominator, that kind of stuff. So that, uh, that there is some semantics attached to it. So I would for example know that uh, numerator, that is the first one, then denominator is the second one and so on. Where"
6061,7504,7588,Professional vs Academic,"in my actual code, I would not have had the variables like this, um, almost totally."
6061,7504,7588,Would Have Written it Differently,"in my actual code, I would not have had the variables like this, um, almost totally."
6061,7800,8142,Tooling,"in real code, uh, in like a real editor, I would be able to go to let's say variable V one here, getting assigned and just jump to the next place. But this, uh, this, uh, token is is in the code. So I would be able to jump between the value assignment and the printf, uh, like the printf argument back and forth. So it be like my little arrow"
6061,7723,8142,Professional vs Academic,"Subject:            08:20          Um, yeah. And, and the other thing is in, in real code, uh, in like a real editor, I would be able to go to let's say variable V one here, getting assigned and just jump to the next place. But this, uh, this, uh, token is is in the code. So I would be able to jump between the value assignment and the printf, uh, like the printf argument back and forth. So it be like my little arrow"
6061,7723,8142,printf,"Subject:            08:20          Um, yeah. And, and the other thing is in, in real code, uh, in like a real editor, I would be able to go to let's say variable V one here, getting assigned and just jump to the next place. But this, uh, this, uh, token is is in the code. So I would be able to jump between the value assignment and the printf, uh, like the printf argument back and forth. So it be like my little arrow"
6061,8407,8506,Author Intention,"I will assume that this is not an accident and you actually meant to assign, uh, in this line here."
6061,8667,8759,Author Intention,"I will assume that the code is written as intended and there was no like, typos or anything."
6061,8767,8854,Emotional Aspect,annoyingly there is an assignment instead of a comparison in the first branch of the if
6061,8868,8901,Non-standard terminology,assignment will of course succeed
6061,9495,9535,Snippet Value Judgement,written in a confusing and misleading wa
6061,9428,9657,Few things,"again, it seems like a combination of basic constructs where while written in a confusing and misleading way uh they. The constructs themselves are simple and so just following very basic rules is, is enough to it to unload this."
6061,9671,9718,Code Review,not code I would be happy with in a code review
6061,9671,9718,Snippet Value Judgement,not code I would be happy with in a code review
6061,9828,11321,Memory Management," Like, You, you're not dealing with things like uninitialized memory and, and, and I think that would be like difficult to determine or architecture dependent on anything that would be easy to throw me off.

Interviewer:        10:56          Sure. Okay. Um, yeah. Okay. Um, maybe, maybe we can talk more about that later. Um, what you mean by a, or not what you mean by, but I guess in what context you would expect to see, say uninitialized memory, um, utilized intentionally, you know,

Subject:            11:21          in, in a study that would try to determine how someone reads difficult code like code that might be written suboptimally by let's say a new new new c plus plus coder or something like that.

Interviewer:        11:32          Yeah. Okay.

Subject:            11:33          You would have code where you

Subject:            11:34          you write like int I if, uh, I

Subject:            11:41          something like this. Uh, where you can imagine the person would have been thinking that I would be initialized to zero and the person will be wrong. Uh, and so things like this, which I feel like

Subject:            11:54          Are relatively common new person mistakes, which I could imagine a research study would look at.

Interviewer:        12:01          Right. Okay. Um, but

Interviewer:        12:06          so you weren't implying that things like that are commonly used?

Subject:            12:10          No, no, no, no, no, no, no. Oh God, no"
6061,9828,11321,Potential Confusing Constructs," Like, You, you're not dealing with things like uninitialized memory and, and, and I think that would be like difficult to determine or architecture dependent on anything that would be easy to throw me off.

Interviewer:        10:56          Sure. Okay. Um, yeah. Okay. Um, maybe, maybe we can talk more about that later. Um, what you mean by a, or not what you mean by, but I guess in what context you would expect to see, say uninitialized memory, um, utilized intentionally, you know,

Subject:            11:21          in, in a study that would try to determine how someone reads difficult code like code that might be written suboptimally by let's say a new new new c plus plus coder or something like that.

Interviewer:        11:32          Yeah. Okay.

Subject:            11:33          You would have code where you

Subject:            11:34          you write like int I if, uh, I

Subject:            11:41          something like this. Uh, where you can imagine the person would have been thinking that I would be initialized to zero and the person will be wrong. Uh, and so things like this, which I feel like

Subject:            11:54          Are relatively common new person mistakes, which I could imagine a research study would look at.

Interviewer:        12:01          Right. Okay. Um, but

Interviewer:        12:06          so you weren't implying that things like that are commonly used?

Subject:            12:10          No, no, no, no, no, no, no. Oh God, no"
6061,11836,11868,Previously Seen,I've seen this construct before.
6061,11946,11985,Surprising comment,And I believe it was in the IOCCC. Hmm.
6061,11946,11985,IOCCC,And I believe it was in the IOCCC. Hmm.
6061,12070,12099,Relying on Correctness of Example,Can I assume it will compile?
6061,12356,12588,Mental Model,"So, so what's going through my head is that the, uh, quote unquote qwert is [inaudible] just a number. It is a pointer to a string somewhere in the data segment of the binary. And so, uh, I am thinking t2o the number two before the,"
6061,13056,13344,Evaluation Order,"the er, The letter e because it is two characters offset from the beginning of the pointer. And uh, I believe the pointer arithmetics here are, uh, what's the word? Associative plus like something like plus which. It doesn't matter, matter of what the order of the operators operands are."
6061,12356,13344,Inferring Semantics from Reasoning,"So, so what's going through my head is that the, uh, quote unquote qwert is [inaudible] just a number. It is a pointer to a string somewhere in the data segment of the binary. And so, uh, I am thinking t2o the number two before the,

Subject:            13:41          mmm.

Subject:            13:42          Square brackets, uh, and uh, offsetting it by the value of that pointer. Um, now, I know also that it is of type char. So what I'm thinking of is that,

Subject:            14:07          uh,

Subject:            14:08          what I'm thinking of is pointed arithmetics that would have me think that it will be,

Subject:            14:12          uh,

Subject:            14:13          the er, The letter e because it is two characters offset from the beginning of the pointer. And uh, I believe the pointer arithmetics here are, uh, what's the word? Associative plus like something like plus which. It doesn't matter, matter of what the order of the operators operands are."
6061,13148,13344,Pointer Arithmetic (Not The Atom),"And uh, I believe the pointer arithmetics here are, uh, what's the word? Associative plus like something like plus which. It doesn't matter, matter of what the order of the operators operands are."
6061,13759,13803,Visual Reference,char lol is uh q w e r t square brackets two
6061,13759,13835,Similar To,"char lol is uh q w e r t square brackets two, which is substantially easier."
6061,13759,13835,Simple,"char lol is uh q w e r t square brackets two, which is substantially easier."
6061,13836,13964,Questioning Program Validity,"Um, and so I believe those two are equivalent and with that in mind, I believe that this would be either e or it will seg fault."
6061,14690,14791,Multiple Possible Semantics,"So I wasn't sure if, um, the expression on the first line with turn out to be, um, plus or multiplier"
6061,14690,14791,Unsure,"So I wasn't sure if, um, the expression on the first line with turn out to be, um, plus or multiplier"
6061,15134,15465,Multiple Possible Semantics,"Um, any other reasonable interpretation innovate. So, so that's why I see e as my default answer, like printing e as my default answer. However, if my interpretation was incorrect, the only other option that I see as possible, is seg quilt by, by reading uninitialized memory. Or like getting super lucky that you accidentally hit."
6061,15818,16484,Paranoia,"So addition, because it, it plays well with general, uh, arithmetics, uh pointer arithmetics I no that the type char, so I know it's one byte, so that's easy. Uh, the part where I was unsure is I feel like the, the offsetting of the two, has thrown me off. Um, I am, I did not have a confident analysis of that, like of the, the first option. If plus I could confidently reason about. The second option with, with multiplication, I could not confidently reason about, um, and um, again, it was me being protective and um, acknowledging that I don't have a clear explanation. Um, yeah, it, unlike the previous cases, this analysis was only partially like fact driven."
6061,15818,16484,Pointer Arithmetic (Not The Atom),"So addition, because it, it plays well with general, uh, arithmetics, uh pointer arithmetics I no that the type char, so I know it's one byte, so that's easy. Uh, the part where I was unsure is I feel like the, the offsetting of the two, has thrown me off. Um, I am, I did not have a confident analysis of that, like of the, the first option. If plus I could confidently reason about. The second option with, with multiplication, I could not confidently reason about, um, and um, again, it was me being protective and um, acknowledging that I don't have a clear explanation. Um, yeah, it, unlike the previous cases, this analysis was only partially like fact driven."
6061,16709,16871,Potential Confusing Constructs,"so does the type size is, is obviously one bite. However, it was not clear to me whether, um, this construct wouldn't somehow get interpreted as something of size"
6061,16687,16991,Pointer Arithmetic (Not The Atom),"Um, so initially, so, so does the type size is, is obviously one bite. However, it was not clear to me whether, um, this construct wouldn't somehow get interpreted as something of size. Like if this, this doesn't actually, yeah. As I'm reading it's more, it's, it's bogus. I'm more confident about the e."
6061,16687,16991,Caught Own Mistake After Prompted,"Um, so initially, so, so does the type size is, is obviously one bite. However, it was not clear to me whether, um, this construct wouldn't somehow get interpreted as something of size. Like if this, this doesn't actually, yeah. As I'm reading it's more, it's, it's bogus. I'm more confident about the e."
6061,17624,18257,Contrasting different languages,"Uh, again, unfamiliar construct. Um, and yeah, knowing that it compiles and knowing that it doesn't seg fault definitely pushes my confidence level up. Uh, but uh, without any of those pieces of knowledge, or I guess without the knowledge that it wouldn't seg fault. Um, I could easily imagine this ending interpreted as a read from uninitialized memory. So it would, if I was reading this code and let's say I was not a c plus plus coder but I was, I dunno python coder or whatever and new to c plus plus, I would find it plausible that this would read to lead through uninitialized memory read. Even if, uh, I couldn't explain why."
6061,17624,18257,Python,"Uh, again, unfamiliar construct. Um, and yeah, knowing that it compiles and knowing that it doesn't seg fault definitely pushes my confidence level up. Uh, but uh, without any of those pieces of knowledge, or I guess without the knowledge that it wouldn't seg fault. Um, I could easily imagine this ending interpreted as a read from uninitialized memory. So it would, if I was reading this code and let's say I was not a c plus plus coder but I was, I dunno python coder or whatever and new to c plus plus, I would find it plausible that this would read to lead through uninitialized memory read. Even if, uh, I couldn't explain why."
6061,17624,18257,Paranoia,"Uh, again, unfamiliar construct. Um, and yeah, knowing that it compiles and knowing that it doesn't seg fault definitely pushes my confidence level up. Uh, but uh, without any of those pieces of knowledge, or I guess without the knowledge that it wouldn't seg fault. Um, I could easily imagine this ending interpreted as a read from uninitialized memory. So it would, if I was reading this code and let's say I was not a c plus plus coder but I was, I dunno python coder or whatever and new to c plus plus, I would find it plausible that this would read to lead through uninitialized memory read. Even if, uh, I couldn't explain why."
6061,17624,18257,Counterfactual Semantics,"Uh, again, unfamiliar construct. Um, and yeah, knowing that it compiles and knowing that it doesn't seg fault definitely pushes my confidence level up. Uh, but uh, without any of those pieces of knowledge, or I guess without the knowledge that it wouldn't seg fault. Um, I could easily imagine this ending interpreted as a read from uninitialized memory. So it would, if I was reading this code and let's say I was not a c plus plus coder but I was, I dunno python coder or whatever and new to c plus plus, I would find it plausible that this would read to lead through uninitialized memory read. Even if, uh, I couldn't explain why."
6061,17624,18257,Relying on Correctness of Example,"Uh, again, unfamiliar construct. Um, and yeah, knowing that it compiles and knowing that it doesn't seg fault definitely pushes my confidence level up. Uh, but uh, without any of those pieces of knowledge, or I guess without the knowledge that it wouldn't seg fault. Um, I could easily imagine this ending interpreted as a read from uninitialized memory. So it would, if I was reading this code and let's say I was not a c plus plus coder but I was, I dunno python coder or whatever and new to c plus plus, I would find it plausible that this would read to lead through uninitialized memory read. Even if, uh, I couldn't explain why."
6061,17624,18257,Not Previously Seen,"Uh, again, unfamiliar construct. Um, and yeah, knowing that it compiles and knowing that it doesn't seg fault definitely pushes my confidence level up. Uh, but uh, without any of those pieces of knowledge, or I guess without the knowledge that it wouldn't seg fault. Um, I could easily imagine this ending interpreted as a read from uninitialized memory. So it would, if I was reading this code and let's say I was not a c plus plus coder but I was, I dunno python coder or whatever and new to c plus plus, I would find it plausible that this would read to lead through uninitialized memory read. Even if, uh, I couldn't explain why."
6061,19249,19333,Counterfactual Semantics,I am making an assumption that one point 99 will not get implicitly converted to two
6061,19392,19515,Correct Semantics,And so the next thing is that I am nearly certain that floating point numbers get a rounded down when assigned to integers.
6061,19832,19920,Alternative Idioms,"Um, in real code I would probably ask for explicit floor or ceil or something like that."
6061,19832,19920,Would Have Written it Differently,"Um, in real code I would probably ask for explicit floor or ceil or something like that."
6061,20106,20320,Sure,"Hmm. So have I have an array and a pointer. Um, the array is of four, two, seven, five. It is on stack. I have a pointer which is using pointer arithmetics to get us to value two, and then I am printing this value."
6061,20106,20320,Pointer Arithmetic (Not The Atom),"Hmm. So have I have an array and a pointer. Um, the array is of four, two, seven, five. It is on stack. I have a pointer which is using pointer arithmetics to get us to value two, and then I am printing this value."
6061,20106,20320,Correct Semantics,"Hmm. So have I have an array and a pointer. Um, the array is of four, two, seven, five. It is on stack. I have a pointer which is using pointer arithmetics to get us to value two, and then I am printing this value."
6061,20467,20662,Common Pattern,"Um, again, relatively straight forward constructs. Um, it is pointer arithmetics which is something that yeah, it's, it's rather frequently exercised. There's no syntax that would confuse things."
6061,20467,20986,Pointer Arithmetic (Not The Atom),"Um, again, relatively straight forward constructs. Um, it is pointer arithmetics which is something that yeah, it's, it's rather frequently exercised. There's no syntax that would confuse things. Um, so I can be confident that V two, pointer V two is based on V one plus one offset, the offset is based on the size of the type which is not being obfuscated here in any way. So I'm no, I'm not like hitting half of an integer or something. I know I'm skipping by size of integer. Um, yeah, it just seems straightforward."
6061,20467,20986,Simple,"Um, again, relatively straight forward constructs. Um, it is pointer arithmetics which is something that yeah, it's, it's rather frequently exercised. There's no syntax that would confuse things. Um, so I can be confident that V two, pointer V two is based on V one plus one offset, the offset is based on the size of the type which is not being obfuscated here in any way. So I'm no, I'm not like hitting half of an integer or something. I know I'm skipping by size of integer. Um, yeah, it just seems straightforward."
6061,21559,21671,Notices Transformation Correctly,"Same deal. One and 11:03. uh, yeah, same deal. We are taking the offset of one element from the, from the array."
6061,21676,21883,Ambiguous Readability,"in theory it could be confusing that there's ampersand and, uh, square brackets, but, uh, I feel fairly confident that if I were to make it explicit, I would write the parentheses like this and so, um, yeah."
6061,21676,21883,Visual Reference,"in theory it could be confusing that there's ampersand and, uh, square brackets, but, uh, I feel fairly confident that if I were to make it explicit, I would write the parentheses like this and so, um, yeah."
6061,21676,21883,Parenthesis,"in theory it could be confusing that there's ampersand and, uh, square brackets, but, uh, I feel fairly confident that if I were to make it explicit, I would write the parentheses like this and so, um, yeah."
6061,21676,21883,Potential Confusing Constructs,"in theory it could be confusing that there's ampersand and, uh, square brackets, but, uh, I feel fairly confident that if I were to make it explicit, I would write the parentheses like this and so, um, yeah."
6061,22047,22097,Quote,It's pretty much the same as the previous example.
6061,22047,22097,Notices Transformation Correctly,It's pretty much the same as the previous example.
6061,22340,22367,Double Check,And I'll just double check.
6061,22537,22777,Correct Semantics," Um, post-increment of V one means that I will take the immediate value [inaudible]. So three plus two is five, um, after that V one is going from two to three, so I first print V one, which is now three, and then V two, which is five. Yes."
6061,23789,24003,Long ago,
6061,23789,24003,Amusement,
6061,24460,24522,Amusement,
6061,24806,24886,Quote,
6061,26827,26859,Non-standard terminology,order of the operator preference
6061,26866,26963,Guessing," I made an assumption, uh, and in order to be confident I would prefer not to make an assumption."
6061,26866,26963,Unsure," I made an assumption, uh, and in order to be confident I would prefer not to make an assumption."
6061,26814,27507,Multiple Possible Semantics,"uh, the, uh, order of the operator preference [sic]. I made an assumption, uh, and in order to be confident I would prefer not to make an assumption.

Interviewer:        34:55          Right? Sure, sure, sure. Um, but then, then later you, um, sorta mentioned to me that the other ways of parenthesizing that statement might not have been syntactically valid.

Subject:            35:09          True. But only the other ways that I could think of. It is possible that there are ways I was unaware of, um, due like uh unfamiliarity. Uh, that would make this potentially a syntactically correct statement. I can't see them, but just because I can't see them doesn't mean that I'm, I am. Right."
6061,26814,27507,Paranoia,"uh, the, uh, order of the operator preference [sic]. I made an assumption, uh, and in order to be confident I would prefer not to make an assumption.

Interviewer:        34:55          Right? Sure, sure, sure. Um, but then, then later you, um, sorta mentioned to me that the other ways of parenthesizing that statement might not have been syntactically valid.

Subject:            35:09          True. But only the other ways that I could think of. It is possible that there are ways I was unaware of, um, due like uh unfamiliarity. Uh, that would make this potentially a syntactically correct statement. I can't see them, but just because I can't see them doesn't mean that I'm, I am. Right."
6061,26814,27507,Apparent Contradiction,"uh, the, uh, order of the operator preference [sic]. I made an assumption, uh, and in order to be confident I would prefer not to make an assumption.

Interviewer:        34:55          Right? Sure, sure, sure. Um, but then, then later you, um, sorta mentioned to me that the other ways of parenthesizing that statement might not have been syntactically valid.

Subject:            35:09          True. But only the other ways that I could think of. It is possible that there are ways I was unaware of, um, due like uh unfamiliarity. Uh, that would make this potentially a syntactically correct statement. I can't see them, but just because I can't see them doesn't mean that I'm, I am. Right."
6061,26667,27507,Quote,"Interviewer:        34:37          Okay. So I, I've forgotten why you chose not six for this confidence. What,

Subject:            34:44          uh, the, uh, order of the operator preference [sic]. I made an assumption, uh, and in order to be confident I would prefer not to make an assumption.

Interviewer:        34:55          Right? Sure, sure, sure. Um, but then, then later you, um, sorta mentioned to me that the other ways of parenthesizing that statement might not have been syntactically valid.

Subject:            35:09          True. But only the other ways that I could think of. It is possible that there are ways I was unaware of, um, due like uh unfamiliarity. Uh, that would make this potentially a syntactically correct statement. I can't see them, but just because I can't see them doesn't mean that I'm, I am. Right."
6061,28733,28763,Multiple Possible Semantics,That's actually the one. Yeah.
6061,29537,29636,Discussion Question,"Subject:            37:20          Oh yeah, I was asking you if this was a misprint or deliberate.
"
6061,30063,30134,Professional vs Academic,I mean it's hard to ask questions on obviously artificial code samples.
6061,30950,31077,Relying on Correctness of Example," I mean, I'm fairly confident the answer is correct given the other constraints that it will compile and it will not seg fault."
6061,30950,31077,Sure," I mean, I'm fairly confident the answer is correct given the other constraints that it will compile and it will not seg fault."
6061,31672,31913,Pointer Arithmetic (Not The Atom)," I think I was just waiting for the coffee too kick in. It's, I mean, the, the size of the element of the array is of course, coming from the type. So, um, what else could it be then just the pointer interpreted as a byte offset into memory."
6061,31672,31913,Caught Own Mistake Before Prompted," I think I was just waiting for the coffee too kick in. It's, I mean, the, the size of the element of the array is of course, coming from the type. So, um, what else could it be then just the pointer interpreted as a byte offset into memory."
6061,32238,32380,Amusement,"Subject:            39:44          Was it e?

Interviewer:        39:45          Oh yeah.

Subject:            39:46          Cool. [Laughter]"
6061,34149,34386,Anecdote," Well, a friend of mine was working on an architecture where if you dereference null it will reboot because that's where it had hardware, register for reboot signal. So I'm sure there are architectures, but that's [inaudible] [laughter]."
6061,35411,36211,Notices Transformation Correctly,"Subject:            42:37          Same deal?

Interviewer:        42:38          Yeah. So you, you actually said that a couple of times when you were reading it, you said, actually, yeah. So you said that a couple times when you were reading through it. Um, same deal. So, so you sort of referenced this with the last one.

Subject:            42:57          Yeah.

Interviewer:        42:58          You bring that up. Um, what, what sort of made you,

Subject:            43:01          uh, I'm taking ah pointer into an, so V one in both cases is an array of four elements. And V two is taking an element, like it's referencing that that array. And taking its first element. Well, first if I count by, offset by zero. So based - brrrrrr [exasperated about being tongue-tied] - starting from zero."
6061,36896,37163,Quote,"do you have an intuition about which is sort of more common?

Subject:            43:58          No, because I feel like it would be contextual. Like I feel like it will depend on what context the programmer is when they're doing this, when they're writing this code."
6061,36361,37597,Pointer Arithmetic (Not The Atom),"Um, yeah that, that to me totally makes sense. Um, one, one thing I did find interesting was when you read the first one, um, you said that this was like frequent or you said it was common, it was when you were justifying why you're confident about it.

Subject:            43:38          Oh yeah. Like it, it seems like a basic, basic pointer arithmetics in both cases.

Interviewer:        43:44          Yeah. So out of curiosity, you said this one was frequent and you said that these two are similar. Now looking at both of them, do you have an intuition about which is sort of more common?

Subject:            43:58          No, because I feel like it would be contextual. Like I feel like it will depend on what context the programmer is when they're doing this, when they're writing this code. I also think that it will depend on whether the array is of byte size or not. Uh, in that if it is byte size, I would more frequently see the code sample 45. Um, where as if it is not byte size. I was more frequently see code sample 46, because it more clearly separates the concept of memory offset and array offsets which, if they are not, if the are not byte size then then the element offset is it is more meaningfully different."
6061,36361,37597,Design Concerns,"Um, yeah that, that to me totally makes sense. Um, one, one thing I did find interesting was when you read the first one, um, you said that this was like frequent or you said it was common, it was when you were justifying why you're confident about it.

Subject:            43:38          Oh yeah. Like it, it seems like a basic, basic pointer arithmetics in both cases.

Interviewer:        43:44          Yeah. So out of curiosity, you said this one was frequent and you said that these two are similar. Now looking at both of them, do you have an intuition about which is sort of more common?

Subject:            43:58          No, because I feel like it would be contextual. Like I feel like it will depend on what context the programmer is when they're doing this, when they're writing this code. I also think that it will depend on whether the array is of byte size or not. Uh, in that if it is byte size, I would more frequently see the code sample 45. Um, where as if it is not byte size. I was more frequently see code sample 46, because it more clearly separates the concept of memory offset and array offsets which, if they are not, if the are not byte size then then the element offset is it is more meaningfully different."
6061,36361,37597,Common Pattern,"Um, yeah that, that to me totally makes sense. Um, one, one thing I did find interesting was when you read the first one, um, you said that this was like frequent or you said it was common, it was when you were justifying why you're confident about it.

Subject:            43:38          Oh yeah. Like it, it seems like a basic, basic pointer arithmetics in both cases.

Interviewer:        43:44          Yeah. So out of curiosity, you said this one was frequent and you said that these two are similar. Now looking at both of them, do you have an intuition about which is sort of more common?

Subject:            43:58          No, because I feel like it would be contextual. Like I feel like it will depend on what context the programmer is when they're doing this, when they're writing this code. I also think that it will depend on whether the array is of byte size or not. Uh, in that if it is byte size, I would more frequently see the code sample 45. Um, where as if it is not byte size. I was more frequently see code sample 46, because it more clearly separates the concept of memory offset and array offsets which, if they are not, if the are not byte size then then the element offset is it is more meaningfully different."
6061,36361,37597,Style,"Um, yeah that, that to me totally makes sense. Um, one, one thing I did find interesting was when you read the first one, um, you said that this was like frequent or you said it was common, it was when you were justifying why you're confident about it.

Subject:            43:38          Oh yeah. Like it, it seems like a basic, basic pointer arithmetics in both cases.

Interviewer:        43:44          Yeah. So out of curiosity, you said this one was frequent and you said that these two are similar. Now looking at both of them, do you have an intuition about which is sort of more common?

Subject:            43:58          No, because I feel like it would be contextual. Like I feel like it will depend on what context the programmer is when they're doing this, when they're writing this code. I also think that it will depend on whether the array is of byte size or not. Uh, in that if it is byte size, I would more frequently see the code sample 45. Um, where as if it is not byte size. I was more frequently see code sample 46, because it more clearly separates the concept of memory offset and array offsets which, if they are not, if the are not byte size then then the element offset is it is more meaningfully different."
6061,37841,37931,Recurring Problem," yeah, post-increment, uh, bites people every time. Again, in code review I would complain"
6061,37841,37931,Code Review," yeah, post-increment, uh, bites people every time. Again, in code review I would complain"
6061,38127,39135,Example Problem,"Um, it's especially tricky when you con consider things like in c plus plus like c plus plus proper. Uh, if you have, iterators and you're trying to erase elements, having things like order in which you increment and call the arrays operator on the container and so on, be, excuse me, be tricky because you might have, let's say a loop over over a container, you want to delete some of the elements of that container, and you have chosen not to use std::remove, uh, and friends, then you will have the iterator. Um, however, and then you have the erase, erase, uh, method of the, uh erase method of the container, but some containers, will, invalidate the iterator and so then you cannot proceed forward. And so having the right order of pre-increment post-increment or potentially making a copy of the iterator, uh, it's, it's, I think a frequent thing to get wrong the first or second time you're writing that code, you'll probably seg fault or, or fail a unit test but it is a more subtle variant of this."
6061,38127,39135,C vs C++,"Um, it's especially tricky when you con consider things like in c plus plus like c plus plus proper. Uh, if you have, iterators and you're trying to erase elements, having things like order in which you increment and call the arrays operator on the container and so on, be, excuse me, be tricky because you might have, let's say a loop over over a container, you want to delete some of the elements of that container, and you have chosen not to use std::remove, uh, and friends, then you will have the iterator. Um, however, and then you have the erase, erase, uh, method of the, uh erase method of the container, but some containers, will, invalidate the iterator and so then you cannot proceed forward. And so having the right order of pre-increment post-increment or potentially making a copy of the iterator, uh, it's, it's, I think a frequent thing to get wrong the first or second time you're writing that code, you'll probably seg fault or, or fail a unit test but it is a more subtle variant of this."
6061,39270,39400,Few things,"This is again, straightforward piece of code because it's so isolated but in context of a larger piece of code, less less obvious."
6061,39270,39400,Simple,"This is again, straightforward piece of code because it's so isolated but in context of a larger piece of code, less less obvious."
4281,956,1063,Remember,"So as far as I remember, pre-increment is before the statement is executed, the values will be incremented."
4281,814,1132,Correct for Wrong Reasons,"within the if-statement I see that they're being incremented this pre-increment operator and that's an Or statement. And it shouldn't matter. So as far as I remember, pre-increment is before the statement is executed, the values will be incremented. So according to this V1 should become two and V2 should become three"
4281,814,1132,Incorrect Semantics,"within the if-statement I see that they're being incremented this pre-increment operator and that's an Or statement. And it shouldn't matter. So as far as I remember, pre-increment is before the statement is executed, the values will be incremented. So according to this V1 should become two and V2 should become three"
4281,1141,1257,Correct for Wrong Reasons," V1 become four and V2 become s a three. Three is nine I think. Yeah, and percentage d's will give out four and nine"
4281,1141,1257,Correct Semantics," V1 become four and V2 become s a three. Three is nine I think. Yeah, and percentage d's will give out four and nine"
4281,1259,1293,Double Check,So let me see. Let me check again.
4281,1310,1345,Caught Own Mistake Before Prompted,"Three, oh, three increments to four"
4281,1310,1444,Incorrect Semantics,"Three, oh, three increments to four. V1 multiplied by two is four and V2 multiple by 3 is 12, so yeah, the answer would be four and 12"
4281,1707,1788,Sure," Four and 12 this is V1 and V2 I am like, yeah, I'm positive that this should be."
4281,2028,2066,Learned by Reading Book,I remember from what I studied is that
4281,2078,2226,Incorrect Semantics,"before the statement is executed, this will be incremented and then the, if condition is just an or value of both of these which are positive values"
4281,1960,2226,Remember,"Yeah. So as far as I remembered, this is pre-increment and uh, what I remember from what I studied is that, you know, before the statement is executed, this will be incremented and then the, if condition is just an or value of both of these which are positive values"
4281,2244,2259,Non-standard terminology,inside the loop
4281,2172,2259,Partially Correct Semantics,an or value of both of these which are positive values. So it should go inside the loop
4281,2356,2542,Sure," I think I should have given this a five because I am just a little bit shaky about this, but honestly I am quite confident but yeah, of course there is always a chance I might be wrong."
4281,2356,2542,Unsure," I think I should have given this a five because I am just a little bit shaky about this, but honestly I am quite confident but yeah, of course there is always a chance I might be wrong."
4281,2347,2571,Paranoia,"But yeah, I think I should have given this a five because I am just a little bit shaky about this, but honestly I am quite confident but yeah, of course there is always a chance I might be wrong. So yeah, that's four and 12."
4281,2660,3158,Apparent Contradiction,"Subject:            02:37          It is about the, you know? First thing being, if I'm right about, I know that these are pre-increment and I recall that, you know, before the statement is executed, they're incremented. So I just, I think I am like that, but that is, that is a scope that I might go wrong if at all, I like that might be the place.

Interviewer:        02:56          So it's whether or not on the increment happens

Subject:            02:59          before the execution or not."
4281,3774,3805,Boolean Value of Integer,condition as zero that is false
4281,3774,3805,Correct Semantics,condition as zero that is false
4281,3890,3925,Sure, And I'm pretty positive about this
4281,3927,3962,Few things,Like that is nothing to think about
4281,3972,4026,Correct Semantics, this condition fails and this one will be incremented
4281,4561,5018,Sure,"V2 minus eight minus three, star seven minus eight. So yup, what I would expect of this is five minus one is less than. So this will go here V1 is assigned four and it will be, yup it'll be four, V1 will be four. And this also, I'm pretty sure about because you know, if it's looking for the uh, you know its looking for a condition where here it is true because this will evaluate to evaluate to a value which is less than zero and hence it will enter this"
4281,4561,5018,Correct Semantics,"V2 minus eight minus three, star seven minus eight. So yup, what I would expect of this is five minus one is less than. So this will go here V1 is assigned four and it will be, yup it'll be four, V1 will be four. And this also, I'm pretty sure about because you know, if it's looking for the uh, you know its looking for a condition where here it is true because this will evaluate to evaluate to a value which is less than zero and hence it will enter this"
4281,5847,5859,Non-standard terminology,hash-defines
4281,5817,5903,Convention,"I have typically always used, hash-defines before, you know, before the program starts"
4281,5782,5903,Unsure,"What I'm not sure about in this is I have typically always used, hash-defines before, you know, before the program starts"
4281,5905,5944,Not Previously Written,This something that I haven't done ever
4281,5949,6165,Relying on Correctness of Example,but I read in the brochure that this compiles. So if it compiles I don't think there should be a problem and the assignment should be all right. Just in case I not too sure about this statement being inside the main.
4281,6166,6225,Not Previously Seen,Not that it shouldn't matter but I haven't seen this before
4281,6278,6350,Incorrect Semantics,"M1 is one and then yeah, this should be one and two M1 is one M2 is two."
4281,6520,6562,Uninitialized,"And I see V1, V2 not initialized initially"
4281,6848,6904,Would Have Written it Differently,Typically I like to initialize if possible the variables
4281,6848,6904,Convention,Typically I like to initialize if possible the variables
4281,6840,7006,Uninitialized,"Uh, no. Typically I like to initialize if possible the variables but it's fine. I'm pretty sure they will not be any junk because we are assigning values right there."
4281,7329,7354,Non-standard terminology,So V1 is assigned to zero
4281,7439,7464,Relying on Correctness of Example,"These all compile, right?"
4281,7439,7464,Questioning Program Validity,"These all compile, right?"
4281,7566,7716,Snippet Value Judgement,So I'd expect that this operator would have like you know it would have been better for me if there were parentheses around these for me to understand
4281,7566,7716,Ambiguous Readability,So I'd expect that this operator would have like you know it would have been better for me if there were parentheses around these for me to understand
4281,7566,7716,Convention,So I'd expect that this operator would have like you know it would have been better for me if there were parentheses around these for me to understand
4281,7525,7716,Parenthesis,Subject:            07:48          Okay. So I'd expect that this operator would have like you know it would have been better for me if there were parentheses around these for me to understand
4281,7841,7854,Boolean Value of Integer,three is true
4281,7838,7960,Unsure,so three is true so I get two V1 double equals 2 but it does not. I am not really sure of how this will actually play out.
4281,8039,8182,Correct Semantics,"So V2 equals to whatever, if V1 equals to three. So V1 is not equal to three, false statement for V2 will be assigned four and yeah, that's it."
4281,8205,8239,Snippet Value Judgement,parentheses would have been better
4281,7997,8294,Sure,"Oh, I see. I think I misinterpreted this. So V2 equals to whatever, if V1 equals to three. So V1 is not equal to three, false statement for V2 will be assigned four and yeah, that's it. So it's 2:08 and yeah parentheses would have been better and I am confident, like, pretty confident about this."
4281,7997,8294,Caught Own Mistake Before Prompted,"Oh, I see. I think I misinterpreted this. So V2 equals to whatever, if V1 equals to three. So V1 is not equal to three, false statement for V2 will be assigned four and yeah, that's it. So it's 2:08 and yeah parentheses would have been better and I am confident, like, pretty confident about this."
4281,8244,8294,Sure,"I am confident, like, pretty confident about this."
4281,8458,8526,Convention,"it's not typical that we have conditions or you know, just like this"
4281,8394,8527,Uncommon pattern,"Why five? Yeah. I'm not too comfortable with the way it is, uh, it's not typical that we have conditions or you know, just like this."
4281,8618,8895,Would Have Written it Differently,"but I wouldn't do it like this so I'm not too confident about it when it is written like this. I'd prefer if there were, it's just that I'm not too concerned about the output. I have no reservations as such. But yeah, I'm pretty sure that if this works it should be four. Okay,"
4281,8359,8895,Relying on Correctness of Example,"Subject:            08:56          Why five? Yeah. I'm not too comfortable with the way it is, uh, it's not typical that we have conditions or you know, just like this. I like to see them, you know, I don't know if this. Of course you say that this compiled, but I wouldn't do it like this so I'm not too confident about it when it is written like this. I'd prefer if there were, it's just that I'm not too concerned about the output. I have no reservations as such. But yeah, I'm pretty sure that if this works it should be four. Okay,"
4281,9193,9530,Correct Semantics,"Char of V2. Oh, alright. Second index, zero, one, two. E, E would be what it is. Yep. The output would be E because we are looking at the second index: zero, one, two. Yeah. Very peculiar way of writing it but yeah, it would have been much better and easier for me to get if it was not written this way around. But yeah, this would be E."
4281,9361,9530,Uncommon pattern,"Yeah. Very peculiar way of writing it but yeah, it would have been much better and easier for me to get if it was not written this way around. But yeah, this would be E."
4281,9361,9530,Ambiguous Readability,"Yeah. Very peculiar way of writing it but yeah, it would have been much better and easier for me to get if it was not written this way around. But yeah, this would be E."
4281,9704,9944,Visual Reference," I know that we can do this sort of stuff like you know, you can reference this in this manner if ar, array was an array [referring to his handwritten note ""2[arr] or arr[2]""], I can either do this or this and I'll end up at the same result"
4281,9637,10046,Not Previously Written,"My confidence on this is since I have not used it specifically, but I know that we can do this sort of stuff like you know, you can reference this in this manner if ar, array was an array [referring to his handwritten note ""2[arr] or arr[2]""], I can either do this or this and I'll end up at the same result. So on those basis I think it should be this and I'm like a four because I haven't done it like this."
4281,10182,10351,Learned from Class,"I have seen it on some of the class material once where, you know, that was, you know, professor was just going through it and he said that this or that wouldn't matter."
4281,10556,10568,Non-standard terminology,base pointer
4281,10352,10568,Apparent Contradiction,"And I, I did try it with an int because I just wanted to check to be sure, it did work, but you know, I kind of initialized an array before and then I tried it like this with the index and the, you know, base pointer"
4281,10570,10606,Strings as Pointers/Arrays,but I haven't done that with strings
4281,10608,10634,Relying on Correctness of Example,But assuming this compiles
4281,11516,11618,Apparent Contradiction,"One is less than equal to V2, one is less than equal to V2, this is true so it will execute no matter."
4281,11516,11618,Short-circuiting,"One is less than equal to V2, one is less than equal to V2, this is true so it will execute no matter."
4281,11673,11699,Sure,pretty confident about it.
4281,11835,11910,Short-circuiting,if one of the conditions passes it will enter irrespective of the other one
4281,17093,17256,Unsure,"So I jumped to this pretty quickly, but then you know, in retrospect of thinking about it, I should not have given it a six. If I can change, I'd go back to a four"
4281,17218,17256,Apparent Contradiction,"If I can change, I'd go back to a four"
4281,17539,17604,Unsure,doubts about the pre-increments that it would be before or after.
4281,17530,17604,Evaluation Order,I had my doubts about the pre-increments that it would be before or after.
4281,18003,18092,Evaluation Order," So I was thinking about it so, the pre-increment before the statement executes or after."
4281,17983,18092,Apparent Contradiction,"Oh, that's about it. So I was thinking about it so, the pre-increment before the statement executes or after."
4281,18039,18173,Not Previously Written,"pre-increment before the statement executes or after. So I know that it is, but I am just not sure I have not used this kind of thing."
4281,18039,18173,Unsure,"pre-increment before the statement executes or after. So I know that it is, but I am just not sure I have not used this kind of thing."
4281,18174,18255,Previously Used,I usually am very confident about the things that I have coded at a point of time
4281,18174,18255,Sure,I usually am very confident about the things that I have coded at a point of time
4281,18174,18256,Quote,I usually am very confident about the things that I have coded at a point of time.
4281,18288,18380,Non-standard terminology, I always like to go back and actually see the compiled output to be very confident about it
4281,18257,18413,Development Behavior,That's something that I see and I always like to go back and actually see the compiled output to be very confident about it. Otherwise I don't commit to it.
4281,18257,18413,Double Check,That's something that I see and I always like to go back and actually see the compiled output to be very confident about it. Otherwise I don't commit to it.
4281,18471,18751,Did Not Catch Own Mistake After Prompted,"So if I told you that, um, that the plus plus before variable first incremented the variable and then reported the value then would you say that this is the right output? Does that change your output?

Subject:            22:26          No, it doesn't. I would stick to the output"
4281,19285,19384,Boolean Value of Integer,either ways would have been positive because this is a positive value irrespective of the increment
4281,19177,19384,Remember," So as far as I remember, so if I will, you know, this executes and I will, this will be incremented, which either ways would have been positive because this is a positive value irrespective of the increment"
4281,19514,19739,Incorrect Semantics,"Even though this is positive, it doesn't short circuit, you know it will have to evaluate both the conditions I believe so three will also go on to increment V2 will also increment because it has to be sure that it evaluates."
4281,19514,19739,Short-circuiting,"Even though this is positive, it doesn't short circuit, you know it will have to evaluate both the conditions I believe so three will also go on to increment V2 will also increment because it has to be sure that it evaluates."
4281,19740,19877,Unsure,"Oh yeah, that's actually, I didn't pay attention to that. So that can be a short circuit in the sense. I don't know if C does that or not"
4281,19740,19877,Short-circuiting,"Oh yeah, that's actually, I didn't pay attention to that. So that can be a short circuit in the sense. I don't know if C does that or not"
4281,19740,19877,Caught Own Mistake After Prompted,"Oh yeah, that's actually, I didn't pay attention to that. So that can be a short circuit in the sense. I don't know if C does that or not"
4281,19881,20020,Partially Correct Semantics," if there is even one condition that passes and if it is an or. I have a faint memory that you know, It doesn't have to check the other one"
4281,20022,20222,Correct Semantics,"So if that is the case, I don't know if C does it, if that is the case, there is a possibility that V2 is not incremented and hence this would have not, you know, V2 would have been a different answer"
4281,20022,20222,Unsure,"So if that is the case, I don't know if C does it, if that is the case, there is a possibility that V2 is not incremented and hence this would have not, you know, V2 would have been a different answer"
4281,20224,20360,Attribution of Confusion,"So yeah, we can attribute that to actually that's something that I'm thinking about right now. I didn't give it a lot of thought before."
4281,20224,20360,Attention,"So yeah, we can attribute that to actually that's something that I'm thinking about right now. I didn't give it a lot of thought before."
4281,20542,20755,Incorrect Semantics,"I remember that if at all the first is false, it definitely short circuits in the sense, you know, if it is, if any condition is here be it an and or an or. If the first one fails it definitely will short-circuit."
4281,20542,20755,False Operand Causes Short-Circuit,"I remember that if at all the first is false, it definitely short circuits in the sense, you know, if it is, if any condition is here be it an and or an or. If the first one fails it definitely will short-circuit."
4281,20542,20755,Short-circuiting,"I remember that if at all the first is false, it definitely short circuits in the sense, you know, if it is, if any condition is here be it an and or an or. If the first one fails it definitely will short-circuit."
4281,20541,20755,Remember," I remember that if at all the first is false, it definitely short circuits in the sense, you know, if it is, if any condition is here be it an and or an or. If the first one fails it definitely will short-circuit."
4281,20897,20948,Incorrect Semantics,"It's not, it's true, so it shouldn't short-circuit."
4281,20897,20948,Short-circuiting,"It's not, it's true, so it shouldn't short-circuit."
4281,21866,21912,Unsure,"True, true, yes I had my doubts about that one"
4281,21914,21963,Caught Own Mistake After Prompted,Yeah. So in this case this one won't be executed.
4281,22457,22601,Surprising comment,"Yeah. I didn't give it a lot of thought before. It only happened because you were insisting that I read about it, yeah, that's when it happened."
4281,22457,22601,Attribution of Confusion,"Yeah. I didn't give it a lot of thought before. It only happened because you were insisting that I read about it, yeah, that's when it happened."
4281,22457,22601,Attention,"Yeah. I didn't give it a lot of thought before. It only happened because you were insisting that I read about it, yeah, that's when it happened."
4281,22964,23018,Sure,No. Should be pretty straightforward. Should be three.
4281,22964,23018,Simple,No. Should be pretty straightforward. Should be three.
4281,23352,23396,Sure,I use this a lot so I did not have a problem
4281,23352,23396,Previously Used,I use this a lot so I did not have a problem
4281,23401,23586,Potential Confusing Constructs,"typically if I did not use it I would have thought about a second if this is a boolean value or not, does one or zero work or not, but yeah, I'm pretty sure that zero evaluates to false"
4281,23401,23586,Boolean Value of Integer,"typically if I did not use it I would have thought about a second if this is a boolean value or not, does one or zero work or not, but yeah, I'm pretty sure that zero evaluates to false"
4281,23998,24133,Reason for Clarity,I'm pretty sure about because it will be evaluated and there are parentheses so I don't have to worry about which will take precedence.
4281,24214,24307,Precedence,So as this is a multiplication operator this will occur first and then this will be compared.
4281,24957,24971,Questioning Program Validity,If it compiles
4281,25234,25316,Macro Redefinition,"if at all there was a mention of M1 before this somewhere, this would have failed."
4281,25231,25316,Apparent Contradiction,"So if at all there was a mention of M1 before this somewhere, this would have failed."
4281,25231,25316,Correct Semantics,"So if at all there was a mention of M1 before this somewhere, this would have failed."
4281,25481,25521,Convention,that is why we do the definitions before
4281,25472,25701,Social Context of Code,"So yeah, that is why we do the definitions before because you don't know where they might be used in the program and there is no restriction when it is an open code base, and you have multiple people, you know, getting at it and."
4281,25472,25706,Maintainability,"So yeah, that is why we do the definitions before because you don't know where they might be used in the program and there is no restriction when it is an open code base, and you have multiple people, you know, getting at it and. Yeah"
4281,25708,25751,Emotional Aspect,I'd like it to be at the top of the program
4281,25702,25779,Ambiguous Readability,Yeah. I'd like it to be at the top of the program so that it is not ambiguous
4281,25708,25779,Would Have Written it Differently,I'd like it to be at the top of the program so that it is not ambiguous
4281,25803,25977,Macro Redefinition, just am not confident about it in this aspect as to if the compiler is still okay with actually starting to pass the code and then hits a define just not confident with that
4281,25803,25977,Questioning Program Validity, just am not confident about it in this aspect as to if the compiler is still okay with actually starting to pass the code and then hits a define just not confident with that
4281,25803,25977,Unsure, just am not confident about it in this aspect as to if the compiler is still okay with actually starting to pass the code and then hits a define just not confident with that
4281,26239,26641,Partially Correct Semantics,"Uh, I do slightly remember. So the first one is where it defines uh, it finds the literals and then it will make a mapping table. And uh, before that there is a processing step where it removes the comments. And uh, I think that is when it does this kind of stuff, it removes these defines and it actually puts their real values in there. And then it makes the mapping table. So that's what I remember."
4281,26239,26641,Remember,"Uh, I do slightly remember. So the first one is where it defines uh, it finds the literals and then it will make a mapping table. And uh, before that there is a processing step where it removes the comments. And uh, I think that is when it does this kind of stuff, it removes these defines and it actually puts their real values in there. And then it makes the mapping table. So that's what I remember."
4281,26889,27008,Correct Semantics,"M1s and M2s will no longer be there and the real values will be sitting in it, that's all. That's all that will matter."
4281,27156,27286,Incorrect Semantics,"M1 and two instead of M2. Yeah, but depending on this condition where here V1 is less than V2. M1 would be one and M2 would be two"
4281,27432,27526,Incorrect Semantics," Yeah, if V1 which is one and V2 is two and one is less than two, hence this will be selected."
4281,27651,27746,Caught Own Mistake After Prompted,this will only be executed at runtime and this kind of decision cannot be made at that duration
4281,27761,27793,Attribution of Confusion,Didn't give it that much thought
4281,27761,27793,Attention,Didn't give it that much thought
4281,28496,28742,Caught Own Mistake After Prompted,"Subject:            31:54          Oh, so M1 will actually be two and M1 will be one. And hence the output would be what I have

Interviewer:        32:00          exactly

Subject:            32:01          It's the opposite of what I've written"
4281,28860,28918,Snippet Value Judgement,"they, should not be written in between a program I believe"
4281,28808,29154,Convention,"
Subject:            32:05          Okay. And hence they, should not be written in between a program I believe because you know, I,

Interviewer:        32:12          if you're going to try to write a clear, understandable program, you should not write a program like this

Subject:            32:18          just definitely now I remember, yes."
4281,28808,29154,Remember,"
Subject:            32:05          Okay. And hence they, should not be written in between a program I believe because you know, I,

Interviewer:        32:12          if you're going to try to write a clear, understandable program, you should not write a program like this

Subject:            32:18          just definitely now I remember, yes."
4281,29323,29381,Convention,I stick to what I know. That's why I keep them at the top.
4281,29314,29381,Quote,"So yeah, I stick to what I know. That's why I keep them at the top."
4281,29920,30008,Simple,"Okay. This one is also pretty forward, straight forward. Yeah, I stick to these answers."
4281,30187,30245,Emotional Aspect,I would have like it if they were initialized upfront here
4281,30298,30423,Potential Confusing Constructs,you start using them and you forget to initialize them. So that might be a chance that you might end up with some junk values
4281,30187,30424,Example Problem,"I would have like it if they were initialized upfront here because you know, in a bigger program that is, that you start using them and you forget to initialize them. So that might be a chance that you might end up with some junk values."
4281,30187,30424,Uninitialized,"I would have like it if they were initialized upfront here because you know, in a bigger program that is, that you start using them and you forget to initialize them. So that might be a chance that you might end up with some junk values."
4281,31369,31422,Logical Operator Must Be in Condition,a double equal-to can only be there for the condition
4281,31369,31422,Incorrect Semantics,a double equal-to can only be there for the condition
4281,31334,31474,Correct for Wrong Reasons,"I know that, you know there's, and a double equal-to can only be there for the condition check. So I know that V1 is being compared to three"
4281,31476,31539,Would Have Written it Differently,but I'd have been a lot more confident if there was parentheses
4281,31479,31835,Reason for Clarity," I'd have been a lot more confident if there was parentheses, which is either separating all of this and, you know, a right side and left side so that it is very clear that V2 is going to be assigned to some value. It would have been much, you know it would have been very clear and very easy on my eyes. I can just parse through that and I get the answer."
4281,31430,31835,Ambiguous Readability,"So I know that V1 is being compared to three, but I'd have been a lot more confident if there was parentheses, which is either separating all of this and, you know, a right side and left side so that it is very clear that V2 is going to be assigned to some value. It would have been much, you know it would have been very clear and very easy on my eyes. I can just parse through that and I get the answer."
4281,31430,31835,Parenthesis,"So I know that V1 is being compared to three, but I'd have been a lot more confident if there was parentheses, which is either separating all of this and, you know, a right side and left side so that it is very clear that V2 is going to be assigned to some value. It would have been much, you know it would have been very clear and very easy on my eyes. I can just parse through that and I get the answer."
4281,31072,31881,Discussion Question,"Subject:            33:46          My question would be very simple, like I know a ternary operator needs a kind of a condition here which will then be evaluated and depending on the true or false will be doing the assignment. So in this context, when I see it, I know that, you know there's, and a double equal-to can only be there for the condition check. So I know that V1 is being compared to three, but I'd have been a lot more confident if there was parentheses, which is either separating all of this and, you know, a right side and left side so that it is very clear that V2 is going to be assigned to some value. It would have been much, you know it would have been very clear and very easy on my eyes. I can just parse through that and I get the answer. I'm pretty confident that this is the answer."
4281,32066,32070,Visual Reference,this
4281,32131,32135,Visual Reference,here
4281,32150,32154,Visual Reference,this
4281,32236,32295,Logical Operator Must Be in Condition,it cannot be there for any other reason but for a condition
4281,32038,32372,Correct for Wrong Reasons,"Yeah, because I did not see this. I didn't give it a lot of thought, so I put my parentheses here assuming that this is just the condition, but then I realized it's a double equal to and it cannot, it cannot be there for any other reason but for a condition, like I said, it would have been much simpler if I had seen the parentheses."
4281,32038,32372,Multiple Possible Semantics,"Yeah, because I did not see this. I didn't give it a lot of thought, so I put my parentheses here assuming that this is just the condition, but then I realized it's a double equal to and it cannot, it cannot be there for any other reason but for a condition, like I said, it would have been much simpler if I had seen the parentheses."
4281,32038,32372,Attention,"Yeah, because I did not see this. I didn't give it a lot of thought, so I put my parentheses here assuming that this is just the condition, but then I realized it's a double equal to and it cannot, it cannot be there for any other reason but for a condition, like I said, it would have been much simpler if I had seen the parentheses."
4281,32686,32802,Inferring Semantics from Reasoning,this cannot be evaluated in any other sense that a comparison. So I know that this left and right should be together
4281,32686,32802,Correct for Wrong Reasons,this cannot be evaluated in any other sense that a comparison. So I know that this left and right should be together
4281,33633,33658,Logical Operator Must Be in Condition,Nothing comes out of this
4281,33936,33961,Unsure,I'm not too sure about it
4281,32984,34002,Correct for Wrong Reasons," Okay, cool. Um, so if the way that you had written it originally was that the parentheses were around the three question mark two [3 ? 2 : 4], so if it had been written that way, if it had been written with the parentheses around, um,

Subject:            35:44          it wouldn't have compiled

Interviewer:        35:47          it wouldn't have compiled. Why? What, what is that error? What, what would've been the error that

Subject:            35:50          if said something like, you know, this symbol here cannot, you ended up said something like a can't compare to, you know, here, nothing is okay.

Subject:            36:02          Nothing comes out of this. I think you could have had the same ambiguity that I have as to, you know, I think that would be a problem in creating the parse tree and it would definitely hit this one first so it will throw an error saying it does not know what to compare to it or something of that sort. I'm not too sure about it but this would be encountered first and."
4281,32984,34002,Incorrect Semantics," Okay, cool. Um, so if the way that you had written it originally was that the parentheses were around the three question mark two [3 ? 2 : 4], so if it had been written that way, if it had been written with the parentheses around, um,

Subject:            35:44          it wouldn't have compiled

Interviewer:        35:47          it wouldn't have compiled. Why? What, what is that error? What, what would've been the error that

Subject:            35:50          if said something like, you know, this symbol here cannot, you ended up said something like a can't compare to, you know, here, nothing is okay.

Subject:            36:02          Nothing comes out of this. I think you could have had the same ambiguity that I have as to, you know, I think that would be a problem in creating the parse tree and it would definitely hit this one first so it will throw an error saying it does not know what to compare to it or something of that sort. I'm not too sure about it but this would be encountered first and."
4281,32984,34002,Counterfactual Semantics," Okay, cool. Um, so if the way that you had written it originally was that the parentheses were around the three question mark two [3 ? 2 : 4], so if it had been written that way, if it had been written with the parentheses around, um,

Subject:            35:44          it wouldn't have compiled

Interviewer:        35:47          it wouldn't have compiled. Why? What, what is that error? What, what would've been the error that

Subject:            35:50          if said something like, you know, this symbol here cannot, you ended up said something like a can't compare to, you know, here, nothing is okay.

Subject:            36:02          Nothing comes out of this. I think you could have had the same ambiguity that I have as to, you know, I think that would be a problem in creating the parse tree and it would definitely hit this one first so it will throw an error saying it does not know what to compare to it or something of that sort. I'm not too sure about it but this would be encountered first and."
4281,34258,34555,Correct Semantics,"Actually, if this happens and I want to make it work, then I picked three is true and two is the answer, two is not. Yeah. Okay. So what happens then according to me, is if at all this was the parentheses, two would have been picked V1 double equals two. That is going to be checked. And it is not"
4281,34557,34723,Logical Operator Must Be in Condition,"And, it doesn't know what to assign to V2. I'm not too sure if zero will be assigned to it. Like I don't know what would be the return type of this condition of this."
4281,34557,34723,Unsure,"And, it doesn't know what to assign to V2. I'm not too sure if zero will be assigned to it. Like I don't know what would be the return type of this condition of this."
4281,34809,34852,Inferring Semantics from Reasoning,So hence it has to be the other way around.
4281,36174,36247,Would Have Written it Differently,"if I do it at my workplace, I not be happy if somebody leaves this to me."
4281,36174,36247,Emotional Aspect,"if I do it at my workplace, I not be happy if somebody leaves this to me."
4281,35843,36247,Snippet Value Judgement,"you know, this saves space, but you need, has to be used in such a way that, you know, it is not difficult for anybody who's reading the program for it should not be something that I have to sit down and figure because we are just saving some space and making it compact. We have to make it clear in the sense if I do it in a, uh, if I do it at my workplace, I not be happy if somebody leaves this to me."
4281,35843,36247,Social Context of Code,"you know, this saves space, but you need, has to be used in such a way that, you know, it is not difficult for anybody who's reading the program for it should not be something that I have to sit down and figure because we are just saving some space and making it compact. We have to make it clear in the sense if I do it in a, uh, if I do it at my workplace, I not be happy if somebody leaves this to me."
4281,35843,36247,Maintainability,"you know, this saves space, but you need, has to be used in such a way that, you know, it is not difficult for anybody who's reading the program for it should not be something that I have to sit down and figure because we are just saving some space and making it compact. We have to make it clear in the sense if I do it in a, uh, if I do it at my workplace, I not be happy if somebody leaves this to me."
4281,35843,36247,Design Concerns,"you know, this saves space, but you need, has to be used in such a way that, you know, it is not difficult for anybody who's reading the program for it should not be something that I have to sit down and figure because we are just saving some space and making it compact. We have to make it clear in the sense if I do it in a, uh, if I do it at my workplace, I not be happy if somebody leaves this to me."
4281,36517,36597,Not Previously Written, I'm not too confident because I have not ever worked. I have not used this ever
4281,36517,36597,Unsure, I'm not too confident because I have not ever worked. I have not used this ever
4281,36658,36698,Previously Seen,this kind of notation I have seen before
4281,36703,36745,Previously Used,I have checked on ints with a base pointer
4281,36547,36745,Unfamiliar Syntax," I have not ever worked. I have not used this ever, but as this compiles, like you say, this should be a yeah, this kind of notation I have seen before and I have checked on ints with a base pointer"
4281,36747,36849,Correct Semantics,"So if my understanding is right, it should still return whatever it is at the second index, that is E."
4281,36477,36849,Relying on Correctness of Example,"[Snippet 91] Well, yeah, this one, this, I'm not too confident because I have not ever worked. I have not used this ever, but as this compiles, like you say, this should be a yeah, this kind of notation I have seen before and I have checked on ints with a base pointer. So if my understanding is right, it should still return whatever it is at the second index, that is E."
4281,37254,37366,Unsure,"this is not a base pointer, but I do understand it's a string and I'm really shaky when it comes to strings in C"
4281,37254,37366,Incorrect Semantics,"this is not a base pointer, but I do understand it's a string and I'm really shaky when it comes to strings in C"
4281,37254,37366,Strings as Pointers/Arrays,"this is not a base pointer, but I do understand it's a string and I'm really shaky when it comes to strings in C"
4281,37368,37471,Language Value Judgement,I don't think about them too much because I think that data type is not actually meant for the language
4281,37320,37522,Potential Confusing Constructs,"I'm really shaky when it comes to strings in C. I don't think about them too much because I think that data type is not actually meant for the language. So yeah, that's why I'm not confident about this."
4281,38083,38220,Previously Seen,I have typically seen strings being assigned to char pointers that is okay with me. That is all I know about how I deal with strings in C
4281,38300,38492,Quote,So when I see anything different I'm not too confident about it because I haven't done it before and I'm not comfortable with strings and see in any other fashion than what I have already seen
4281,38300,38492,Unsure,So when I see anything different I'm not too confident about it because I haven't done it before and I'm not comfortable with strings and see in any other fashion than what I have already seen
4281,38704,38822,Non-standard terminology,"Subject:            41:03          I am not because I have seen that kind of declaration before, but not with strings."
4281,38704,38822,Previously Seen,"Subject:            41:03          I am not because I have seen that kind of declaration before, but not with strings."
4281,38704,38822,Not Previously Seen,"Subject:            41:03          I am not because I have seen that kind of declaration before, but not with strings."
4281,40337,40379,Memory Management,I'm not too comfortable about memory and C
4281,40337,40379,Unsure,I'm not too comfortable about memory and C
4281,40218,41046,Discussion Question,"Subject:            42:27          Okay. Just one more thing about that is uh, I have a lot of, uh, you know, I don't, I'm not too comfortable about memory and C, so if I just drag something like this, if at all this was in memory, you know, the sitting like this q, w, e, r, t y. So where was the memory assigned or allocated for this? If I start talking about it like this this, you know? Where was the memory dedicated for this.

Interviewer:        42:52          Like where, where in all of the memory?

Subject:            42:55          No, no, not read exactly in this code. I do not see it being referenced anytime before and I have just mentioned it here and um, I'm trying to access the second index of this so I don't understand where was that, where exactly did C find the time to assign or allocate memory to this?"
4281,42975,43137,Apparent Contradiction,"Oh yeah. I actually, yeah, this was true and I didn't care about the other one, but I should have given our discussion about how or checks for both of these ways."
4281,42975,43137,Short-circuiting,"Oh yeah. I actually, yeah, this was true and I didn't care about the other one, but I should have given our discussion about how or checks for both of these ways."
4281,44258,44398,Attention,I didn't give it a lot of thought in the sense of with and what would happen if I'd have seen an and as part maybe I would've thought harder
4281,44461,44612,Evaluation Order,"And I always get confused with, I don't know if it is Java or C plus plus or something that the evaluation actually has happens from the left to right."
4281,44409,44676,Remember," I do remember some. Something like that happening. And I always get confused with, I don't know if it is Java or C plus plus or something that the evaluation actually has happens from the left to right. I don't know if it happens any where or is it just my memories."
4281,45009,45528,Unsure,"is what I have a very big doubt on and I don't know which one and I'm always confused when I come to these boolean conditions where you know, I have to see which one. If you actually asked me which one would have been executed first, I would have taken a minute to say that. Okay. It would be this one first and then it would move. I don't know if it moves from left to right. C, I know it moves from left to right, but I think there is some language which moves from right to left. I might be very wrong. I don't know."
4281,45009,45528,Evaluation Order,"is what I have a very big doubt on and I don't know which one and I'm always confused when I come to these boolean conditions where you know, I have to see which one. If you actually asked me which one would have been executed first, I would have taken a minute to say that. Okay. It would be this one first and then it would move. I don't know if it moves from left to right. C, I know it moves from left to right, but I think there is some language which moves from right to left. I might be very wrong. I don't know."
4281,45341,45528,Contrasting different languages,"I don't know if it moves from left to right. C, I know it moves from left to right, but I think there is some language which moves from right to left. I might be very wrong. I don't know."
4281,45863,46080,Java,"Well, it's not maybe because it's not even Java. I don't know why it's just. Maybe you know. I did read it as left to right and I did the same wrong thing that I do. Maybe it stuck with me and that's a doubt. So yeah."
4281,46951,47020,Attention,So my thought process was more around the operator than the condition
4281,47366,47426,Recurring Problem,"Yes, this kind of operators always get me a little worked up"
4281,46951,47468,Cognitive Load,"So my thought process was more around the operator than the condition. Hence I missed that evaluation during the first glance that I gave it. And I obviously did not spend too much time thinking about it. Hence you know I didn't get into that, but here it was I was pretty confident about how this would result in. So I was giving more thought about which would evaluated and which would not be. So yeah, if I see. Yes, this kind of operators always get me a little worked up. I start giving them a lot of importance."
9112,649,771,Correct Semantics,"10 mod 3 the result is 1. So this if statement is always be true. So we V1 equals 4, so it was a printout the result is 4."
9112,1380,1530,Sure,Because these XXX? That this if statement to always be true. So we definitely 4. There's no reason that V1 should-can be changed. So the results is 4.
9112,2031,2106,Correct Semantics,I think plus plus V1 is equivalent with V1 equals V1 plus 1 so we might say
9112,2031,2106,Unsure,I think plus plus V1 is equivalent with V1 equals V1 plus 1 so we might say
9112,2249,2393,Remember," I forgot like the exact mechanism of how this plus plus works. I'm think that it translated into some formula, like this one, but I'm not sure."
9112,2249,2393,Unsure," I forgot like the exact mechanism of how this plus plus works. I'm think that it translated into some formula, like this one, but I'm not sure."
9112,2804,2875,Non-standard terminology,"So if the initial but not assign initial variable, but not assign value"
9112,2888,2919,Correct Semantics, V2 should have a default value
9112,2920,2946,Remember, I cannot recall the exact
9112,2804,2979,Uninitialized,"So if the initial but not assign initial variable, but not assign value in this case V2 should have a default value. I cannot recall the exact XXX, but it's definitely not one"
9112,2955,3040,Surprising comment," it's definitely not one. So this thing [V2 = 1, misinterpreted as equality] is false"
9112,2955,3040,Mistook asignment for equality," it's definitely not one. So this thing [V2 = 1, misinterpreted as equality] is false"
9112,2955,3040,Inferring Semantics from Reasoning," it's definitely not one. So this thing [V2 = 1, misinterpreted as equality] is false"
9112,3084,3193,Amusement," Oh, that is kind of a trick. Okay. I will say, I don't know, maybe V1 0, but V2 is minus 1. [Quiet laughter]"
9112,3084,3193,Guessing," Oh, that is kind of a trick. Okay. I will say, I don't know, maybe V1 0, but V2 is minus 1. [Quiet laughter]"
9112,3084,3193,Trick Question," Oh, that is kind of a trick. Okay. I will say, I don't know, maybe V1 0, but V2 is minus 1. [Quiet laughter]"
9112,2772,3193,Unsure,"So we initial V1, V2. Ok, oops, So if the initial but not assign initial variable, but not assign value in this case V2 should have a default value. I cannot recall the exact XXX, but it's definitely not one. So this thing [V2 = 1, misinterpreted as equality] is false and the, if it is false, so it's zero here. Oh, that is kind of a trick. Okay. I will say, I don't know, maybe V1 0, but V2 is minus 1. [Quiet laughter]"
9112,3827,3917,Multiple Possible Semantics,"Yeah, I, from my experiences, I either minus one or to the smallest number from the system"
9112,3827,3917,Previously Used,"Yeah, I, from my experiences, I either minus one or to the smallest number from the system"
9112,3827,3917,Uninitialized,"Yeah, I, from my experiences, I either minus one or to the smallest number from the system"
9112,3827,3917,Incorrect Semantics,"Yeah, I, from my experiences, I either minus one or to the smallest number from the system"
9112,4078,4159,Correct Semantics,"So if it is minus 1, so this expression is false and in C the false represents 0."
9112,4078,4159,Boolean Value of Integer,"So if it is minus 1, so this expression is false and in C the false represents 0."
9112,4322,4372,Unsure,"Yeah, I'm definitely unsure about this one I think"
9112,4488,4511,Uninitialized,"Yes, the default value."
9112,4687,4785,Correct Semantics," So that one's easy so this one 0 so we don't need to consider about that one. So the result, is 1"
9112,4668,4792,Simple," [Snippet 99] Okay. So that one's easy so this one 0 so we don't need to consider about that one. So the result, is 1. Yeah."
9112,4924,5058,Correct Semantics," because we've got the initial value here first. And this statement will not be considered, because they are always be false. So XXXX."
9112,5289,5330,Simple,"So the first line, straightforward enough"
9112,5354,5371,Non-standard terminology,self-increasement
9112,5613,5727,Few things,"So there is only one like real expression here that we assigned V1 value for one, so we print it out. So it's one."
9112,5964,6201,Correct Semantics,"Uh, because uh, I forget like in C. How do we decide base like base of 2 or base of 10 or based of 8. Yeah, so it because, this one seems like a base of 8 creation, like some kind of base of 8 or base of 16 things, but it's hard to tell."
9112,5964,6201,Remember,"Uh, because uh, I forget like in C. How do we decide base like base of 2 or base of 10 or based of 8. Yeah, so it because, this one seems like a base of 8 creation, like some kind of base of 8 or base of 16 things, but it's hard to tell."
9112,5964,6201,Contrasting different languages,"Uh, because uh, I forget like in C. How do we decide base like base of 2 or base of 10 or based of 8. Yeah, so it because, this one seems like a base of 8 creation, like some kind of base of 8 or base of 16 things, but it's hard to tell."
9112,5964,6201,Ambiguous Readability,"Uh, because uh, I forget like in C. How do we decide base like base of 2 or base of 10 or based of 8. Yeah, so it because, this one seems like a base of 8 creation, like some kind of base of 8 or base of 16 things, but it's hard to tell."
9112,6609,6907,Unsure,So I'm worried about one thing that this kind of plus plus variable things versus the variable plus plus just their differences and like think of why is the self-increasement first and do the expressions and another end XXX that we picked was evaluated expression first and do the self-increasement
9112,6609,6907,Evaluation Order,So I'm worried about one thing that this kind of plus plus variable things versus the variable plus plus just their differences and like think of why is the self-increasement first and do the expressions and another end XXX that we picked was evaluated expression first and do the self-increasement
9112,8372,8423,Unsure, what is exactly the order that this equation works
9112,8372,8423,Precedence, what is exactly the order that this equation works
9112,8560,8640,Sure, I know that the operators has some kind of rank when you doing the calculations
9112,8560,8676,Precedence," I know that the operators has some kind of rank when you doing the calculations, but I cannot recall them correctly"
9112,8641,8676,Remember, but I cannot recall them correctly
9112,8641,8676,Unsure, but I cannot recall them correctly
9112,8302,8677,Discussion Question,"Subject:            15:49          Oh yeah. It's basically about this, what is exactly the order that this equation works

Interviewer:        15:58          Actually, um, so, which, which part is ambiguous?

Subject:            16:04          Like this part I know that the operators has some kind of rank when you doing the calculations, but I cannot recall them correctly."
9112,8959,9066,Visual Reference,"From my experience and I think this one worked first. Okay, then we do the minus and we assigned the value."
9112,8959,9066,Learned by Programming,"From my experience and I think this one worked first. Okay, then we do the minus and we assigned the value."
9112,8959,9066,Correct Semantics,"From my experience and I think this one worked first. Okay, then we do the minus and we assigned the value."
9112,9710,9791,Unsure," Really not sure how the V1, the value of V1, can you just explain this statement"
9112,10018,10091,Quote,"this little expression in here, V2 = V1 [sic, should have been (V2 = 1)]."
9112,9663,10101,Discussion Question,"Subject:            17:21          I'm uh just. Really not sure how the V1, the value of V1, can you just explain this statement

Interviewer:        17:30          sure. Okay. So, um, yeah, you mentioned, um, this gets default value and you're not sure what it gets

Interviewer:        17:42          more. I think more significant than that. Um, this, this little expression in here, V2 = V1 [sic, should have been (V2 = 1)]. I think.."
9112,10244,10287,Mistook asignment for equality," I saw this equal mark, but as assign mark."
9112,10244,10287,Caught Own Mistake Before Prompted," I saw this equal mark, but as assign mark."
9112,10532,10566,Simple,So would be maybe straightforward?
9112,10759,10788,Surprising comment,This parenthesis messed me up
9112,10759,10789,Parenthesis,This parenthesis messed me up.
9112,10944,11005,Visual Reference," I think this is a like expression, so it should have a value"
9112,11007,11062,Visual Reference,"Yeah, and this operation, just like return like nothing"
9112,10945,11063,"Expression vs Statement, value vs no-value","I think this is a like expression, so it should have a value. Yeah, and this operation, just like return like nothing."
9112,10945,11140,Correct for Wrong Reasons,"I think this is a like expression, so it should have a value. Yeah, and this operation, just like return like nothing. So only the remaining value is 2. So if I would guess I would guess V1 is 2."
9112,10945,11140,Inferring Semantics from Reasoning,"I think this is a like expression, so it should have a value. Yeah, and this operation, just like return like nothing. So only the remaining value is 2. So if I would guess I would guess V1 is 2."
9112,12703,12724,Trick Question, So this is so tricky
9112,13089,13129,Language Value Judgement, It's a typical Magic C code style that.
9112,13089,13129,Quote, It's a typical Magic C code style that.
9112,13503,13524,Simple,it's straightforward.
9112,14551,14564,Amusement,No [Laughter]
9112,14858,15042,Integer Radix for String,"Yeah, like I just kind of confused like why there can save, can have different base of numbers and for int object I think its for string object, we have like different number base, but"
9112,14858,15212,Python,"Yeah, like I just kind of confused like why there can save, can have different base of numbers and for int object I think its for string object, we have like different number base, but

Interviewer:        24:45          for string objects

Subject:            24:46          Yes, but for int, I know python has something like it, but in C, I'm not sure."
9112,14858,15212,Contrasting different languages,"Yeah, like I just kind of confused like why there can save, can have different base of numbers and for int object I think its for string object, we have like different number base, but

Interviewer:        24:45          for string objects

Subject:            24:46          Yes, but for int, I know python has something like it, but in C, I'm not sure."
9112,14823,15212,Discussion Question,"Subject:            24:28          Yeah, like I just kind of confused like why there can save, can have different base of numbers and for int object I think its for string object, we have like different number base, but

Interviewer:        24:45          for string objects

Subject:            24:46          Yes, but for int, I know python has something like it, but in C, I'm not sure."
9112,15654,15803,Integer Radix for String,"Oh, it's not string based its like this. If we represent a number using string so we can transfer it from one base to another like 10 base 2 to base."
9112,16004,16053,Language Value Judgement,So it's hard to just write a C code from scratch.
9112,15969,16053,C Experience,Subject:            25:36          So it's hard to just write a C code from scratch.
9112,16232,16364,Incorrect Semantics,"XXX expression, so I mean it's like if we have strings that has 8. You can transfer it into a, like a binary expression. That is 111"
9112,15293,17117,Contrasting different languages," Python

Interviewer:        24:57          Oh, python does have the different bases?

Subject:            25:00          Yes.

Interviewer:        25:00          Oh, okay. I'm not as familiar with Python, before we talk about this though, um, you mentioned string basses, but I don't think I'm familiar with those. Can you?

Subject:            25:14          Oh, it's not string based its like this. If we represent a number using string so we can transfer it from one base to another like 10 base 2 to base.

Interviewer:        25:26          Okay. Um, can you draw me a little example of what you mean? I'm not a but I like I don't, I don't want to put pressure on you.

Subject:            25:36          So it's hard to just write a C code from scratch.

Interviewer:        25:43          Well if you don't want to write it, that's fine. I just, I'm not familiar with this thing is all. So then

Subject:            25:50          XXX expression, so I mean it's like if we have strings that has 8. You can transfer it into a, like a binary expression. That is 111

Interviewer:        26:02          Oh, I see the, the binary value. Okay. Um, okay. Yeah, that makes sense to me. Um, and so why, why did this make you think of that?

Subject:            26:20          Because like in Python if you want, if I want to represent an int value is let's say 16 base, which I just get x and 0x and the value. So the compiler, will think that this value will be a 16 based similarly if we add a B in front of the survivor the the int value compiler will think it has a binary value. So right in front of there is a 0 so...

Interviewer:        26:51          Oh I see. Okay. So the 0 makes you think of that. Do you know if in Python the 0 in front, does mean anything?

Subject:            26:59          It means nothing."
9112,15293,17117,Python," Python

Interviewer:        24:57          Oh, python does have the different bases?

Subject:            25:00          Yes.

Interviewer:        25:00          Oh, okay. I'm not as familiar with Python, before we talk about this though, um, you mentioned string basses, but I don't think I'm familiar with those. Can you?

Subject:            25:14          Oh, it's not string based its like this. If we represent a number using string so we can transfer it from one base to another like 10 base 2 to base.

Interviewer:        25:26          Okay. Um, can you draw me a little example of what you mean? I'm not a but I like I don't, I don't want to put pressure on you.

Subject:            25:36          So it's hard to just write a C code from scratch.

Interviewer:        25:43          Well if you don't want to write it, that's fine. I just, I'm not familiar with this thing is all. So then

Subject:            25:50          XXX expression, so I mean it's like if we have strings that has 8. You can transfer it into a, like a binary expression. That is 111

Interviewer:        26:02          Oh, I see the, the binary value. Okay. Um, okay. Yeah, that makes sense to me. Um, and so why, why did this make you think of that?

Subject:            26:20          Because like in Python if you want, if I want to represent an int value is let's say 16 base, which I just get x and 0x and the value. So the compiler, will think that this value will be a 16 based similarly if we add a B in front of the survivor the the int value compiler will think it has a binary value. So right in front of there is a 0 so...

Interviewer:        26:51          Oh I see. Okay. So the 0 makes you think of that. Do you know if in Python the 0 in front, does mean anything?

Subject:            26:59          It means nothing."
9112,17824,17935,Incorrect Semantics,"Okay, so it's a base 8. And I think per this means that the output for the be a digit, so it's 1 plus 8. It's 9"
9112,17824,17935,Change of Radix,"Okay, so it's a base 8. And I think per this means that the output for the be a digit, so it's 1 plus 8. It's 9"
9112,18031,18167,Caught Own Mistake Before Prompted,"Ah, so it's a transfer from like 8 based to 10 based. I hope I'm doing it right. So. Okay, so 1 3. Oh, it's not 1, it's 3 plus 1 plus 8,"
9112,18031,18167,Change of Radix,"Ah, so it's a transfer from like 8 based to 10 based. I hope I'm doing it right. So. Okay, so 1 3. Oh, it's not 1, it's 3 plus 1 plus 8,"
9112,18031,18167,Unsure,"Ah, so it's a transfer from like 8 based to 10 based. I hope I'm doing it right. So. Okay, so 1 3. Oh, it's not 1, it's 3 plus 1 plus 8,"
9112,18254,18328,Correct Semantics,"because it's 3 times 8 to the power of 0 plus 1 times 8, to the power of 1"
9112,19154,19289,Evaluation Order," So, right now I'm definitely clear about the whole code because I'm only confused about what is first, so right now I think I'm clear."
9112,19154,19289,Causes of Confusion," So, right now I'm definitely clear about the whole code because I'm only confused about what is first, so right now I think I'm clear."
9112,19154,19289,Sure," So, right now I'm definitely clear about the whole code because I'm only confused about what is first, so right now I think I'm clear."
9112,19326,19416,Visual Reference,"So the reason it was five, not six was because of this [points to if-statement condition]."
9112,19545,19578,Complex,There's so many self-increasement
9112,19545,19719,Recurring Problem,There's so many self-increasement here and I'm not sure because in previous code that I'm always kind of like confused about them because I haven't touched C for a long time.
9112,19545,19719,Long ago,There's so many self-increasement here and I'm not sure because in previous code that I'm always kind of like confused about them because I haven't touched C for a long time.
9112,19545,19719,Unsure,There's so many self-increasement here and I'm not sure because in previous code that I'm always kind of like confused about them because I haven't touched C for a long time.
9112,19545,19719,Attribution of Confusion,There's so many self-increasement here and I'm not sure because in previous code that I'm always kind of like confused about them because I haven't touched C for a long time.
9112,19291,19930,Discussion Question,"Interviewer:        29:19          So the reason it was five, not six was because of this [points to if-statement condition].

Interviewer:        29:23          Yes.

Interviewer:        29:23          Which part was

Subject             29:25          There's so many self-increasement here and I'm not sure because in previous code that I'm always kind of like confused about them because I haven't touched C for a long time.

Interviewer:        29:41          Okay. Um, so it was, it was about the plus pluses. Yeah. Yeah. Okay, cool. Um, so after we've talked about how the plus pluses work, um, can you walk me through how this, how"
9112,19984,20076,Short-circuiting,So first V1 is 1 and 3 V2 is 3 and both of them the self-increasement will make them 2 and 4
9112,19984,20076,Incorrect Semantics,So first V1 is 1 and 3 V2 is 3 and both of them the self-increasement will make them 2 and 4
9112,20834,20900,Long ago,just give me a minute to tell the difference and it's a long time.
9112,20907,21072,Partially Correct Semantics,"So if, if we are using this one to evaluate an expression, if A is true, then we don't need to calculate B. Yeah. But for this one we need to calculate both A and B."
9112,20907,21072,Apparent Contradiction,"So if, if we are using this one to evaluate an expression, if A is true, then we don't need to calculate B. Yeah. But for this one we need to calculate both A and B."
9112,21223,21415,Caught Own Mistake After Prompted," [Laughter] Yeah, I see that. So V1 is 2 and a. So since V1 is true we don't need to evaluate the, the half part of them, so the V1 is 4, but V2 the default value is 3. So it's 3 times 3 is 9."
9112,21223,21415,Amusement," [Laughter] Yeah, I see that. So V1 is 2 and a. So since V1 is true we don't need to evaluate the, the half part of them, so the V1 is 4, but V2 the default value is 3. So it's 3 times 3 is 9."
1879,854,1063,Questioning Program Validity (correctly)," I already told you they wouldn't compile, or shouldn't compile

Interviewer:        00:45          Ha, right.

Subject:            00:45          [Snippet 85] Oh, so they are all void main. Oh, that's lovely."
1879,1014,1455,Uninitialized,"Oh, so they are all void main. Oh, that's lovely. Okay. So I'm supposed to tell you what this thing does. This sounds terrible. Who did this? Okay. Oh, so start time. Um, okay, so, so this thing has an array that is not properly initialized and initializes one of the variables. And uh, what are you doing here? [Inaudible] the variable and the variable is the variable minus one and it prints these four [exasperated sigh] this is terrible."
1879,1014,1455,Quote,"Oh, so they are all void main. Oh, that's lovely. Okay. So I'm supposed to tell you what this thing does. This sounds terrible. Who did this? Okay. Oh, so start time. Um, okay, so, so this thing has an array that is not properly initialized and initializes one of the variables. And uh, what are you doing here? [Inaudible] the variable and the variable is the variable minus one and it prints these four [exasperated sigh] this is terrible."
1879,1014,1455,Snippet Value Judgement,"Oh, so they are all void main. Oh, that's lovely. Okay. So I'm supposed to tell you what this thing does. This sounds terrible. Who did this? Okay. Oh, so start time. Um, okay, so, so this thing has an array that is not properly initialized and initializes one of the variables. And uh, what are you doing here? [Inaudible] the variable and the variable is the variable minus one and it prints these four [exasperated sigh] this is terrible."
1879,1498,1529,Cognitive Load,"So this I cannot do in my head,"
1879,1864,1927,Would Have Written it Differently,"You should have just put minus minus, what are you doing there?"
1879,1864,1927,Alternative Idioms,"You should have just put minus minus, what are you doing there?"
1879,2216,2234,Paranoia,I'm never positive
1879,2678,2775,Math is easy or hard," there's a lot of arithmetic that I may have gotten wrong, so, and that's what computers are for."
1879,2900,3001,Simple,"I had nothing here sounds terrible. It's a while loop. Expressed in a very strange way, but whatever."
1879,2900,3001,Snippet Value Judgement,"I had nothing here sounds terrible. It's a while loop. Expressed in a very strange way, but whatever."
1879,3170,3553,Would Have Written it Differently,"Well, you have a while loop with a const... They are using the same variable for the control uh variable, right? It's the V1 sub 4, so if you're using that variable all the time, why didn't you just say For you know, variable equals three comma variable, semi colon, variable, different zero comma, semicolon, variable minus, minus. That's what you're trying to do. So just say that."
1879,3632,4138,Complex,"Right. And then you are initializing the array hack again in a sort of bizarre way to the index and the value. But that seems like your inc..., like they control variable is being decremented. So you are initializing all the variables from three and. Ooo it is weird. Three.

Subject:            04:39          Yeah. So your dec... Initializing the array from one to three with or from three to one with decrementing values. So you might as well say that, right? Instead of writing it in a complicated way."
1879,3632,4138,Snippet Value Judgement,"Right. And then you are initializing the array hack again in a sort of bizarre way to the index and the value. But that seems like your inc..., like they control variable is being decremented. So you are initializing all the variables from three and. Ooo it is weird. Three.

Subject:            04:39          Yeah. So your dec... Initializing the array from one to three with or from three to one with decrementing values. So you might as well say that, right? Instead of writing it in a complicated way."
1879,4369,4894,Snippet Value Judgement,"Well, it's, it's an array and you didn't put a brace or anything in it. So the values on the inside that array are all uninitialized. That means that they could have random values, they could have zeros, they could have whatever the compiler and linker decided was a sufficiently inconvenient [chuckles] to set the values too. Right. Uh, at the end of the day because you're not doing anything stupid, like not like reading one of the values that was not initialized, but sure. Okay. Awesome. Thank you very much. No problem."
1879,4369,4894,Uninitialized,"Well, it's, it's an array and you didn't put a brace or anything in it. So the values on the inside that array are all uninitialized. That means that they could have random values, they could have zeros, they could have whatever the compiler and linker decided was a sufficiently inconvenient [chuckles] to set the values too. Right. Uh, at the end of the day because you're not doing anything stupid, like not like reading one of the values that was not initialized, but sure. Okay. Awesome. Thank you very much. No problem."
1879,4369,4894,Amusement,"Well, it's, it's an array and you didn't put a brace or anything in it. So the values on the inside that array are all uninitialized. That means that they could have random values, they could have zeros, they could have whatever the compiler and linker decided was a sufficiently inconvenient [chuckles] to set the values too. Right. Uh, at the end of the day because you're not doing anything stupid, like not like reading one of the values that was not initialized, but sure. Okay. Awesome. Thank you very much. No problem."
1879,5111,5279,Sure,"I'm pretty sure that is correct. I mean, unless you did something, no, there's nothing here, that. Uh, a V1 and V2, yeah, there is nothing here that is obviously wrong."
1879,5111,5279,Double Check,"I'm pretty sure that is correct. I mean, unless you did something, no, there's nothing here, that. Uh, a V1 and V2, yeah, there is nothing here that is obviously wrong."
1879,5404,5571,Math is easy or hard," Because it is relatively simple. Straight forward. There is no flow control, nothing that I, I mean, I could make a mistake. I don't know how to add, but pretty sure."
1879,5404,5571,Simple," Because it is relatively simple. Straight forward. There is no flow control, nothing that I, I mean, I could make a mistake. I don't know how to add, but pretty sure."
1879,6087,6132,Surprising comment,I think you can redefine macros all you want.
1879,5741,6241,Amusement,"What are we doing here? Two variables V1 and V2. If they are a define else define, uh, okay, so this one is going to go on the first branch and no! [Excitedly] Okay, sure. Okay. So these ones, it doesn't matter what branch it goes to, it's going to print two and one and backslash N, and I'm pretty sure you can. Um, what is the time, 10 41? Uh, I think you can redefine macros all you want. So this is okay. Flow control of the compi... Of the c compiler and the preprocessor are not uh, interleaved"
1879,5741,6241,Caught Own Mistake Before Prompted,"What are we doing here? Two variables V1 and V2. If they are a define else define, uh, okay, so this one is going to go on the first branch and no! [Excitedly] Okay, sure. Okay. So these ones, it doesn't matter what branch it goes to, it's going to print two and one and backslash N, and I'm pretty sure you can. Um, what is the time, 10 41? Uh, I think you can redefine macros all you want. So this is okay. Flow control of the compi... Of the c compiler and the preprocessor are not uh, interleaved"
1879,6319,6439,History Lesson,"Yeah. Well this is one of the Turing complete languages in c and c plus plus [laughter]. We can count them later. Um, so"
1879,6579,6828,Few things,"Yeah, it's pretty obvious, right? I mean the, the, the print expression that just depends on the values of the macros and the values of the macros do not depend on the flow control. And once you realize that, then the values are pretty obvious, but,"
1879,6579,6828,Simple,"Yeah, it's pretty obvious, right? I mean the, the, the print expression that just depends on the values of the macros and the values of the macros do not depend on the flow control. And once you realize that, then the values are pretty obvious, but,"
1879,7002,7012,Surprising comment,I hate you
1879,7124,7316,Correct Semantics,"So V1 is going to be two V two is going to be one and and and the time is 10 42 and I'm pretty sure about, oh sorry! Plus Plus V1. So that's three, ooo, a minus two one oh yeah, that's correct"
1879,7124,7316,Incorrect Semantics,"So V1 is going to be two V two is going to be one and and and the time is 10 42 and I'm pretty sure about, oh sorry! Plus Plus V1. So that's three, ooo, a minus two one oh yeah, that's correct"
1879,7124,7316,Sure,"So V1 is going to be two V two is going to be one and and and the time is 10 42 and I'm pretty sure about, oh sorry! Plus Plus V1. So that's three, ooo, a minus two one oh yeah, that's correct"
1879,7124,7316,Caught Own Mistake Before Prompted,"So V1 is going to be two V two is going to be one and and and the time is 10 42 and I'm pretty sure about, oh sorry! Plus Plus V1. So that's three, ooo, a minus two one oh yeah, that's correct"
1879,7475,7684,Math is easy or hard,"Uh, well these one they, they've, the arithmetic is a little bit more complicated but not terrible. The plus plus left side operator is the value after they increment. So that's the only trickery in this ones."
1879,7475,7684,Complex,"Uh, well these one they, they've, the arithmetic is a little bit more complicated but not terrible. The plus plus left side operator is the value after they increment. So that's the only trickery in this ones."
1879,7808,8261,Cognitive Load,"No, it's because I forgot that I had incremented the variable. So in the print statement, right, they, I did the math in my head about how v two was initialized. There are two possible ways. If you said, if you had said V1 plus plus, right. That is a value before. So you have to be careful when you're using the output of plus plus V or plus plus or V plus plus. And then I forgot about the actually increment happening. So I side effects of plus plus."
1879,8172,8261,Side-effect,And then I forgot about the actually increment happening. So I side effects of plus plus.
1879,8346,8388,Double Check,"But, this is why we check ourselves. Yeah."
1879,8634,8737,Visual Reference,"so this is one of those silly cases where, uh, the x, so I expression by definition is equal to I sub x"
1879,8634,8737,Mental Model,"so this is one of those silly cases where, uh, the x, so I expression by definition is equal to I sub x"
1879,8739,8773,Snippet Value Judgement,a thing that everybody should know
1879,9204,9379,Remember,"Uh, well because, uh, the fact that I, X sub I is equal to I sub X is one of my favorite, silly things to remember. Yeah. It is a stupid really, but I do enjoy remembering it."
1879,9204,9379,Snippet Value Judgement,"Uh, well because, uh, the fact that I, X sub I is equal to I sub X is one of my favorite, silly things to remember. Yeah. It is a stupid really, but I do enjoy remembering it."
1879,9827,9862,Learned by Reading Book, I think I read about it somewhere.
1879,9944,10035,Apparent Contradiction," I would really avoid writing code like that, and if I read code, I would yell at somebody."
1879,9944,10035,Snippet Value Judgement," I would really avoid writing code like that, and if I read code, I would yell at somebody."
1879,9944,10035,Would Have Written it Differently," I would really avoid writing code like that, and if I read code, I would yell at somebody."
1879,10216,10585,Potential Confusing Constructs,"Ah, so printf and the percent things I pretty sure I remember most of them and I'm pretty sure percent C prints the character, but I, I check the man page every time I have to use one those. Gotcha. Okay, cool. I mean is it percent lu or is it percent ul? I never remember. Uh, and I, I mean I sure I will look up the man page to remember. Gotcha. All right. Thank you."
1879,10216,10585,Remember,"Ah, so printf and the percent things I pretty sure I remember most of them and I'm pretty sure percent C prints the character, but I, I check the man page every time I have to use one those. Gotcha. Okay, cool. I mean is it percent lu or is it percent ul? I never remember. Uh, and I, I mean I sure I will look up the man page to remember. Gotcha. All right. Thank you."
1879,10181,10585,Would RTFM,"Subject:            11:36          Ah, so printf and the percent things I pretty sure I remember most of them and I'm pretty sure percent C prints the character, but I, I check the man page every time I have to use one those. Gotcha. Okay, cool. I mean is it percent lu or is it percent ul? I never remember. Uh, and I, I mean I sure I will look up the man page to remember. Gotcha. All right. Thank you."
1879,10181,10585,printf,"Subject:            11:36          Ah, so printf and the percent things I pretty sure I remember most of them and I'm pretty sure percent C prints the character, but I, I check the man page every time I have to use one those. Gotcha. Okay, cool. I mean is it percent lu or is it percent ul? I never remember. Uh, and I, I mean I sure I will look up the man page to remember. Gotcha. All right. Thank you."
1879,10774,10826,Surprising comment,the conversion from float to int isn't well defined.
1879,10738,11250,Questioning Program Validity,"10:46 float, int. Ugh [in disgust], the conversion from float to int isn't well defined. Uh, I'm going to say that yes. And this is going to print one backslash N, it doesn't round it, if it's defined, it truncates it to some [inaudible]. But uh, a lot of compilers will give you at least a warning. And if you have, I mean I was just fixing warnings like this with MSVC. Um, so you would depends on your flags if you have W All dash W Error, these may not compile. Um, but otherwise got that sort of [inaudible]"
1879,11483,11938,C Experience,"arithmetic conversions are always tricky and even though I, you know, I would be really surprised if the value's different. I'm always willing to be surprised with these things, I'm not, let me put this in perspective. I been coding in C and C plus plus for about 30 years. If you ask me how confident I feel about the language overall, I would say seven out of 10. Right. So that take that into that, that will make let you balance that answer. [Amused]
"
1879,11483,11938,Unsure,"arithmetic conversions are always tricky and even though I, you know, I would be really surprised if the value's different. I'm always willing to be surprised with these things, I'm not, let me put this in perspective. I been coding in C and C plus plus for about 30 years. If you ask me how confident I feel about the language overall, I would say seven out of 10. Right. So that take that into that, that will make let you balance that answer. [Amused]
"
1879,11483,11938,Amusement,"arithmetic conversions are always tricky and even though I, you know, I would be really surprised if the value's different. I'm always willing to be surprised with these things, I'm not, let me put this in perspective. I been coding in C and C plus plus for about 30 years. If you ask me how confident I feel about the language overall, I would say seven out of 10. Right. So that take that into that, that will make let you balance that answer. [Amused]
"
1879,11483,11938,Paranoia,"arithmetic conversions are always tricky and even though I, you know, I would be really surprised if the value's different. I'm always willing to be surprised with these things, I'm not, let me put this in perspective. I been coding in C and C plus plus for about 30 years. If you ask me how confident I feel about the language overall, I would say seven out of 10. Right. So that take that into that, that will make let you balance that answer. [Amused]
"
1879,11483,11938,Complex,"arithmetic conversions are always tricky and even though I, you know, I would be really surprised if the value's different. I'm always willing to be surprised with these things, I'm not, let me put this in perspective. I been coding in C and C plus plus for about 30 years. If you ask me how confident I feel about the language overall, I would say seven out of 10. Right. So that take that into that, that will make let you balance that answer. [Amused]
"
1879,12302,12477,Paranoia," I'm pretty sure that's going to be the output, but if somebody tells me, oh no, you know, there is these weird corner where something happens, I would go, oh, sure. Whatever."
1879,12670,12885,Counterfactual Semantics,"Two would be another alternative, but it would be very surprising too because I'm pretty sure the definition is truncate, it's not, it's not, um, to round up. That's why we have the round function and ceil function."
1879,13311,13506,Argument Order,"Two variables, we, you initialize both of them and let's make sure that I put them in the right order. So two and one and the new line, um, I'm pretty sure and I'm fairly positive about that one."
1879,13583,13798,Uninitialized,"Subject:            15:09          There is nothing complicated about this one. You have two variables that you should have initialized but you didn't or I'm saying ""you"", I know it's not you, but, sorry about that."
1879,13583,13798,Simple,"Subject:            15:09          There is nothing complicated about this one. You have two variables that you should have initialized but you didn't or I'm saying ""you"", I know it's not you, but, sorry about that."
1879,14259,14359,Simple,Again its the arithmetic is pretty obvious. The types are fine. There's nothing complicated about it
1879,14361,14627,Anecdote,"Oh, you know, you know what, maybe I'm so not confident about the floating point number. I just read, uh read is an exaggeration. Browsed, it's probably a 30 page paper about why A plus B divided by two is not the correct way to estimate the midpoint of an interval."
1879,14721,15060,Language Expectations,"Subject:            16:20          Uh, well, yeah, but it, yes, but it, it also produces the results that you would not expect in many, many cases is not the best approximation to the midpoint in some cases. And in some weird corner cases, it gets you out. You get a result that is outside the interval, which is really bad. Um so floating"
1879,14756,16650,History Lesson,"Uh, well, yeah, but it, yes, but it, it also produces the results that you would not expect in many, many cases is not the best approximation to the midpoint in some cases. And in some weird corner cases, it gets you out. You get a result that is outside the interval, which is really bad. Um so floating

Interviewer:        16:43          Even in cases where there isn't overflow?

Subject:            16:45          Uh,

Subject:            16:52          Yeah, I believe so. It's... Math, math with floating point is hard. Uh, so, so I'll send you the paper if you want

Interviewer:        17:06          Yeah, I would that, that would be fantastic

Subject:            17:06          It's 29 pages or something about how, how to properly do eight plus A plus B divided by two.

Interviewer:        17:12          What was the upshot? Like? Is there an easy way to do it or just only a complicated way?

Subject:            17:18          There was a, like you do A plus A minus B divided by two or something and that's reasonably good in most cases or something. Um, so

Interviewer:        17:32          A minus B

Subject:            17:32          Or a B minus A divided by two or something. Right. That's kind of

Interviewer:        17:37          Plus A, it would just

Subject:            17:38          Plus A, yeah, that's like the length of the interval divided by two or something and that gives you a better result than the other one. But I think the upshot is you want to function and the function to deal with all the corner cases with, you know, you have really small numbers adding to really large numbers.

Interviewer:        17:59          Oh, right, yeah, that makes sense. So, that makes sense. I mean, that primed you for, some of the other results?

Subject:            18:07          Anything with floating points, I am like, I have no idea how they work anymore."
1879,20151,22045,History Lesson,
1879,21901,22045,Language Value Judgement,
1879,22438,22491,Surprising comment,"I'm pretty sure I got it wrong, but it doesn't matter"
1879,22438,22491,Apparent Contradiction,"I'm pretty sure I got it wrong, but it doesn't matter"
1879,22945,23765,printf,"Defines that needed to happen. So I'm hopefully M1 is two and M2 is one and I got them right. Yeah, that's good. You didn't do anything tricky like putting, like you know, you can reverse the order of the arguments in a printf

Interviewer:        27:25          What do you mean?

Interviewer:        27:27          You can, you can say, I don't remember what the notation is like percent D bracket two or something and that grabs the second argument and puts it first.

Subject:            27:39          That's useful when you want to print dates, you know how you... the Americans, we Americans [chuckles nervously], have the dates reversed. So you can, you can say printf with a, with a other order of the, the arguments passed the arguments in the same order every time. But the formatting thing changes the order."
1879,22945,23765,Potential Confusing Constructs,"Defines that needed to happen. So I'm hopefully M1 is two and M2 is one and I got them right. Yeah, that's good. You didn't do anything tricky like putting, like you know, you can reverse the order of the arguments in a printf

Interviewer:        27:25          What do you mean?

Interviewer:        27:27          You can, you can say, I don't remember what the notation is like percent D bracket two or something and that grabs the second argument and puts it first.

Subject:            27:39          That's useful when you want to print dates, you know how you... the Americans, we Americans [chuckles nervously], have the dates reversed. So you can, you can say printf with a, with a other order of the, the arguments passed the arguments in the same order every time. But the formatting thing changes the order."
1879,24052,24197,Double Check,"so this one is the one that I almost screwed up the side effects. So after the increment, the value is three, so three minus two is one. So yeah."
1879,24052,24197,Side-effect,"so this one is the one that I almost screwed up the side effects. So after the increment, the value is three, so three minus two is one. So yeah."
1879,24531,24568,Side-effect,I didn't think about the side effects
1879,24531,24618,Double Check,"I didn't think about the side effects, but that's why you do it again in your head, so."
1879,24805,25289,Side-effect,"Well see that there's a different thing. Right? So the, the plus plus operator, uh, returns a value. It's an expression, right. And I was thinking about what is the value of that expression? And the value of that expression is the value after the increment. And, and I was thinking about that and I stopped thinking about, oh, but it's also an operation, it changes, it has side effects. So, so that's why I think I made that mistake for a few seconds or minutes or something. Um, but"
1879,24805,25289,Causes of Confusion,"Well see that there's a different thing. Right? So the, the plus plus operator, uh, returns a value. It's an expression, right. And I was thinking about what is the value of that expression? And the value of that expression is the value after the increment. And, and I was thinking about that and I stopped thinking about, oh, but it's also an operation, it changes, it has side effects. So, so that's why I think I made that mistake for a few seconds or minutes or something. Um, but"
1879,25388,25583,C vs C++,"Because I was thinking about it as an expression first and then I would, I, I stopped thinking about it. I say, well it's not a function in c plus in c, but it could be a function in c plus plus."
1879,25661,25706,Side-effect,So I was not thinking the side effects of it.
1879,25850,26063,Would RTFM,"Uh, yeah, this one was just fun and the, you know, I would check the man page even though I'm pretty sure I know what percent D does percent C, sorry. I would check the man page because I would check the man page."
1879,26219,26405,Paranoia,"[Snippet 115] Cool. Uh, yeah, this one is the floating point and I'm paranoid about floating points after looking at that paper. So I know, I'm pretty sure that's what it does. Yeah. Um,"
1879,26447,26626,Simple,"pet 62] V one equals two. V Two, yeah. This is just two variables. That are not initialized first, but they are initialized later, so it doesn't strike me as particularly hard and"
1879,26447,26626,Uninitialized,"pet 62] V one equals two. V Two, yeah. This is just two variables. That are not initialized first, but they are initialized later, so it doesn't strike me as particularly hard and"
1879,26663,26729,Simple,[Snippet 26] This one doesn't strike me as relatively hard either.
